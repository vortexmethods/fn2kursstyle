%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: wing100unboundSol_toYuliya.pdf
%%Creator: Adobe Acrobat 21.7.0
%%For: Starter
%%CreationDate: 19.03.2022, 14:46:35
%%BoundingBox: 0 0 1000 654
%%HiResBoundingBox: 0 0 1000 654
%%CropBox: 0 0 1000 654
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 627 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.0-c000 79.1357c9e, 2021/07/14-00:39:56        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2021-05-18T22:41:21+03:00"
   xmp:CreatorTool="Wolfram Mathematica 11.3.0.0 for Microsoft Windows (64-bit) (March 6, 2018)"
   xmp:ModifyDate="2021-05-18T22:41:21+03:00"
   pdf:Producer=""
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -654 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 654 li
1000 654 li
1000 0 li
cp
clp
1.6 lw
2 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
52.73 39 mo
53.121 48.266 li
54.262 72.832 li
54.57 78.973 li
54.879 84.914 li
55.496 96.238 li
56.73 116.875 li
57.039 121.66 li
57.348 126.309 li
57.965 135.215 li
59.199 151.621 li
59.508 155.457 li
59.82 159.191 li
60.438 166.387 li
61.672 179.754 li
61.98 182.898 li
62.289 185.973 li
62.906 191.91 li
64.141 203.016 li
64.449 205.645 li
64.758 208.219 li
65.375 213.211 li
66.609 222.598 li
66.922 224.828 li
67.23 227.02 li
67.848 231.273 li
69.082 239.316 li
69.391 241.238 li
69.699 243.125 li
70.316 246.801 li
71.551 253.777 li
74.023 266.418 li
74.309 267.793 li
74.598 269.148 li
75.176 271.797 li
76.328 276.879 li
78.633 286.254 li
78.922 287.359 li
79.211 288.449 li
79.789 290.59 li
80.941 294.719 li
83.246 302.398 li
83.535 303.309 li
83.824 304.211 li
84.398 305.984 li
85.555 309.41 li
87.859 315.844 li
92.473 327.254 li
92.754 327.898 li
93.039 328.535 li
93.602 329.797 li
94.734 332.25 li
96.996 336.914 li
101.516 345.387 li
101.801 345.883 li
102.082 346.375 li
102.648 347.348 li
103.777 349.25 li
106.039 352.902 li
110.563 359.637 li
110.867 360.07 li
111.176 360.5 li
111.789 361.348 li
113.016 363.016 li
115.469 366.223 li
120.375 372.187 li
120.68 372.543 li
120.988 372.895 li
121.602 373.594 li
122.828 374.969 li
125.277 377.637 li
130.184 382.652 li
130.473 382.934 li
130.758 383.215 li
131.328 383.77 li
132.473 384.867 li
134.762 387.004 li
139.34 391.086 li
148.496 398.562 li
148.809 398.801 li
149.117 399.039 li
149.738 399.516 li
150.977 400.457 li
153.461 402.301 li
158.422 405.852 li
168.344 412.496 li
187.828 424.18 li
206.004 433.949 li
225.711 443.723 li
244.109 452.309 li
262.145 460.363 li
269.297 463.48 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .993378 1 0 cmyk
@
269.887 463.738 mo
299.977 476.504 li
319.77 484.719 li
339.199 492.762 li
357.324 500.352 li
376.977 508.855 li
395.324 517.277 li
415.203 527.336 li
415.813 527.664 li
416.422 527.996 li
417.641 528.664 li
420.082 530.02 li
424.961 532.816 li
434.719 538.805 li
435.289 539.172 li
435.855 539.543 li
436.996 540.289 li
439.27 541.809 li
443.824 544.977 li
444.105 545.18 li
444.391 545.383 li
444.961 545.793 li
446.098 546.625 li
448.375 548.32 li
452.926 551.867 li
454.16 552.867 li
455.395 553.887 li
457.863 555.973 li
462.797 560.379 li
463.105 560.668 li
463.414 560.953 li
464.031 561.531 li
465.266 562.707 li
467.73 565.125 li
472.668 570.25 li
472.953 570.562 li
473.242 570.875 li
473.82 571.508 li
474.973 572.785 li
477.273 575.41 li
481.883 580.953 li
491.098 593.207 li
491.379 593.605 li
491.664 594.004 li
492.227 594.809 li
493.355 596.422 li
495.617 599.699 li
500.133 606.344 li
500.414 606.758 li
500.699 607.172 li
501.262 608 li
502.391 609.645 li
504.648 612.867 li
504.934 613.262 li
505.215 613.656 li
505.777 614.434 li
506.91 615.949 li
509.168 618.809 li
509.473 619.172 li
509.781 619.531 li
510.391 620.227 li
510.699 620.566 li
511.004 620.895 li
511.617 621.531 li
511.922 621.84 li
512.23 622.137 li
512.844 622.703 li
513.148 622.973 li
513.457 623.23 li
514.066 623.719 li
514.375 623.941 li
514.68 624.156 li
514.988 624.359 li
515.293 624.551 li
515.598 624.727 li
515.906 624.891 li
516.211 625.039 li
516.52 625.172 li
516.824 625.293 li
517.129 625.398 li
517.438 625.488 li
517.742 625.562 li
518.051 625.621 li
518.355 625.664 li
518.66 625.687 li
518.969 625.691 li
519.273 625.68 li
519.582 625.648 li
519.887 625.602 li
520.195 625.531 li
520.5 625.441 li
520.805 625.332 li
521.113 625.203 li
521.418 625.055 li
521.727 624.879 li
522.031 624.687 li
522.336 624.469 li
522.645 624.23 li
522.949 623.965 li
523.258 623.68 li
523.867 623.035 li
524.176 622.676 li
524.48 622.293 li
525.094 621.453 li
525.398 620.992 li
525.707 620.508 li
526.32 619.457 li
526.625 618.891 li
526.934 618.301 li
527.543 617.035 li
528.77 614.184 li
529.055 613.457 li
529.34 612.703 li
529.914 611.129 li
531.055 607.699 li
531.344 606.781 li
531.629 605.844 li
532.199 603.898 li
533.344 599.746 li
533.629 598.656 li
533.914 597.543 li
534.484 595.258 li
535.629 590.457 li
537.914 580.031 li
538.203 578.66 li
538.488 577.277 li
539.059 574.469 li
540.203 568.719 li
542.488 556.793 li
547.063 532.191 li
547.371 530.523 li
547.684 528.859 li
548.301 525.547 li
549.539 518.969 li
552.02 506.121 li
552.328 504.551 li
552.637 502.984 li
553.258 499.887 li
554.496 493.801 li
556.977 482.105 li
557.285 480.691 li
557.594 479.289 li
558.215 476.516 li
559.453 471.098 li
561.934 460.793 li
566.887 442.262 li
567.191 441.211 li
567.496 440.172 li
568.105 438.117 li
569.32 434.125 li
571.754 426.578 li
572.059 425.672 li
572.363 424.777 li
572.973 423.008 li
574.188 419.574 li
576.621 413.074 li
576.926 412.297 li
577.23 411.523 li
577.836 410.004 li
579.055 407.043 li
581.488 401.441 li
586.352 391.387 li
586.637 390.844 li
586.918 390.305 li
587.488 389.242 li
588.621 387.164 li
590.891 383.207 li
591.176 382.73 li
591.457 382.258 li
592.027 381.324 li
593.16 379.496 li
595.43 376.012 li
595.715 375.59 li
595.996 375.172 li
596.563 374.348 li
597.699 372.734 li
599.969 369.648 li
604.508 364 li
604.816 363.637 li
605.121 363.281 li
605.738 362.574 li
606.969 361.195 li
609.43 358.562 li
614.352 353.734 li
614.66 353.453 li
614.965 353.172 li
615.582 352.613 li
616.813 351.523 li
619.273 349.437 li
624.195 345.586 li
624.48 345.375 li
624.77 345.164 li
625.344 344.746 li
626.492 343.926 li
628.789 342.344 li
633.383 339.402 li
633.672 339.227 li
633.957 339.051 li
634.531 338.707 li
635.68 338.027 li
637.98 336.719 li
642.574 334.266 li
642.855 334.121 li
643.137 333.98 li
643.699 333.695 li
644.824 333.141 li
647.078 332.059 li
651.582 330.027 li
652.145 329.785 li
652.707 329.547 li
653.832 329.074 li
656.086 328.152 li
660.59 326.418 li
661.199 326.191 li
661.813 325.965 li
663.031 325.527 li
665.477 324.672 li
670.363 323.055 li
670.668 322.957 li
670.977 322.859 li
671.586 322.668 li
672.809 322.289 li
675.25 321.551 li
680.141 320.152 li
680.426 320.074 li
680.711 319.992 li
681.277 319.836 li
682.418 319.527 li
684.699 318.926 li
689.258 317.766 li
698.379 315.629 li
698.688 315.559 li
698.996 315.492 li
699.613 315.355 li
700.852 315.082 li
703.324 314.551 li
708.266 313.523 li
718.152 311.574 li
736.617 308.187 li
754.719 304.93 li
760.262 303.902 li
@
760.852 303.793 mo
774.926 301.035 li
775.5 300.918 li
776.645 300.68 li
778.934 300.199 li
783.516 299.207 li
792.68 297.09 li
793.297 296.941 li
795.16 296.484 li
797.645 295.859 li
802.609 294.555 li
802.918 294.469 li
803.227 294.387 li
803.848 294.215 li
805.09 293.875 li
807.57 293.172 li
812.535 291.699 li
813.754 291.324 li
814.973 290.941 li
817.41 290.16 li
822.285 288.516 li
822.59 288.406 li
822.895 288.301 li
823.504 288.086 li
824.723 287.648 li
827.16 286.75 li
832.035 284.855 li
832.316 284.742 li
832.602 284.625 li
833.172 284.395 li
834.309 283.922 li
836.582 282.957 li
841.129 280.918 li
841.41 280.785 li
841.695 280.652 li
842.266 280.383 li
843.402 279.84 li
845.676 278.719 li
850.223 276.348 li
850.527 276.18 li
850.836 276.012 li
851.453 275.672 li
852.688 274.98 li
855.152 273.551 li
860.082 270.492 li
860.391 270.289 li
860.699 270.09 li
861.313 269.68 li
862.547 268.852 li
865.012 267.133 li
869.941 263.426 li
870.23 263.199 li
870.516 262.969 li
871.094 262.508 li
872.242 261.562 li
874.543 259.605 li
879.148 255.383 li
879.434 255.105 li
879.723 254.824 li
880.297 254.258 li
881.449 253.098 li
883.75 250.687 li
888.352 245.441 li
888.633 245.098 li
888.918 244.754 li
889.48 244.059 li
890.609 242.637 li
892.863 239.66 li
893.145 239.277 li
893.43 238.887 li
893.992 238.102 li
895.121 236.496 li
897.375 233.125 li
897.66 232.687 li
897.941 232.246 li
898.504 231.355 li
899.633 229.527 li
901.891 225.676 li
906.402 217.105 li
906.707 216.477 li
907.012 215.84 li
907.625 214.551 li
908.848 211.891 li
911.297 206.207 li
911.602 205.461 li
911.91 204.707 li
912.52 203.172 li
913.746 199.992 li
916.191 193.168 li
916.5 192.266 li
916.805 191.352 li
917.418 189.492 li
918.641 185.629 li
921.086 177.266 li
921.395 176.152 li
921.699 175.027 li
922.313 172.727 li
923.535 167.926 li
925.984 157.426 li
926.27 156.113 li
926.555 154.785 li
927.125 152.066 li
928.266 146.375 li
928.555 144.898 li
928.84 143.398 li
929.41 140.324 li
930.551 133.871 li
930.836 132.191 li
931.121 130.484 li
931.695 126.98 li
932.836 119.602 li
935.121 103.156 li
935.406 100.922 li
935.691 98.641 li
936.262 93.949 li
937.402 83.984 li
937.688 81.363 li
937.977 78.684 li
938.547 73.156 li
939.688 61.348 li
939.973 58.227 li
940.258 55.031 li
940.828 48.418 li
941.586 39 li
@
36.035 200.934 mo
75.188 200.934 li
.749721 .679194 .670497 .901457 cmyk
@
75.332 282.875 mo
92.023 282.875 li
@
92.172 325.102 mo
105.262 325.102 li
@
105.406 350.105 mo
116.668 350.105 li
@
116.813 366.75 mo
126.93 366.75 li
@
127.074 378.883 mo
136.398 378.883 li
@
136.543 388.352 mo
145.277 388.352 li
@
145.422 396.125 mo
153.707 396.125 li
@
153.852 402.742 mo
161.777 402.742 li
@
161.922 408.543 mo
169.559 408.543 li
@
169.703 413.738 mo
177.102 413.738 li
@
177.246 418.473 mo
184.449 418.473 li
@
184.594 422.844 mo
191.633 422.844 li
@
191.777 426.93 mo
198.68 426.93 li
@
198.824 430.781 mo
205.613 430.781 li
@
205.758 434.445 mo
212.453 434.445 li
@
212.598 437.949 mo
219.215 437.949 li
@
219.359 441.324 mo
225.91 441.324 li
@
226.059 444.586 mo
232.559 444.586 li
@
232.707 447.758 mo
239.172 447.758 li
@
239.316 450.852 mo
245.758 450.852 li
@
245.902 453.883 mo
252.324 453.883 li
@
252.473 456.859 mo
258.891 456.859 li
@
259.035 459.793 mo
265.457 459.793 li
@
265.602 462.691 mo
272.039 462.691 li
@
272.184 465.566 mo
278.641 465.566 li
@
278.789 468.422 mo
285.281 468.422 li
@
285.426 471.266 mo
291.961 471.266 li
@
292.105 474.109 mo
298.691 474.109 li
@
298.84 476.957 mo
305.488 476.957 li
@
305.637 479.82 mo
312.359 479.82 li
@
312.508 482.703 mo
319.32 482.703 li
@
319.465 485.621 mo
326.379 485.621 li
@
326.527 488.578 mo
333.559 488.578 li
@
333.703 491.594 mo
340.867 491.594 li
@
341.012 494.684 mo
348.328 494.684 li
@
348.473 497.859 mo
355.965 497.859 li
@
356.109 501.152 mo
363.801 501.152 li
@
363.949 504.582 mo
371.871 504.582 li
@
372.02 508.195 mo
380.211 508.195 li
@
380.355 512.035 mo
388.867 512.035 li
@
389.012 516.172 mo
397.898 516.172 li
@
398.043 520.699 mo
407.383 520.699 li
@
407.527 525.766 mo
417.422 525.766 li
@
417.566 531.582 mo
428.16 531.582 li
@
428.309 538.508 mo
439.816 538.508 li
@
439.961 547.184 mo
452.719 547.184 li
@
452.863 558.883 mo
467.461 558.883 li
@
467.605 576.582 mo
485.238 576.582 li
@
485.383 603.684 mo
509.059 603.684 li
@
509.203 588.93 mo
543.16 588.93 li
@
543.309 484.445 mo
570.496 484.445 li
@
570.645 407.66 mo
589.137 407.66 li
@
589.285 374.836 mo
603.785 374.836 li
@
603.93 357.895 mo
616.18 357.895 li
@
616.324 347.301 mo
627.109 347.301 li
@
627.254 339.937 mo
636.996 339.937 li
@
637.145 334.477 mo
646.105 334.477 li
@
646.25 330.23 mo
654.602 330.23 li
@
654.75 326.812 mo
662.609 326.812 li
@
662.754 323.988 mo
670.211 323.988 li
@
670.355 321.598 mo
677.477 321.598 li
@
677.621 319.535 mo
684.457 319.535 li
@
684.602 317.727 mo
691.191 317.727 li
@
691.34 316.113 mo
697.719 316.113 li
@
697.867 314.652 mo
704.066 314.652 li
@
704.211 313.312 mo
710.254 313.312 li
@
710.402 312.07 mo
716.309 312.07 li
@
716.453 310.898 mo
722.242 310.898 li
@
722.391 309.785 mo
728.078 309.785 li
@
728.223 308.711 mo
733.824 308.711 li
@
733.969 307.664 mo
739.496 307.664 li
@
739.641 306.633 mo
745.105 306.633 li
@
745.25 305.605 mo
750.664 305.605 li
@
750.813 304.578 mo
756.188 304.578 li
@
756.332 303.535 mo
761.68 303.535 li
@
761.824 302.465 mo
767.152 302.465 li
@
767.297 301.363 mo
772.617 301.363 li
@
772.766 300.219 mo
778.086 300.219 li
@
778.23 299.02 mo
783.566 299.02 li
@
783.711 297.754 mo
789.07 297.754 li
@
789.219 296.406 mo
794.613 296.406 li
@
794.758 294.961 mo
800.199 294.961 li
@
800.344 293.406 mo
805.848 293.406 li
@
805.996 291.711 mo
811.578 291.711 li
@
811.723 289.852 mo
817.398 289.852 li
@
817.543 287.801 mo
823.332 287.801 li
@
823.477 285.508 mo
829.402 285.508 li
@
829.547 282.918 mo
835.637 282.918 li
@
835.781 279.965 mo
842.066 279.965 li
@
842.215 276.539 mo
848.734 276.539 li
@
848.883 272.5 mo
855.695 272.5 li
@
855.84 267.633 mo
863.012 267.633 li
@
863.156 261.609 mo
870.781 261.609 li
@
870.926 253.875 mo
879.141 253.875 li
@
879.285 243.473 mo
888.293 243.473 li
@
888.438 228.551 mo
898.594 228.551 li
@
898.738 205.254 mo
910.723 205.254 li
@
910.871 164.746 mo
926.457 164.746 li
@
926.602 83.594 mo
964.652 83.594 li
@
gsave
35 38 mo
77 38 li
77 321 li
35 321 li
cp
clp
36.035 -115.805 mo
36.102 -115.805 li
36.172 -115.801 li
36.313 -115.785 li
36.453 -115.754 li
36.594 -115.715 li
36.805 -115.633 li
36.945 -115.563 li
37.016 -115.523 li
37.156 -115.438 li
37.297 -115.336 li
37.438 -115.227 li
37.508 -115.168 li
37.574 -115.105 li
37.715 -114.973 li
37.785 -114.902 li
37.855 -114.828 li
37.996 -114.672 li
38.277 -114.324 li
38.348 -114.23 li
38.418 -114.133 li
38.559 -113.93 li
38.84 -113.492 li
38.91 -113.375 li
38.98 -113.254 li
39.117 -113.004 li
39.398 -112.473 li
39.539 -112.191 li
39.68 -111.895 li
39.961 -111.273 li
40.52 -109.887 li
40.598 -109.684 li
40.672 -109.48 li
40.824 -109.059 li
41.129 -108.176 li
41.738 -106.25 li
41.813 -105.996 li
41.891 -105.738 li
42.043 -105.207 li
42.348 -104.113 li
42.953 -101.758 li
43.031 -101.445 li
43.105 -101.133 li
43.258 -100.5 li
43.563 -99.188 li
44.172 -96.402 li
45.387 -90.195 li
45.527 -89.414 li
45.672 -88.621 li
45.953 -87.004 li
46.523 -83.629 li
47.66 -76.32 li
47.73 -75.84 li
47.801 -75.355 li
47.941 -74.379 li
48.227 -72.391 li
48.793 -68.277 li
49.93 -59.496 li
50 -58.934 li
50.07 -58.367 li
50.207 -57.23 li
50.488 -54.922 li
51.043 -50.176 li
52.156 -40.156 li
52.297 -38.852 li
52.438 -37.539 li
52.715 -34.883 li
53.27 -29.434 li
54.383 -18.02 li
54.461 -17.219 li
54.535 -16.418 li
54.688 -14.805 li
54.988 -11.535 li
55.594 -4.85199 li
56.801 9.133 li
59.215 39.516 li
59.355 41.391 li
59.496 43.27 li
59.781 47.07 li
60.344 54.797 li
61.473 70.77 li
63.727 104.789 li
68.613 187.906 li
68.762 190.656 li
68.91 193.418 li
69.211 198.98 li
69.813 210.246 li
71.012 233.34 li
71.16 236.277 li
71.313 239.23 li
71.609 245.168 li
72.211 257.184 li
73.41 281.777 li
73.48 283.234 li
73.551 284.695 li
73.691 287.621 li
73.969 293.504 li
74.109 296.457 li
74.25 299.426 li
74.527 305.387 li
74.598 306.887 li
74.668 308.383 li
74.809 311.391 li
74.949 314.406 li
75.09 317.434 li
75.156 318.953 li
75.188 319.578 li
.817563 .0356756 1 .0030518 cmyk
@
grestore
75.332 282.953 mo
75.438 283.184 li
75.508 283.336 li
75.648 283.645 li
75.719 283.797 li
75.789 283.953 li
75.926 284.262 li
76.207 284.883 li
76.766 286.137 li
77.887 288.695 li
78.035 289.047 li
78.188 289.398 li
78.492 290.109 li
79.098 291.539 li
80.313 294.461 li
82.738 300.52 li
87.27 312.605 li
87.336 312.797 li
87.406 312.992 li
87.547 313.379 li
87.824 314.152 li
88.379 315.719 li
89.488 318.891 li
89.559 319.09 li
89.629 319.293 li
89.766 319.691 li
90.043 320.5 li
90.598 322.121 li
90.668 322.324 li
90.738 322.531 li
90.875 322.937 li
91.152 323.758 li
91.293 324.172 li
91.43 324.582 li
91.711 325.41 li
91.859 325.863 li
91.934 326.086 li
92.012 326.312 li
92.023 326.355 li
.817563 .0356756 1 .0030518 cmyk
@
92.172 326.613 mo
92.313 326.863 li
92.461 327.129 li
92.613 327.395 li
92.914 327.926 li
94.117 330.086 li
96.527 334.523 li
101.023 343.211 li
101.102 343.363 li
101.176 343.516 li
101.633 344.43 li
102.242 345.656 li
102.32 345.812 li
102.395 345.965 li
102.547 346.273 li
102.852 346.895 li
103.461 348.141 li
103.535 348.297 li
103.613 348.453 li
103.766 348.766 li
104.07 349.395 li
104.145 349.551 li
104.223 349.711 li
104.68 350.66 li
104.754 350.82 li
104.832 350.977 li
104.984 351.297 li
105.059 351.457 li
105.137 351.613 li
105.211 351.773 li
105.262 351.875 li
@
105.406 351.645 mo
105.441 351.691 li
105.516 351.793 li
105.594 351.895 li
105.668 351.996 li
105.746 352.098 li
105.898 352.305 li
105.973 352.402 li
106.195 352.707 li
106.496 353.109 li
107.094 353.922 li
108.289 355.559 li
110.684 358.906 li
110.754 359.004 li
110.82 359.105 li
110.961 359.301 li
111.238 359.699 li
111.797 360.496 li
112.914 362.105 li
113.055 362.309 li
113.191 362.512 li
113.473 362.918 li
114.027 363.734 li
115.145 365.379 li
115.219 365.492 li
115.297 365.602 li
115.445 365.828 li
115.75 366.277 li
115.824 366.391 li
115.902 366.504 li
116.051 366.73 li
116.355 367.184 li
116.43 367.297 li
116.504 367.414 li
116.582 367.527 li
116.656 367.641 li
116.668 367.656 li
@
116.813 367.645 mo
116.883 367.723 li
116.961 367.805 li
117.566 368.469 li
119.984 371.164 li
124.5 376.355 li
126.93 379.227 li
@
127.074 379.285 mo
134.203 386.152 li
136.398 388.344 li
@
136.543 388.422 mo
143.547 394.375 li
145.277 395.887 li
@
145.422 395.973 mo
152.535 401.437 li
153.707 402.359 li
@
153.852 402.441 mo
161.777 408.055 li
@
161.922 408.137 mo
169.559 413.176 li
@
169.703 413.254 mo
176.008 417.168 li
177.102 417.855 li
@
177.246 417.926 mo
184.449 422.184 li
@
184.594 422.254 mo
189.82 425.203 li
191.633 426.234 li
@
191.777 426.305 mo
198.68 430.059 li
@
198.824 430.125 mo
203.992 432.84 li
205.613 433.699 li
@
205.758 433.762 mo
212.453 437.184 li
@
212.598 437.246 mo
217.832 439.848 li
219.215 440.539 li
@
219.359 440.598 mo
225.91 443.789 li
@
226.059 443.844 mo
232.035 446.691 li
232.559 446.945 li
@
232.707 447 mo
239.172 450.023 li
@
239.316 450.078 mo
245.758 453.039 li
@
245.902 453.094 mo
250.344 455.105 li
252.324 456.004 li
@
252.473 456.055 mo
258.891 458.922 li
@
259.035 458.973 mo
264.543 461.406 li
265.457 461.809 li
@
265.602 461.855 mo
272.039 464.668 li
@
272.184 464.711 mo
278.637 467.504 li
278.641 467.508 li
@
278.789 467.551 mo
285.281 470.336 li
@
285.426 470.375 mo
291.961 473.156 li
@
292.105 473.199 mo
297.352 475.422 li
298.691 475.984 li
@
298.84 476.023 mo
305.488 478.824 li
@
305.637 478.859 mo
311.211 481.203 li
312.359 481.684 li
@
312.508 481.715 mo
319.32 484.57 li
@
319.465 484.602 mo
325.43 487.102 li
326.379 487.496 li
@
326.527 487.523 mo
333.559 490.473 li
@
333.703 490.496 mo
339.551 492.965 li
340.867 493.512 li
@
341.012 493.531 mo
348.328 496.637 li
@
348.473 496.648 mo
353.336 498.742 li
355.965 499.859 li
@
356.109 499.863 mo
362.703 502.738 li
363.801 503.215 li
@
363.949 503.207 mo
371.711 506.656 li
371.871 506.727 li
@
372.02 506.703 mo
380.211 510.441 li
@
380.355 510.402 mo
385.957 513.062 li
388.867 514.418 li
@
389.012 514.352 mo
395.242 517.445 li
397.898 518.738 li
@
398.043 518.629 mo
404.637 522.105 li
407.383 523.516 li
@
407.527 523.344 mo
413.91 526.984 li
414.191 527.141 li
414.473 527.301 li
415.598 527.926 li
416.16 528.234 li
416.723 528.547 li
416.793 528.582 li
417.285 528.855 li
417.355 528.891 li
417.422 528.93 li
@
417.566 528.648 mo
417.707 528.738 li
417.848 528.832 li
417.918 528.875 li
417.988 528.922 li
418.129 529.012 li
418.414 529.191 li
418.488 529.242 li
418.566 529.289 li
418.719 529.391 li
419.023 529.586 li
419.633 529.973 li
420.852 530.75 li
423.293 532.277 li
428.082 535.207 li
428.16 535.254 li
@
428.309 534.781 mo
432.625 537.945 li
432.703 538 li
432.855 538.109 li
433.156 538.324 li
433.762 538.758 li
434.973 539.621 li
435.051 539.676 li
435.125 539.727 li
435.277 539.836 li
435.578 540.047 li
436.188 540.473 li
437.398 541.32 li
437.469 541.367 li
437.539 541.418 li
437.961 541.711 li
438.527 542.102 li
438.668 542.195 li
438.813 542.293 li
439.094 542.488 li
439.164 542.535 li
439.234 542.586 li
439.375 542.68 li
439.445 542.73 li
439.516 542.777 li
439.66 542.875 li
439.801 542.969 li
439.816 542.98 li
@
439.961 542.113 mo
440.082 542.223 li
440.223 542.348 li
440.293 542.414 li
440.367 542.477 li
440.508 542.602 li
440.789 542.855 li
440.859 542.922 li
440.93 542.984 li
441.074 543.109 li
441.355 543.363 li
441.922 543.867 li
441.988 543.93 li
442.059 543.988 li
442.199 544.113 li
442.477 544.359 li
443.027 544.848 li
444.137 545.82 li
446.355 547.734 li
446.43 547.797 li
446.504 547.863 li
446.656 547.992 li
446.957 548.246 li
447.559 548.758 li
448.762 549.77 li
448.91 549.895 li
449.063 550.02 li
449.965 550.77 li
451.168 551.762 li
451.238 551.816 li
451.309 551.875 li
451.445 551.988 li
451.727 552.219 li
451.797 552.273 li
451.867 552.332 li
452.289 552.672 li
452.43 552.789 li
452.5 552.844 li
452.57 552.902 li
452.641 552.957 li
452.711 553.016 li
452.719 553.02 li
@
452.863 551.195 mo
452.992 551.348 li
453.129 551.516 li
453.41 551.848 li
453.48 551.93 li
453.551 552.016 li
453.691 552.18 li
453.973 552.512 li
454.535 553.172 li
455.656 554.484 li
455.73 554.574 li
455.809 554.66 li
455.961 554.836 li
456.266 555.191 li
456.871 555.891 li
458.09 557.277 li
460.523 560.004 li
460.664 560.16 li
460.809 560.316 li
461.09 560.633 li
461.66 561.254 li
462.797 562.488 li
462.867 562.566 li
462.938 562.641 li
463.078 562.793 li
463.363 563.098 li
463.93 563.707 li
465.066 564.91 li
465.207 565.059 li
465.344 565.203 li
465.625 565.496 li
466.18 566.074 li
466.25 566.148 li
466.32 566.219 li
466.461 566.363 li
466.738 566.652 li
466.809 566.723 li
466.879 566.797 li
467.016 566.941 li
467.156 567.082 li
467.293 567.227 li
467.461 567.395 li
@
467.605 562.613 mo
467.711 562.809 li
467.852 563.059 li
467.922 563.187 li
467.992 563.312 li
468.129 563.566 li
468.41 564.066 li
468.477 564.195 li
468.688 564.57 li
468.965 565.07 li
469.523 566.066 li
469.598 566.199 li
469.672 566.336 li
469.824 566.602 li
470.125 567.137 li
470.73 568.203 li
471.938 570.312 li
474.355 574.441 li
478.867 581.824 li
478.941 581.945 li
479.02 582.066 li
479.477 582.793 li
480.086 583.75 li
481.309 585.645 li
481.387 585.766 li
481.461 585.883 li
481.617 586.117 li
482.531 587.512 li
483.754 589.34 li
483.828 589.453 li
483.902 589.562 li
484.055 589.785 li
484.355 590.227 li
484.43 590.34 li
484.652 590.668 li
484.953 591.109 li
485.102 591.328 li
485.238 591.52 li
@
485.383 576.125 mo
485.402 576.187 li
485.477 576.41 li
485.555 576.633 li
485.629 576.852 li
485.703 577.074 li
485.852 577.516 li
486.152 578.398 li
486.227 578.617 li
486.305 578.84 li
486.453 579.277 li
486.754 580.152 li
487.352 581.895 li
488.551 585.336 li
488.621 585.531 li
488.832 586.129 li
489.113 586.922 li
489.672 588.496 li
490.789 591.609 li
493.027 597.695 li
497.883 610.227 li
502.414 621.086 li
502.555 621.406 li
502.691 621.727 li
502.969 622.363 li
503.523 623.625 li
504.637 626.109 li
504.703 626.262 li
504.773 626.418 li
504.914 626.723 li
505.191 627.332 li
505.746 628.543 li
506.855 630.93 li
506.934 631.09 li
507.008 631.25 li
507.156 631.566 li
507.461 632.203 li
507.609 632.516 li
507.762 632.832 li
508.063 633.457 li
508.211 633.77 li
508.363 634.082 li
508.438 634.238 li
508.512 634.391 li
508.664 634.699 li
508.738 634.855 li
508.816 635.008 li
508.891 635.164 li
509.039 635.469 li
509.059 635.504 li
@
509.203 622.309 mo
509.266 622.191 li
509.34 622.047 li
509.418 621.906 li
509.566 621.621 li
509.867 621.051 li
510.473 619.914 li
511.676 617.652 li
511.746 617.523 li
511.816 617.391 li
511.957 617.129 li
512.238 616.602 li
512.801 615.555 li
513.926 613.469 li
516.172 609.328 li
521.047 600.523 li
525.836 592.121 li
530.297 584.52 li
535.141 576.551 li
535.211 576.437 li
535.281 576.32 li
535.703 575.641 li
536.27 574.734 li
537.398 572.934 li
537.469 572.82 li
537.539 572.711 li
537.68 572.484 li
537.961 572.039 li
538.527 571.152 li
539.656 569.387 li
539.734 569.266 li
539.809 569.148 li
539.965 568.91 li
540.27 568.437 li
540.883 567.492 li
540.957 567.375 li
541.035 567.258 li
541.492 566.555 li
542.105 565.621 li
542.184 565.504 li
542.258 565.387 li
542.41 565.156 li
542.488 565.039 li
542.563 564.926 li
542.719 564.691 li
542.793 564.578 li
542.871 564.461 li
542.945 564.348 li
543.023 564.23 li
543.102 564.117 li
543.16 564.023 li
@
543.309 554.098 mo
543.328 554.012 li
543.406 553.723 li
543.48 553.434 li
543.637 552.848 li
543.941 551.676 li
544.555 549.301 li
549.359 529.504 li
553.844 509.184 li
558.707 485.152 li
563.246 460.852 li
563.387 460.078 li
563.523 459.301 li
563.801 457.75 li
564.359 454.621 li
565.473 448.281 li
565.539 447.883 li
565.609 447.484 li
565.75 446.684 li
566.027 445.074 li
566.582 441.84 li
567.695 435.289 li
567.773 434.84 li
567.996 433.492 li
568.301 431.691 li
568.902 428.059 li
568.98 427.605 li
569.203 426.234 li
569.508 424.398 li
569.582 423.941 li
569.656 423.48 li
569.809 422.559 li
570.109 420.707 li
570.184 420.242 li
570.262 419.781 li
570.41 418.852 li
570.488 418.383 li
570.496 418.324 li
@
570.645 432.828 mo
570.715 432.668 li
570.789 432.5 li
570.863 432.328 li
571.016 431.988 li
571.316 431.301 li
571.391 431.133 li
571.469 430.957 li
571.617 430.613 li
571.922 429.922 li
572.523 428.523 li
572.805 427.867 li
573.086 427.207 li
573.652 425.879 li
574.777 423.176 li
577.031 417.617 li
581.914 404.832 li
582.063 404.426 li
582.211 404.016 li
582.512 403.195 li
583.109 401.543 li
584.309 398.195 li
584.383 397.98 li
584.461 397.77 li
584.609 397.348 li
584.91 396.496 li
585.508 394.785 li
586.707 391.316 li
586.777 391.109 li
586.848 390.906 li
586.984 390.496 li
587.266 389.676 li
587.824 388.027 li
587.895 387.816 li
588.105 387.195 li
588.383 386.359 li
588.453 386.152 li
588.523 385.941 li
588.664 385.523 li
588.73 385.312 li
588.801 385.105 li
589.082 384.262 li
589.137 384.094 li
@
589.285 386.766 mo
589.359 386.66 li
589.5 386.465 li
589.57 386.371 li
589.781 386.078 li
590.059 385.691 li
590.199 385.496 li
590.34 385.305 li
590.617 384.914 li
591.176 384.125 li
596.027 377.039 li
600.555 369.992 li
600.621 369.879 li
600.691 369.77 li
600.832 369.547 li
601.109 369.098 li
601.664 368.203 li
601.73 368.09 li
601.941 367.75 li
602.219 367.297 li
602.773 366.387 li
602.84 366.273 li
602.91 366.156 li
603.051 365.93 li
603.117 365.812 li
603.188 365.699 li
603.328 365.469 li
603.395 365.355 li
603.465 365.238 li
603.535 365.125 li
603.605 365.008 li
603.672 364.895 li
603.742 364.777 li
603.785 364.707 li
@
603.93 365.023 mo
604.02 364.934 li
604.16 364.801 li
604.438 364.531 li
604.992 363.984 li
605.141 363.836 li
605.293 363.687 li
605.594 363.391 li
606.195 362.793 li
607.398 361.578 li
609.805 359.105 li
609.945 358.957 li
610.086 358.812 li
610.367 358.516 li
610.93 357.926 li
612.051 356.734 li
612.121 356.656 li
612.332 356.434 li
612.613 356.129 li
613.176 355.523 li
614.297 354.301 li
614.375 354.215 li
614.449 354.133 li
614.906 353.629 li
614.984 353.547 li
615.059 353.461 li
615.516 352.957 li
615.59 352.871 li
615.668 352.785 li
615.82 352.617 li
615.895 352.531 li
615.973 352.449 li
616.047 352.363 li
616.125 352.277 li
616.18 352.215 li
@
616.324 352.152 mo
616.43 352.074 li
616.734 351.848 li
616.809 351.789 li
616.887 351.734 li
617.035 351.621 li
617.949 350.93 li
619.168 350.004 li
623.715 346.43 li
623.855 346.32 li
623.992 346.207 li
624.273 345.98 li
624.828 345.531 li
625.945 344.617 li
626.016 344.562 li
626.082 344.504 li
626.223 344.391 li
626.5 344.16 li
626.641 344.043 li
626.781 343.93 li
627.059 343.699 li
627.109 343.656 li
@
627.254 343.527 mo
627.406 343.434 li
627.477 343.395 li
627.617 343.309 li
628.172 342.973 li
628.25 342.93 li
628.324 342.883 li
628.477 342.793 li
628.777 342.609 li
629.383 342.238 li
630.59 341.496 li
633.008 339.984 li
633.078 339.941 li
633.152 339.895 li
634.137 339.266 li
635.266 338.543 li
635.336 338.496 li
635.406 338.453 li
635.547 338.359 li
635.832 338.18 li
636.395 337.812 li
636.535 337.719 li
636.676 337.629 li
636.957 337.445 li
636.996 337.418 li
@
637.145 337.285 mo
637.242 337.238 li
637.523 337.098 li
637.598 337.059 li
637.676 337.02 li
637.828 336.945 li
638.133 336.789 li
638.746 336.48 li
639.969 335.859 li
642.414 334.598 li
646.105 332.645 li
@
646.25 332.527 mo
651.695 330.164 li
654.602 328.859 li
@
654.75 328.754 mo
661.086 326.355 li
662.609 325.766 li
@
662.754 325.672 mo
670.211 323.176 li
@
670.355 323.094 mo
674.855 321.758 li
677.477 320.965 li
@
677.621 320.891 mo
684.457 319.039 li
@
684.602 318.973 mo
691.191 317.34 li
@
691.34 317.277 mo
697.719 315.812 li
@
697.867 315.758 mo
703.254 314.598 li
704.066 314.422 li
@
704.211 314.371 mo
710.254 313.141 li
@
710.402 313.094 mo
716.309 311.945 li
@
716.453 311.902 mo
721.957 310.871 li
722.242 310.816 li
@
722.391 310.773 mo
728.078 309.738 li
@
728.223 309.695 mo
733.824 308.695 li
@
733.969 308.652 mo
739.496 307.672 li
@
739.641 307.633 mo
745.105 306.664 li
@
745.25 306.625 mo
749.91 305.797 li
750.664 305.66 li
@
750.813 305.621 mo
756.188 304.648 li
@
756.332 304.609 mo
761.68 303.621 li
@
761.824 303.582 mo
767.152 302.57 li
@
767.297 302.531 mo
772.617 301.484 li
@
772.766 301.441 mo
777.918 300.387 li
778.086 300.352 li
@
778.23 300.312 mo
783.566 299.168 li
@
783.711 299.125 mo
789.07 297.914 li
@
789.219 297.867 mo
794.613 296.582 li
@
794.758 296.535 mo
800.199 295.156 li
@
800.344 295.105 mo
805.848 293.613 li
@
805.996 293.562 mo
810.699 292.191 li
811.578 291.941 li
@
811.723 291.883 mo
817.398 290.105 li
@
817.543 290.043 mo
823.332 288.078 li
@
823.477 288.012 mo
829.371 285.832 li
829.402 285.82 li
@
829.547 285.75 mo
835.637 283.277 li
@
835.781 283.199 mo
842.066 280.375 li
@
842.215 280.293 mo
848.016 277.383 li
848.734 277.027 li
@
848.883 276.934 mo
855.695 273.094 li
@
855.84 272.992 mo
861.824 269.125 li
863.012 268.379 li
@
870.926 262.453 mo
871.203 262.199 li
871.281 262.129 li
871.434 261.988 li
871.738 261.711 li
872.344 261.156 li
873.563 260.059 li
875.996 257.898 li
879.141 255.184 li
@
879.285 255.051 mo
885 248.746 li
885.074 248.668 li
885.148 248.586 li
885.301 248.426 li
885.602 248.105 li
886.207 247.465 li
886.281 247.387 li
886.359 247.305 li
886.508 247.148 li
886.813 246.828 li
887.414 246.199 li
887.492 246.121 li
887.566 246.043 li
887.719 245.887 li
888.02 245.574 li
888.094 245.496 li
888.172 245.418 li
888.293 245.293 li
@
888.438 245.168 mo
888.547 245.008 li
888.625 244.895 li
888.699 244.785 li
888.773 244.672 li
888.926 244.449 li
889.227 244.004 li
889.832 243.121 li
889.902 243.016 li
890.113 242.711 li
890.395 242.301 li
890.961 241.488 li
892.09 239.875 li
894.344 236.727 li
894.422 236.621 li
894.496 236.516 li
894.648 236.305 li
894.953 235.887 li
895.566 235.059 li
896.789 233.418 li
896.863 233.316 li
896.941 233.215 li
897.398 232.605 li
898.012 231.805 li
898.086 231.703 li
898.164 231.605 li
898.316 231.406 li
898.395 231.305 li
898.469 231.207 li
898.547 231.105 li
898.594 231.043 li
@
898.738 231.039 mo
898.773 230.965 li
898.852 230.801 li
898.926 230.641 li
899.004 230.477 li
899.082 230.316 li
899.234 229.992 li
899.309 229.836 li
899.383 229.676 li
899.531 229.359 li
899.832 228.73 li
900.434 227.48 li
901.633 225.016 li
904.031 220.215 li
904.594 219.121 li
905.152 218.035 li
906.273 215.898 li
906.34 215.766 li
906.41 215.633 li
906.551 215.371 li
906.832 214.844 li
907.391 213.801 li
908.512 211.742 li
908.586 211.602 li
908.664 211.465 li
908.813 211.191 li
909.117 210.641 li
909.191 210.504 li
909.27 210.367 li
909.422 210.098 li
909.723 209.555 li
909.801 209.418 li
909.875 209.285 li
910.027 209.016 li
910.102 208.879 li
910.18 208.746 li
910.332 208.477 li
910.406 208.344 li
910.484 208.211 li
910.559 208.078 li
910.633 207.941 li
910.711 207.809 li
910.723 207.785 li
@
910.871 207.082 mo
910.938 206.875 li
911.016 206.641 li
911.09 206.406 li
911.242 205.941 li
911.543 205.02 li
912.152 203.184 li
913.367 199.578 li
917.898 186.844 li
917.969 186.66 li
918.035 186.473 li
918.176 186.102 li
918.453 185.363 li
919.008 183.902 li
920.121 181.031 li
920.188 180.852 li
920.398 180.324 li
920.676 179.621 li
921.23 178.23 li
922.34 175.496 li
922.418 175.316 li
922.492 175.133 li
922.645 174.77 li
922.945 174.047 li
923.547 172.613 li
923.621 172.437 li
923.699 172.262 li
923.848 171.906 li
924.148 171.203 li
924.754 169.816 li
924.902 169.473 li
925.055 169.129 li
925.355 168.445 li
925.504 168.109 li
925.656 167.77 li
925.957 167.098 li
926.031 166.934 li
926.109 166.766 li
926.184 166.598 li
926.258 166.434 li
926.336 166.27 li
926.41 166.102 li
926.457 165.996 li
@
gsave
925 38 mo
966 38 li
966 204 li
925 204 li
cp
clp
926.602 202.824 mo
926.637 202.082 li
926.711 200.344 li
926.859 196.883 li
927.164 190 li
927.234 188.402 li
927.305 186.809 li
927.445 183.629 li
927.727 177.305 li
928.289 164.801 li
929.41 140.375 li
931.66 93.836 li
936.539 3.56598 li
936.688 1.02698 li
936.836 -1.49597 li
937.137 -6.508 li
937.734 -16.363 li
938.93 -35.418 li
941.324 -70.898 li
941.395 -71.883 li
941.465 -72.859 li
941.602 -74.809 li
941.883 -78.668 li
942.441 -86.25 li
943.555 -100.836 li
943.625 -101.723 li
943.695 -102.605 li
943.836 -104.363 li
944.113 -107.844 li
944.672 -114.66 li
945.789 -127.727 li
945.863 -128.586 li
945.941 -129.441 li
946.09 -131.137 li
946.395 -134.496 li
947 -141.039 li
948.211 -153.457 li
948.285 -154.203 li
948.359 -154.945 li
948.512 -156.422 li
948.816 -159.332 li
949.422 -164.984 li
950.629 -175.621 li
950.703 -176.215 li
950.773 -176.805 li
950.914 -177.977 li
951.195 -180.281 li
951.762 -184.746 li
952.891 -193.098 li
953.031 -194.09 li
953.172 -195.066 li
953.457 -196.984 li
954.02 -200.68 li
955.152 -207.484 li
955.227 -207.918 li
955.305 -208.348 li
955.457 -209.195 li
955.762 -210.852 li
956.375 -213.992 li
956.453 -214.371 li
956.527 -214.742 li
956.68 -215.477 li
956.988 -216.906 li
957.598 -219.598 li
957.676 -219.918 li
957.754 -220.234 li
957.906 -220.859 li
958.211 -222.063 li
958.824 -224.301 li
958.898 -224.566 li
958.977 -224.828 li
959.129 -225.336 li
959.434 -226.316 li
960.047 -228.105 li
960.121 -228.305 li
960.191 -228.496 li
960.336 -228.871 li
960.625 -229.586 li
960.695 -229.758 li
960.766 -229.926 li
960.91 -230.254 li
961.199 -230.867 li
961.27 -231.016 li
961.344 -231.156 li
961.488 -231.434 li
961.773 -231.953 li
961.848 -232.074 li
961.918 -232.191 li
962.063 -232.422 li
962.352 -232.84 li
962.422 -232.934 li
962.496 -233.027 li
962.637 -233.207 li
962.711 -233.293 li
962.781 -233.375 li
962.926 -233.527 li
963 -233.598 li
963.07 -233.668 li
963.215 -233.797 li
963.285 -233.859 li
963.359 -233.914 li
963.504 -234.02 li
963.574 -234.066 li
963.645 -234.109 li
963.719 -234.152 li
963.789 -234.191 li
963.863 -234.227 li
963.934 -234.258 li
964.008 -234.289 li
964.148 -234.336 li
964.223 -234.355 li
964.293 -234.375 li
964.367 -234.387 li
964.438 -234.398 li
964.512 -234.406 li
964.582 -234.41 li
964.652 -234.41 li
@
grestore
863.156 268.266 mo
866.777 265.52 li
867.199 265.203 li
867.762 264.789 li
868.883 263.961 li
870.781 262.578 li
@
2.5 lw
0 lc
36.031 380.617 mo
36.031 376.609 li
.749721 .679194 .670497 .901457 cmyk
@
65.594 380.617 mo
65.594 378.215 li
@
95.152 380.617 mo
95.152 378.215 li
@
124.711 380.617 mo
124.711 378.215 li
@
154.27 380.617 mo
154.27 378.215 li
@
183.828 380.617 mo
183.828 376.609 li
@
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2.043 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /FAAAAA+TimesNewRomanPSMT
Type42DictBegin
[<00010000000a000a000a000a637674201d6402d7000000ac000010846670
676d6d591b530000113000000a59676c796631752ce700002bf800000d6c
68656164ec6c40fe00001b8c0000003668686561134d082300001bc40000
0024686d74782872055e00001be80000002c6c6f63610000567400001c14
000000306d61787006d308b500001c440000002070726570b33292910000
1c6400000f9367646972000000000000000000000000058e0000054c001f
054c001c0394001b0000ffe10000ffe40000ffe8fe4afffc056b0023fe6a
ffe00313000000ad000000ad0000000000250096009f002400f0013100c2
00c0004a00a6004100500094004700cf00af000e007901cb000400230044
00a80025011f0002004600170105009900d9005c007200e500e00028004b
00de011200240045007000160039ffe90016004b0088ffb900d9000a0043
00ae00ba016c0153002f00430048022c012b0025008fffc000170028ffcd
ffd80025009d00e50124ffb10048009d00e600110027007f00910012006a
00cafffc00000024006200a7017c01e900210060008b0434048aff6b003b
00b500d5014bff6b004d007905d809b5006c009100a3011701c0ffdfffe7
00be04010065007f00820088009900b200c0022e034305a000200026003d
004e00610065007b00d9011301310340ff27ff42ff99004e00a700f2022b
02c603070011002b0049005f008d00a100af00d600e400f5010b0135019d
01ab01ab01d101ee05d80000004b0075007a0080009d00a600a700ac00b9
013101310217021700020017002900550080008f00a500b200b300d0014b
015901c001c103a50530fe3fff14ff15ffe7ffff002a00580099009f00c1
00e400f40130015901ab01ab03220374041e04740532fd81004d0064009c
00d000d100d600de00e500f500f8012a012a01e1027e027fff57ffa8ffe5
00000008001f00380051005a006f0076007700a200c000c200c400f101fb
0209027e02cf04c5057a05f0ff92001200260042004b004f005100530064
008b00ae00b200b800b800d600f50111012001310138014e01520167018f
019601b801d901d902060221027102ea03b003cb03dc04360505ff3a0012
0016001e001f002300570068006c007e0088009200a500a800c500c90115
0126012d013001d601d901f6023b0244024402a302cf02de0385038f04fc
0586fee0feebfefbff8a0007004400470058007500aa00e400ef01160120
0129016a017301e3027e029002b4030e0310032303350341035403590388
039403c803ce047204ab04da0549056105ab0761fe6efed1ff4bff840000
00010006001e0027002c0034003700620066006a006b006c007000700072
007c0081008a008e0091009200a000ab00b800bf00c900d500dd00ec00f4
0100012101300169016a016d017c0185018e018e019901ac01c101c501c9
01e101f601f601f60222022202280236023f024302460267028502850294
02d002d602e8031c0363037f03800380039e03b603d90400040404ff0532
05320548058b05a706cb07280748076208ccfcedfd2afd59fddefe00fe1a
fe5bfe96fec1fee7ff56ff7900010025002d002e007c00870091009900a1
00a500a500aa00af00b600c600cc00d700dd00ec00f20102010501170118
0123012a012c0131013f014701490149014d01510151015501550157015a
015a0161016201680168017f0180018201830184018d0195019501950198
019901a501a901b601b601b701ba01ba01d501df01e601ea01f202000200
0203021702250227022f0239024302430247024f025202520267026f026f
027002720276027e02a702b302b902d603130325032d03610371039903ae
03c203d403f90402042c042f043c04560467048304cf04d104d804fb051f
05450568059e05c2061b06340655066a069806af06e806fc070607500762
077c07d407ff082500ad00c700aa00b5000000000000000000000000002f
06cf01730514047802df009c0018037005870155002500060254036c038e
03d2056601f0032001da018a0369036bffa3034602f8036f015602bf0122
031f053a0366008c00ff01ab02e102f402e70415015402e90128049101b7
026f034302060000000005d30415048305e8000002d7003a027d01c002c5
03830383ffbd003a059e01df059e02d1002004e0021300df01c001870297
000000ce0269028b0058043405fb0069015a01a905780182013e0288012a
03d4049e00e5032302f301f00196007a00cd014a0424025e023901ab00cf
00fd011e00ed017100700195004001bb01dd01b8000101a803a7014c020c
018d01b0020d0137010000cd032101d4030a005900000000012602150150
02f0025503bc06d00335010100d000d2007a01030130007c000000000000
000000fe006e006600940227002b0045004d00d3013200180097004100f4
febcffe9001605d8058b009100a1032c00520030005d02cb003a009200e5
00e500580086003200ba0099008800300298007cff8001640028004d0065
000200b8016a002f010b001100170100007f00040016022200a6005f0000
00f8000a00ca0043004b01ee0077012000f401c00028045f0000008c0445
00c20060007b008b008b0064005d00c2009c009206b505d3004f01170000
0420fe9e00cc00dc005e004600e30032001a003c0091005a00a1042c0041
002000490071009c009cfe4800400040008600cb0102007d003a003e006a
0050044800290096ff6a0097006900e0004c001b00c90069ff970043ffbd
0052ff83ff8b005fffa1ff5c00670053ffa8002a0076ffb2003600870559
0256052b043400de00c901c4004800db018b00b3004800da011601250118
00ea00ea00ae0000003e05bb008a04d70053003fff8cffd5001500280022
00990062004a00e4006d00ee00e5004803c00033fe4e02b1ff4603700079
05df0051ffa7ff1f010a0068ff6c004f00bc00a5070500ab0080001e05a5
0025008b04660230006900290016012f0080005c059f03d703f104700000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000160016001700180018001a001b00210029002a002a002c002d002e
002f003200340036003700380039003a003b003c003d003e004200460046
004a004c004d004f004f00530053005500570059005c005c005d005d005e
005f0061006400650067006800690069006b006e006f0071007600760077
0077007d007e007f008000810082008600870087008a008d008e00960096
00970097009c00a000a200a300a600ac00b300b300b600b800b900be00bf
00c100c200c400c500c600c700ca00ca00cb00cc00cc00ce00d100d200d3
00d700da00db00dc00de00df00e000e000e300e640578574737271706f6e
6d6c6b6a6968676665625d55544f4e403f3e3d3c3b3a3938373635343332
31302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817161413
1211100f0e0d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
9051582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b017
2370b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b0
1923442d2c2045b00325456164b050515845441b2121592d2cb001436323
62b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c
2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361
592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb012
43588745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720
b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2cb0022546
608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b00325
45b019234445b01a23444565234520b00325606a20b009234223688a6a60
6120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b03f1b23
5961441cb114008a5279b31940201945208a54582321b03f1b235961442d
2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c
0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b52
5845441b2121592d2c0120b003252349b04060b0206320b000525823b002
253823b002256538008a63381b212121212159012d2c4bb06451584569b0
0943608a103a1b212110592d2c01b005251023208af500b0016023edec2d
2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c
20b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a
2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802b023701020b8
02b04520b0005058b00161593a2f182d2c21210c6423648bb84000622d2c
21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c051
580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb84000
626023212d2cb4000100000015b00826b00826b00826b008260f10161345
683ab001162d2cb4000100000015b00826b00826b00826b008260f101613
4568653ab001162d2c4b53234b515a5820458a60441b2121592d2c4b5458
20458a60441b2121592d2c4b53234b515a58381b2121592d2c4b5458381b
2121592d2c014b53234b515ab00225b00425b006254923451869525a58b0
0225b00225b00525462345696048592121212d2cb0134358031b02592d2c
b0134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c58
0cb00425b00425060c6423646164b807085158b00425b00425012046b010
60482046b0106048590a21211b2121592d2cb012435c580cb00425b00425
060c6423646164b807085158b00425b00425012046b8fff060482046b8ff
f06048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b
53234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b21
21592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b212159
2d2c462346608a8a462320468a608a61b8ff8062232010238ab903580358
8a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2c23
20b000508a8a64b10003255458b0401bb10103255458b037438b59b04f2b
5923b0622b2321235865592d2cb13a000c215460432d2cb1020042b12301
8851b1400188535a58b910000020885458b202010243604259b124018851
58b920000040885458b2020202436042b12401885458b202200243604200
4b014b5258b2020802436042591bb940000080885458b202040243604259
b94000008063b80100885458b202080243604259b94000010063b8020088
5458b202100243604259b12601885158b94000020063b80400885458b202
400243604259b94000040063b80800885458b202800243604259b1280188
5158b94000080063b81000885458ba000201000002436042595959595959
59b10002435458400a37403a403b403e023f021bb10102435458b237403a
ba0100003b0100b33e013f011bb18002435258b237403ab80180b13b401b
b901000002435258b237403aba0180003b01401bb901800002435258b237
403ab80200b13b401bb237403aba0100003b0100595959b9400000808855
b94000020063b8040088555a58b33e003f011bb33e003f01595959424242
42422d2cb0024354584b53234b515a58381b2121591b21212121592d2c01
2d2cb0022563b0206066b00225b82000626023622d2c234ab1024e2b2d2c
234ab1014e2b2d2c238a4a234564b0022564b002256164b0354352582120
6459b1024e2b23b000505865592d2c238a4a234564b0022564b002256164
b03543525821206459b1014e2b23b000505865592d2c20b003254ab1024e
2b8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b003258ab0672b
8a103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003254660b0
04252eb00425b00425b0042620b000505821b06a1bb06c592bb0032546b0
0325466061b08062208a2010233a232010233a2d2cb0032547b003254760
b0052547b0806361b00225b00625496323b005254ab080632058621b2159
b0042646608a468a4660b02063612d2cb00426b00425b00425b00426b06e
2b208a2010233a232010233a2d2c2320b001545821b00225b1024e2bb080
5020605920606020b001515821211b20b005515821206661b0402361b100
032550b00325b00325505a5820b00325618a535821b000591b21591bb007
54582066616523211b2121b000595959b1024e2b2d2cb00225b004254ab0
005358b0001b8a8a238ab00159b004254620666120b00526b0062649b005
26b00526b0702b236165b02060206661b02061652d2cb0022546208a20b0
00505821b1024e2b1b452321596165b00225103b2d2cb0042620b8020062
20b80200638a236120b05d602bb00525118a128a20398a58ba005d100000
04266356602b23212010204620b1024e2b23611b2321208a201049b1024e
2b593b2d2cba005d10000009256356602bb00525b00525b00526b06d2bb1
5d0725602bb00525b00525b00525b00525b06f2bba005d10000008266356
602b20b0005258b0502bb00525b00525b00725b00725b00525b0712bb002
1738b00052b00225b001525a58b00425b0062549b00325b00525496020b0
405258211bb000525820b0025458b00425b00425b00725b0072549b00217
381bb00425b00425b00425b0062549b0021738595959595921212121212d
2cb12501885058b94000020063b8040088545cb0134b525b1bb001592d00
00000001000000070000a677a8e55f0f3cf50819080000000000a2e31dc2
00000000d684d860fb74fd8c105e08510000000900010001000000000001
00000721fe4500571000fb74f9d2105e0001000000000000000000000000
0000000b0639011c040000f00400002c0400005304000020040000620400
00580200006e023900b00400004a02000091000000000000009800000198
00000398000005a8000006e8000008a400000a5000000b0800000bb00000
0d0400000d6c00010000000b02b5003c00d1000700020010004000860000
05e904eb00050002410a005403ef02ad001d001f03ee03ed003c001f03ed
b2061d1fb803ecb3032a1f3f411503e4006003e9009f03e500df03e50004
001003e4001003e5003f03e5007003e400ff03e40005ffc003e1b3454532
40b803e1b32b2e3240b803e1b2282932b9ffc003e1b21a1c32bd03e102ac
0027001fffc003dfb2161b32b9ffc003deb2424232b9ffc003deb2363832
b9ffc003deb32a2d32df410a03de00ef03de000203de03df0028001fffc0
03dfb3282e32f0410d03df0001037e000f0101001f00a003dd00b003dd00
02004003dab32426329fbf03cc000103ca03c90064001fffc003c9b20d11
32410a03c703b70012001f03b603b50064001fffc003b5b30e1132004173
038d000100c0038d00d0038d00e0038d00f0038d0004006f03a7007f03a7
008f03a700af03a70004000f03a7001f03a7002f03a7004f03a7000403ab
03ab00ef03a50001000f03a5002f03a5006f03a5008f03a50004005403aa
0001006b03aa000103a8036a0022001f038c03940015001f038b03930015
001f03a40393001a001f03a20394001e001f03a10393001e001f039f0394
001e001f039b0394001a001f039a0393001e001f039903940016001f0398
03940016001f03970393001b001f03960394001b001f03950393001b001f
03760375001a001f03740375001a001f03a00373b21e1f10411e03930020
039300300393000300200394003003940040039400030000039400010383
036c001e001f03b1036c0032001f036d036c0032001fffc0037db2212332
b9ffc0037db3171932a0410a037d00b0037d00c0037d00d0037d0004ffc0
037cb2212332b9ffc0037cb3171932a0412d037c00b0037c00c0037c00d0
037c000400300373004003730002000003730010037300200373000300e0
037300f00373000200b0037300c0037300d0037300030084037300900373
00a0037300030377036a0029001f0389036ab2281f40b80367b33940323f
bb0366000100400366b3191d328fbb0366000100400366b3090a3240b803
66b3090e3240b80366b3090f323fbb0365000100400365b3090c3240b803
65b31a1d3240b80365b3090e326b410e0363007b03630002001403630024
0363003403630044036300040363b2242f1fba034e006d0800400e1f7f02
7f037f047f050430440112bf033200500800001f0012032d003c0800b61f
5f3c013785a0418503620001000003620010036200700362009003620004
00f0035f00010020035e0020035f0030035f0040035e00040000035e0000
035f0010035f00d0035e00e0035f00050010030f0020030f0030030f00d0
030f00e0030f00050000030f0010030f0050030f0060030f0070030f00d0
030f00060000030f0010030f0020030f0030030f00e0030f00f0030f0006
030f00270000030e0030030e000200e0030e00f0030e0002030e004a00e0
030d00f0030d0002030d002700d002fc0001001002fc002002fc005002fc
000300d002fc00e002fc0002000002fc001002fc002002fc003002fc0050
02fc006002fc000600e002fc00f002fc0002002002fc003002fc004002fc
000302fc402c27c02901b02901a02901902901403c3f413240223f413212
1212858f4caf4cbf4ccf4c045f4c6f4c7f4c0337b8ffc0b3b22b3032b8ff
c0b3b2222532b8ffc0b5b2191a32370f413b02af0001005f02af009f02af
00df02af0003001f02af002f02af003f02af006f02af000402af02af001f
02ad002f02ad003f02ad004f02ad005f02ad000500df02ad0001000f02ad
001f02ad003f02ad005f02ad009f02ad0005005f02ad00df02ad0002000f
02ad001f02ad003f02ad0003004002acb23a334f414d02ac005f02ac009f
02ac0003002f02ac003f02ac0002000f02ac003f02ac00af02ac000300b0
02ac00e002ac0002004f02ac005f02ac00a002ac0003001f02ac002f02ac
003f02ac0003000f02ac0001000f035a0001000f035a001f035a003f035a
005f035a0070035a000500cf035700df03570002000f0357001f03570070
035700af03570004035a035a0357035702ad02ad02ac02ac032c400d3115
1f001616000000121108104110020c004a000d01a8004a000d0198004a00
0d0189004a000d013f004a000d0124400e4a0df64a0dbe4a0d864a0d274a
0dbe02280041000d01940041000d0121400b410db4410d4f410d29410d41
1002170021000d02150021000d02060021000d01eb0021000d014e002100
0d012c4014210df9210df3210df1210d9d210d71210d3d210d4110021c00
1f000d0214001f000d020b001f000d0196001f000d014a001f000d012640
0b1f0dc61f0d571f0d371f0d410d019e0141000d00420141000d001e0141
000d001b0141000d01f2b40f440f0009bb01f20044000d0201b23c291fb8
0200b23c291fb801ffb23c411fb801feb23c471fb801fdb23c9e1fb801fa
b23c931fbc01f9010f0101001f01f6b224e41f411501f401490401001f01
f301490401001f01f1014900ab001f01f001490067001f01a6003c012500
1f01a4b23c811f411501a3010f019a001f01a200220801001f01a1005004
01001f019f0149019a001f019d01490067001f019cb22c621fb8019bb22c
791fbc019a002c0101001f0197b22ce41fb80193b22c891fb80192b22c6c
1fb8018fb2259e1fb8016ab23c2a1f4111016700240201001f0163002502
ab001f014c010f019a001f01480149006c001f0147b22c891fb80145b22c
9e1fb80144b22c791fb80143b223311fb80127b23c811fbc012300500101
001f011fb223e41f4115011d0023019a001f011c00230801001f011b0025
0801001f010e010f0401001f010d00220401001f0108b223811fb80106b4
25e41ff73cbb0125001f00f5010fb29e1fe3bc01490156001f00e20149b2
ab1fd1b901490401b21fcf2cb80125b61fce23bb1fc524b80156b21fc02c
b80801b21fbf2cb80201b51fb124e41fb0b901490201b61faf2c671fad23
b80801b21fa523b80201400b1f9f3c2d1f9b235a1f9925b80201b21f812c
bc0401001f006d010f0156400b1f592c3e1f4c3cab1f4625b80101b21f40
3cb80125400a1f3a23721f393cab1f38b80149b3ab1f3124b80401b21f30
25b802abb61f2a24e41f2623b80156b41f35555537ba023500070175402c
0774076207560751073b0733072d0720071d071c071408120810080e080c
080a080808060804080208000814b8ffe0402b0000010014061000000100
060400000100041000000100100200000100020000000100000201080200
4a00b013034b024b534201b0124b004b5442b0372b4bb807ff52b0382b4b
b008505b58b101018e59b0382bb00288b801005458b801ffb101018e851b
b0124358b90001012f858d1bb90001017c858d5959014bb0c063004b6220
b0f65323b8010a515ab0052342180016763f183f123e113946443e113946
443e113946443e113946443e11394660443e11394660442b2b2b2b2b2b2b
2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b181d42b0964b5358b235aaaa
1d4259b0324b5358b235ffff1d42594bb04753205c58b90271026f4544b9
0270026f45445958b9017a0271455258b90271017a4459594bb04753205c
58b9002202704544b9003c027045445958b901b30022455258b9002201b3
4459594bb04c53205c58b9014900224544b1222245445958b901c2014945
5258b9014901c24459594bb06753205c58b9002402714544b90050027145
445958b9021e0024455258b90024021e4459594bb8020153205c58b9010f
00224544b1222245445958b90c00010f455258b9010f0c004459594bb01c
53205c58b125254544b12c2545445958b13725455258b125374459594bb0
ab53205c58b125254544b1232545445958b901590025455258b900250159
4459594bb8010153205c58b125254544b1282545445958b9020800254552
58b9002502084459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b01b361dc6463456523456023456560234560b0
8b766818b080622020b164dc4565234520b003266062636820b003266165
b0dc236544b064234420b161634565234520b003266062636820b0032661
65b063236544b0612344b10063455458b163406544b26140614523614459
b3a67f434b456523456023456560234560b089766818b080622020b1437f
4565234520b003266062636820b003266165b07f236544b043234420b1a6
4b4565234520b003266062636820b003266165b04b236544b0a62344b100
4b455458b14b406544b2a640a645236144594b5242014b5058b108004259
435c58b108004259b3020b0a124358601b2159421610703eb0124358b93b
21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d41
1bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01
a80400000b2b59b0102342b0112342002b00184569444569444569444569
4473737374737373737475752b7373747475184569447373742b4bb02153
4bb046515a58b03cb03c45b040604459012b2b2b2b75752b5840365f235f
255f285fa5046f236f256f286fa5044f234f254f284fa5043f233f253f28
3fa5042f232f252f282fa5041f231f251f281fa504757575757575594358
4010bf3ccf3c026f3c7f3c8f3c9f3caf3c0575755943584012bf22cf2202
5f226f227f228f229f22af2206757559435c58b6403c9f22ef220375592b
2b0174747474454473737474757545447345447374454473747573737373
732b5840246009700980090310092009300940095009056f037f038f0303
1f032f033f034f035f0305b8ffc0b2073a33b8ffc04046063a33900ba00b
b00bc00bd00b05b006c006d006e006f00605200630064006500660067006
80069006a006099006900702600b700b800b03100b200b300b400b500b05
1f070100757575737575752b2b757575751b40100706441f0b0a441f0302
441f0908441f2b2b2b2b592b752b435841220063032d00010003032d0013
032d0023032d0033032d0053032d000500c3032d00d3032d00e3032d00f3
032d00040083032d0093032d00a3032d00b3032d0004032d032d45186944
74747575592b4358b900180332b330353238b80332b361663238b80332b3
535a3238b80332b3454e3238b80332b33c413218b80332b23f330a410f03
32000100ba033200ca033200da033200ea033200fa033200050332033245
18694474752b2b2b2b2b2b597300732b012b7575002b2b2b74002b2b2b73
2b74012b002b2b017373737474732b2b00732b2b002b2b2b017374732b01
2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b00017375007373004569440073
730173742b2b2b2b2b732b00732b752b2b732b2b2b2b2b2b2b2b2b73742b
002b2b2b2b0000>
[3437 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 152 1 <000100f0000003060568001600b2b0852b58401440186018a018e0180400
1840180276008600020e411301690141000901a000220003016901410008
01a00023000001f8000f016900160141000001f2400e010f0f0209020105
09080c020300ba01f70003014940120e0e0f401135300f7f0f900fa00f04
0f1917ba022401e400182b4e10f45d2b3c4d10ede4103c003f3c3f3c1112
3901113900f5edfc01f52b2b3130005d01715d1bb4010507090ab803e2b2
6c090c00183f2b323f30315913253311141616171521353e023511342726
26232207f0014a21133c5cfe026038160a07251a254204c7a1fb8772381e
022525021d317a02dc942a201e1f0000>FAAAAA+TimesNewRomanPSMT AddT42Char 
1 0 0 <0002011c0000051c050000030007006cb0852b58b10201bb02be00060007
02bfb2000504b802beb403000a0704b802beb5010019080605bf02be0002
000301290009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c
10fc3cfd3c31301bb10004b807d7b36c000107b807d7b16c0100182f2b2f
2b3031592111211125211121011c0400fc2003c0fc400500fb002004c000
0000>FAAAAA+TimesNewRomanPSMT AddT42Char 
FAAAAA+TimesNewRomanPSMT /CharStrings get begin
/one 1 def
end
FAAAAA+TimesNewRomanPSMT /Encoding get
dup 49 /one put
pop
end
%ADOEndSubsetFont
/ATTRPP+TimesNewRomanPSMT /FAAAAA+TimesNewRomanPSMT findfont ct_VMDictPut
/ATTRPP+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
ATTRPP+TimesNewRomanPSMT nf
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
176.828 409.618 mo
(1)sh
213.387 380.617 mo
213.387 378.215 li
@
242.945 380.617 mo
242.945 378.215 li
@
272.504 380.617 mo
272.504 378.215 li
@
302.063 380.617 mo
302.063 378.215 li
@
331.621 380.617 mo
331.621 376.609 li
@
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPP+TimesNewRomanPSMT gcheck setglobal} if
1 408 2 <0001002c000003ab0568001e0195b0852b58408207180b3917181c3d3418
401c3d3419401c3d340f1e161629073c074907a9070640205b045a085b17
5a186b08741174129c0b9d0e9911ac0bac0ec905c917c818d917d918e020
f904f9171515011d0419051b15191619171d180709170b180b1d34194719
89178f200718190202171a190c19060d031902050618171615140713040d
b8016840090940140c3f80090109b80333400c10051a8f19019f19af1902
19ba03330003018db301020c1eb8018d400d0006e24f135f136f137f1304
13b801074013400001001a002040208020036020a020022019bb01f90003
000d014040145f026f027f028f02bf02cf02df02ef020802191fba018e01
0100182b4e10f45d4de43ced4e105d71f65d4df45ded10ed003f3cedfd5d
713c3ffd71b10602435458b78f0901bf09cf0902005d71592be411121739
11123901111239390210b10602435458b47d198d1902005d590e3c871005
7dc40ec431300171725d005d012b2b2b002b1bb70d0d101e1e021009b808
1ab46c10050219b8081ab26c020c00183f2b3f2b12392f11392f30315901
032135000035342623220607233636333216151407060702072132363637
03ab5ffce0016101209e6e649f262519cf9ba5dd304aa6f93e01626c5746
1a0105fefb2501420198a981a67571b9c6d4906767a2b5fef03810312d00
0000>ATTRPP+TimesNewRomanPSMT AddT42Char 
ATTRPP+TimesNewRomanPSMT /CharStrings get begin
/two 2 def
end
ATTRPP+TimesNewRomanPSMT /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPP+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one /two 205{/.notdef}rp]
ATTRPP+TimesNewRomanPSMT nf
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
324.622 409.618 mo
(2)sh
361.18 380.617 mo
361.18 378.215 li
@
390.738 380.617 mo
390.738 378.215 li
@
420.301 380.617 mo
420.301 378.215 li
@
449.859 380.617 mo
449.859 378.215 li
@
479.418 380.617 mo
479.418 376.609 li
@
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPP+TimesNewRomanPSMT gcheck setglobal} if
1 920 3 <00010053ffe8035605680032017fb0852b58b9000affe0b20c3909b8ffc0
403c0c394109450a460b4b2204cf09012929382940346034cf34e034f70a
0700340141097f237a2eaa24b924ba2ec92edf23df25db2eea22e9250c49
0829b8018cb328281000b802e4b3d0300130b80334b5030510160116b801
9fb51d402b2f341db80143b3100d2928bb01680014000902e3400b502080
20029020a0200220b80333b3b00c010cb80190400b502d802d02902da02d
022db80333b55f077f070207b802e5400a403401a034c034023400b8013e
b74013bf1302131933ba011e01e800182b4e10f45d4de4105d71f65ded5d
71f45ded5d71e410f43c003fed2bed723fed5ded12392fed313043794036
2e2f1e260a0f04062221232124212521040605250e26260a2062012f042d
62011e0f206201210b2762010a092e063062011f0d1d62002b2b103c2b01
2b2b2b2b2b2a81818181005d01715d7200712b2b1bb309032829b803e2b5
6c2828100330b80813b46c0305101db807f5b26c100d00183f2b3f2b1239
2f2b12393031591336363332171615140716161514070621222635343633
321716161716333236353427262726262323353e02353426232207683ab1
84a35742ba7d807092feeb89632f21191a117817252a6697231a1f2b964e
204f9f4881609b68044a89956a4f5a949e31b67bb081a844271d2c08053f
060b9e6c4f4b381d28411e0a5e844f677fa6>ATTRPP+TimesNewRomanPSMT AddT42Char 
ATTRPP+TimesNewRomanPSMT /CharStrings get begin
/three 3 def
end
ATTRPP+TimesNewRomanPSMT /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPP+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one /two /three 204{/.notdef}rp]
ATTRPP+TimesNewRomanPSMT nf
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
472.417 409.618 mo
(3)sh
508.977 380.617 mo
508.977 378.215 li
@
538.535 380.617 mo
538.535 378.215 li
@
568.094 380.617 mo
568.094 378.215 li
@
597.652 380.617 mo
597.652 378.215 li
@
627.211 380.617 mo
627.211 376.609 li
@
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPP+TimesNewRomanPSMT gcheck setglobal} if
1 1448 4 <00020020000003b90568000a000d0103b0852b584028160d010f00450d40
0f03400f012a0c011507010206010309050601040c0b0d00040c0d04060c
0d0db8011c401207081407070808030407060c08001f0d010dbb019c0006
000b019f400d050106090806060805040c0c04bb0149000300080166400b
09090f03019f03af030203b801f74018013f0001001a000f01600fa00fe0
0f030f0640070107190eba018e010100182b4e10f4713c105d71f65d3c4d
f45d713c10e610fd3c003f3f392f103c103c10ed10fd723c113911390111
1239872e2b047d10c4011112390f0f0f313000725d015d71721bb50c0408
020d06b80817400a6c070a0d0d040805040c00183f3f12392f33332b3211
1239303159011523112311213501331123110103b9b6a5fdc202756ea5fe
2401f48efe9a0166800382fc8c02a1fd5f000000>ATTRPP+TimesNewRomanPSMT AddT42Char 
ATTRPP+TimesNewRomanPSMT /CharStrings get begin
/four 4 def
end
ATTRPP+TimesNewRomanPSMT /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPP+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one /two /three /four 203{/.notdef}rp]
ATTRPP+TimesNewRomanPSMT nf
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
620.211 409.618 mo
(4)sh
656.77 380.617 mo
656.77 378.215 li
@
686.328 380.617 mo
686.328 378.215 li
@
715.887 380.617 mo
715.887 378.215 li
@
745.445 380.617 mo
745.445 378.215 li
@
775.008 380.617 mo
775.008 376.609 li
@
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPP+TimesNewRomanPSMT gcheck setglobal} if
1 1768 5 <00010062ffe80379054c0021014db0852b584043a4040112591e691e7f05
7f067f1d8c048d1d07350235215503552057216b1c7605791c87028a1a8a
1ca303a809a023e0230f0023010f1011121315161708140d020303b8011c
401120211420030420211a1b1c030718040503b8019fb320202113ba01f9
00180313400c0d0d01e20002e22121000400ba013e001b0147b58007a007
0207b801f5400a40230140236023022316b801f9b61002a021012103b801
9f4009204010a01002101922ba019501e900182b4e10e45d4d10ed105d3c
10ed105d71f65dede4003f3c10ed10ed3feded12392fed01113911121739
87082e2b057d10c40011121739b10602435458400d720172027220820182
02822006005d59313001715d005d435c58400b6b046f12641e7005701d05
5d59015d1bb10320b80821b56c0303210d18b80800b46c0d0d2102b80821
b26c210400183f2b3f2b12392f2b30315901072107041716151406060706
23222635343633321617163332363534262726270103794efe685901099b
8557845173797a6f2e231a272f4b4d75b19e8b6dbc0104054caab6279e88
b86bb680273753321c2b102134b17f7bd53a2d07020f0000>ATTRPP+TimesNewRomanPSMT AddT42Char 
ATTRPP+TimesNewRomanPSMT /CharStrings get begin
/five 5 def
end
ATTRPP+TimesNewRomanPSMT /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPP+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one /two /three /four /five 202{/.notdef}rp]
ATTRPP+TimesNewRomanPSMT nf
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
768.006 409.618 mo
(5)sh
804.566 380.617 mo
804.566 378.215 li
@
834.125 380.617 mo
834.125 378.215 li
@
863.684 380.617 mo
863.684 378.215 li
@
893.242 380.617 mo
893.242 378.215 li
@
922.801 380.617 mo
922.801 376.609 li
@
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPP+TimesNewRomanPSMT gcheck setglobal} if
1 2212 6 <00020058ffe803b1056800180028012bb0852b58402a7509760a770e8209
d925e925060603017d037a047a168517043c082806050323192819060320
5f080108b80143b620260126260f01b8018db318000520b80106b30f0d01
00ba01400023010f40120b1a002a402a02402a602aa02ae02a042a19ba01
3e001b010f4012001310132013301340139013a01307131929ba011e0101
00182b4e10fc5d4dfde44e105d71f64dedf43c003fed3f3ced12392f5ded
721217390111121739b10602435458b40b061b0602005d5931304379402c
1c2509121d1c1e1c020611250d2625092362011f101b6200210e23620124
0a2662011c12206200220c206200002b2b2b012b2b2b2b2b2a8181005d01
715d1bb10826b807f5b56c08080f1801b807d8b46c18050f20b807e3b26c
0f0d00183f2b3f2b12392f2b30315901150e030736333216151407062322
272611341224363301061514161716333236353426232206039684a7a36b
2490918bcc677ccc8b61be92010ff86bfdcc12474633495789887d265705
68250d4fa2c78963e0b0aa8caa5cb3011db60148fe58fd44875360e1422f
a498abfa20000000>ATTRPP+TimesNewRomanPSMT AddT42Char 
ATTRPP+TimesNewRomanPSMT /CharStrings get begin
/six 6 def
end
ATTRPP+TimesNewRomanPSMT /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPP+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one /two /three /four /five /six 201{/.notdef}rp]
ATTRPP+TimesNewRomanPSMT nf
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
915.801 409.618 mo
(6)sh
952.359 380.617 mo
952.359 378.215 li
@
981.918 380.617 mo
981.918 378.215 li
@
16.688 380.617 mo
984 380.617 li
@
%ADOBeginSubsetFont: GAAAAA+CairoFont-1-0 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GAAAAA+CairoFont-1-0 def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 116 /t put
def
/FontBBox {19 -11 638 694} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/t <1C60D8A8C9B85744188530F4B2CEC66D0776A55B777D565929675AC626AB
129E9079B5A4C0F6709207BB1475CB1CE11DE54F83A53DE848780C184A5B480E
8ACCF054347C33451A6448A3421DAFA76483B03A185CDC616B2AF4539F470D99
0AB736C0C4E9D090A4A43566B806B71362C4B02B16439544052BEA189D36157F
13569C> |-
/.notdef <1C60D8A8C9B6FC2D98924FA11F5B88270F6BB183AF46792D02CE24
A9D04AF4E7A738FF53BF0B0B18> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ATTRPQ+CairoFont-1-0 /GAAAAA+CairoFont-1-0 findfont ct_VMDictPut
/ATTRPQ+CairoFont-1-0*1 
[116{/.notdef}rp /t 139{/.notdef}rp]
ATTRPQ+CairoFont-1-0 nf
ATTRPQ+CairoFont-1-0*1 [28 0 0 -28 0 0 ]msf
992 390.118 mo
(t)sh
36.031 636.832 mo
40.043 636.832 li
@
%ADOBeginSubsetFont: HAAAAA+Mathematica Initial
ct_T42Dict begin
-0.172 -1.691 2.496 2.434
 256 array 0 1 255 {1 index exch /.notdef put} for  /HAAAAA+Mathematica
Type42DictBegin
[<00010000000a000a000a000a637674203d60e95b000000ac0000003c6670
676d76647d76000000e800000d16676c7966e8fed19600000f340000014c
6865616415aaba3b00000e000000003668686561183c0b9600000e380000
0024686d747815fb023100000e5c000000186c6f6361014a00fc00000e74
0000000e6d617870013b0e4d00000e840000002070726570195002100000
0ea40000008d676469720000000000000000000000000000000000000000
00000000000000000000000000a500a500350035054c0000056f0398ffee
fe581388f254056affe5057103acffeefe581388f254b0002c20b0005558
455920204bb8000e514bb006535a58b0341bb028596066208a5558b00225
61b908000800636323621b2121b00059b000432344b20001004360422db0
012cb02060662db0022c206420b0c050b004265ab228010a43456345b006
455821b0032559525b582123211b8a5820b050505821b040591b20b03850
5821b038595920b1010a434563456164b028505821b1010a4345634520b0
30505821b030591b20b0c050582066208a8a6120b00a5058601b20b02050
5821b00a601b20b036505821b036601b605959591bb0012b595923b00050
586559592db0032c204520b00425616420b005435058b0052342b0062342
1b212159b001602db0042c232123212064b105624220b0062342b0064558
1bb1010a434563b1010a43b001604563b0032a2120b00643208a208ab001
2bb1300525b00426515860501b615259582359215920b0405358b0012b1b
21b0405923b000505865592db0052cb007432bb20002004360422db0062c
b00723422320b000234261b0026266b00163b00160b0052a2db0072c2020
4520b00b4363b804006220b0005058b040605966b001636044b001602db0
082cb2070b004345422a21b20001004360422db0092cb000432344b20001
004360422db00a2c20204520b0012b23b00043b004256020458a23612064
20b020505821b0001bb0305058b0201bb040595923b00050586559b00325
23614444b001602db00b2c20204520b0012b23b00043b004256020458a23
612064b0245058b0001bb0405923b00050586559b0032523614444b00160
2db00c2c20b0002342b20b0a034558211b2321592a212db00d2cb1020245
b06461442db00e2cb001602020b00c434ab000505820b00c234259b00d43
4ab000525820b00d2342592db00f2c20b0106266b0016320b80400638a23
61b00e4360208a6020b00e2342232db0102c4b5458b10464445924b00d65
23782db0112c4b51584b5358b1046444591b215924b0136523782db0122c
b1000f435558b10f0f43b0016142b00f2b59b00043b0022542b10c022542
b10d022542b001162320b003255058b101004360b00425428a8a208a2361
b00e2a2123b00161208a2361b00e2a211bb101004360b0022542b0022561
b00e2a2159b00c4347b00d434760b0026220b0005058b040605966b00163
20b00b4363b804006220b0005058b040605966b0016360b10000132344b0
0143b0003eb20101014360422db0132c00b10002455458b00f23422045b0
0b2342b00a23b00160422060b00161b5111101000e0042428a60b112062b
b0892b1b22592db0142cb100132b2db0152cb101132b2db0162cb102132b
2db0172cb103132b2db0182cb104132b2db0192cb105132b2db01a2cb106
132b2db01b2cb107132b2db01c2cb108132b2db01d2cb109132b2db0292c
2320b0106266b00163b006604b545823202eb0015d1b2121592db02a2c23
20b0106266b00163b016604b545823202eb001711b2121592db02b2c2320
b0106266b00163b026604b545823202eb001721b2121592db01e2c00b00d
2bb10002455458b00f23422045b00b2342b00a23b00160422060b00161b5
111101000e0042428a60b112062bb0892b1b22592db01f2cb1001e2b2db0
202cb1011e2b2db0212cb1021e2b2db0222cb1031e2b2db0232cb1041e2b
2db0242cb1051e2b2db0252cb1061e2b2db0262cb1071e2b2db0272cb108
1e2b2db0282cb1091e2b2db02c2c203cb001602db02d2c2060b011602043
23b0016043b0022561b00160b02c2a212db02e2cb02d2bb02d2a2db02f2c
2020472020b00b4363b804006220b0005058b040605966b0016360236138
23208a555820472020b00b4363b804006220b0005058b040605966b00163
602361381b21592db0302c00b10002455458b00116b02f2ab10501154558
30591b22592db0312c00b00d2bb10002455458b00116b02f2ab105011545
5830591b22592db0322c2035b001602db0332c00b0014563b804006220b0
005058b040605966b00163b0012bb00b4363b804006220b0005058b04060
5966b00163b0012bb00016b40000000000443e2338b13201152a212db034
2c203c204720b00b4363b804006220b0005058b040605966b0016360b000
4361382db0352c2e173c2db0362c203c204720b00b4363b804006220b000
5058b040605966b0016360b0004361b0014363382db0372cb10200162520
2e2047b0002342b00225498a8a47234723612058621b2159b0012342b236
010115142a2db0382cb00016b0102342b00425b004254723472361b00943
2b658a2e2320203c8a382db0392cb00016b0102342b00425b00425202e47
2347236120b0042342b009432b20b060505820b0405158b3022003201bb3
0226031a5942422320b00843208a234723472361234660b00443b0026220
b0005058b040605966b001636020b0012b208a8a6120b00243606423b003
4361645058b00243611bb003436059b00325b0026220b0005058b0406059
66b0016361232020b00426234661381b23b0084346b00225b00843472347
23616020b00443b0026220b0005058b040605966b00163602320b0012b23
b0044360b0012bb0052561b00525b0026220b0005058b040605966b00163
b004266120b00425606423b0032560645058211b232159232020b0042623
466138592db03a2cb00016b0102342202020b00526202e4723472361233c
382db03b2cb00016b010234220b0082342202020462347b0012b2361382d
b03c2cb00016b0102342b00325b002254723472361b00054582e203c2321
1bb00225b00225472347236120b00525b004254723472361b00625b00525
49b0022561b9080008006363232058621b215963b804006220b0005058b0
40605966b0016360232e2320203c8a382321592db03d2cb00016b0102342
20b00843202e47234723612060b0206066b0026220b0005058b040605966
b001632320203c8a382db03e2c23202e46b0022546b0104358501b525958
203c592eb12e01142b2db03f2c23202e46b0022546b0104358521b505958
203c592eb12e01142b2db0402c23202e46b0022546b0104358501b525958
203c5923202e46b0022546b0104358521b505958203c592eb12e01142b2d
b0412cb0382b23202e46b0022546b0104358501b525958203c592eb12e01
142b2db0422cb0392b8a20203cb00423428a3823202e46b0022546b01043
58501b525958203c592eb12e01142bb004432eb02e2b2db0432cb00016b0
0425b00426202e4723472361b009432b23203c202e2338b12e01142b2db0
442cb108042542b00016b00425b00425202e472347236120b0042342b009
432b20b060505820b0405158b3022003201bb30226031a594242232047b0
0443b0026220b0005058b040605966b001636020b0012b208a8a6120b002
43606423b0034361645058b00243611bb003436059b00325b0026220b000
5058b040605966b0016361b0022546613823203c23381b212020462347b0
012b2361382159b12e01142b2db0452cb100382b2eb12e01142b2db0462c
b100392b212320203cb00423422338b12e01142bb004432eb02e2b2db047
2cb000152047b0002342b20001011514132eb0342a2db0482cb000152047
b0002342b20001011514132eb0342a2db0492cb100011413b0352a2db04a
2cb0372a2db04b2cb000164523202e20468a236138b12e01142b2db04c2c
b0082342b04b2b2db04d2cb20000442b2db04e2cb20001442b2db04f2cb2
0100442b2db0502cb20101442b2db0512cb20000452b2db0522cb2000145
2b2db0532cb20100452b2db0542cb20101452b2db0552cb3000000412b2d
b0562cb3000100412b2db0572cb3010000412b2db0582cb3010100412b2d
b0592cb3000001412b2db05a2cb3000101412b2db05b2cb3010001412b2d
b05c2cb3010101412b2db05d2cb20000432b2db05e2cb20001432b2db05f
2cb20100432b2db0602cb20101432b2db0612cb20000462b2db0622cb200
01462b2db0632cb20100462b2db0642cb20101462b2db0652cb300000042
2b2db0662cb3000100422b2db0672cb3010000422b2db0682cb301010042
2b2db0692cb3000001422b2db06a2cb3000101422b2db06b2cb301000142
2b2db06c2cb3010101422b2db06d2cb1003a2b2eb12e01142b2db06e2cb1
003a2bb03e2b2db06f2cb1003a2bb03f2b2db0702cb00016b1003a2bb040
2b2db0712cb1013a2bb03e2b2db0722cb1013a2bb03f2b2db0732cb00016
b1013a2bb0402b2db0742cb1003b2b2eb12e01142b2db0752cb1003b2bb0
3e2b2db0762cb1003b2bb03f2b2db0772cb1003b2bb0402b2db0782cb101
3b2bb03e2b2db0792cb1013b2bb03f2b2db07a2cb1013b2bb0402b2db07b
2cb1003c2b2eb12e01142b2db07c2cb1003c2bb03e2b2db07d2cb1003c2b
b03f2b2db07e2cb1003c2bb0402b2db07f2cb1013c2bb03e2b2db0802cb1
013c2bb03f2b2db0812cb1013c2bb0402b2db0822cb1003d2b2eb12e0114
2b2db0832cb1003d2bb03e2b2db0842cb1003d2bb03f2b2db0852cb1003d
2bb0402b2db0862cb1013d2bb03e2b2db0872cb1013d2bb03f2b2db0882c
b1013d2bb0402b2db0892cb3090402034558211b232159422bb00865b003
245078b1050115455830592d000000010000000b4ccceaa194005f0f3cf5
0019080000000000cd4fbbcc00000000d68566bdfea0f27113fe137d0000
00030002000000000000000100000577fe4400241308fea0fa4313fe0001
000000000000000000000000000000060400008005270087029100660291
003d052900870289000000000018002a0052007a009200a6000000010000
00060106001a000000000002001e002f008b000000710d1600000000004b
b800c85258b101018e59b001b9080008006370b1000742b21901002ab100
0742b30c0801082ab1000742b3160601082ab1000842ba0340000100092a
b1000942ba0040000100092ab1030044b12401885158b0408858b1036444
b12601885158ba08800001044088635458b103004459595959b30e08010c
2ab801ff85b0048db1020044b305640600444400000000>
[333 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 48 1 <0001008701d504a0024800030006b3020001302b0121352104a0fbe70419
01d573000000>HAAAAA+Mathematica AddT42Char 
1 0 0 <00020080000003800666000300070008b50604010002302b331121112521
1121800300fd800200fe000666f99a800566>HAAAAA+Mathematica AddT42Char 
HAAAAA+Mathematica /CharStrings get begin
/hyphen 1 def
end
HAAAAA+Mathematica /Encoding get
dup 45 /hyphen put
pop
end
%ADOEndSubsetFont
/ATTRPR+Mathematica /HAAAAA+Mathematica findfont ct_VMDictPut
/ATTRPR+Mathematica*1 
[45{/.notdef}rp /hyphen 210{/.notdef}rp]
ATTRPR+Mathematica nf
ATTRPR+Mathematica*1 [28 0 0 -28 0 0 ]msf
0 646.332 mo
(-)sh
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
19.0399 646.332 mo
(3)sh
36.031 619.75 mo
38.438 619.75 li
@
36.031 602.672 mo
38.438 602.672 li
@
36.031 585.59 mo
38.438 585.59 li
@
36.031 568.508 mo
38.438 568.508 li
@
36.031 551.426 mo
40.043 551.426 li
@
ATTRPR+Mathematica*1 [28 0 0 -28 0 0 ]msf
0 560.928 mo
(-)sh
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
19.0399 560.928 mo
(2)sh
36.031 534.348 mo
38.438 534.348 li
@
36.031 517.266 mo
38.438 517.266 li
@
36.031 500.184 mo
38.438 500.184 li
@
36.031 483.105 mo
38.438 483.105 li
@
36.031 466.023 mo
40.043 466.023 li
@
ATTRPR+Mathematica*1 [28 0 0 -28 0 0 ]msf
0 475.523 mo
(-)sh
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
19.0399 475.523 mo
(1)sh
36.031 448.941 mo
38.438 448.941 li
@
36.031 431.859 mo
38.438 431.859 li
@
36.031 414.781 mo
38.438 414.781 li
@
36.031 397.699 mo
38.438 397.699 li
@
36.031 380.617 mo
40.043 380.617 li
@
36.031 363.539 mo
38.438 363.539 li
@
36.031 346.457 mo
38.438 346.457 li
@
36.031 329.375 mo
38.438 329.375 li
@
36.031 312.293 mo
38.438 312.293 li
@
36.031 295.215 mo
40.043 295.215 li
@
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
19.0332 304.714 mo
(1)sh
36.031 278.133 mo
38.438 278.133 li
@
36.031 261.051 mo
38.438 261.051 li
@
36.031 243.973 mo
38.438 243.973 li
@
36.031 226.891 mo
38.438 226.891 li
@
36.031 209.809 mo
40.043 209.809 li
@
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
19.0332 219.309 mo
(2)sh
36.031 192.727 mo
38.438 192.727 li
@
36.031 175.648 mo
38.438 175.648 li
@
36.031 158.566 mo
38.438 158.566 li
@
36.031 141.484 mo
38.438 141.484 li
@
36.031 124.406 mo
40.043 124.406 li
@
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
19.0332 133.905 mo
(3)sh
36.031 107.324 mo
38.438 107.324 li
@
36.031 90.242 mo
38.438 90.242 li
@
36.031 73.16 mo
38.438 73.16 li
@
36.031 56.082 mo
38.438 56.082 li
@
36.031 39 mo
40.043 39 li
@
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
19.0332 48.5 mo
(4)sh
36.031 636.832 mo
36.031 39 li
@
%ADOBeginSubsetFont: IAAAAA+Mathematica-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (IAAAAA+Mathematica)
%%Title: (IAAAAA+Mathematica Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /IAAAAA+Mathematica def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-172 -1695 2499 2436} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 4 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 4 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B7A73DB6F0B6FAFA7BF3C28FD0A21D0FB47F32422EDAB3B2C
7C2F968214656> |
1 <001C60D8A8C9B7B5777C1DCD0783BD00ACEAA2213219B4061E1683FE4A2AA
C9642E220892B4C95FCB8CFA84D2B53DD1B4DFF1E17684C0895190A1DE4155B7
5A540EE4FE078A15329B6A7058F3BB99120307E148E85543A9BEA20DD9B8BB15
3BF8BFFD5D22C0E257B6A08A3F947201B37F88EAE8072AAA3C6E8C2CB6A56DA8
8C029970F075704CD96D334363F259D5B7BB5F0E331EBAAE71799066AD651412
A1CA609B662C6149512831E92EC3D76BA7B2F99F888CBF646CA64645FB5BA91B
EDFEAB9F56CD04F8EA95A7E82395722FDA3107F91F253F3F250EC9D443C04C80
1F76C61> |
2 <001C60D8A8C9B7BF865DCD0BF51438FE76F086549189DD32A2C28F73209F6
E986620633861358A6E122DAD586C60B7C33875AF807E0187419CBB8E9713F08
644EC0064B1EC6C540F611C401C4E11E70B308644E1C2F898BE1C1487EFCDBA7
668B64C505A572AD246D75CC20B94C779737D0E1120A09B9D71748942F951B9D
46C7772D1ABBD22EDF0AAD109C4A87FFB0D5E76F3042A7CD3753073FD8CFDB3D
D1E1777EFDCDEAFD4398C86F18679B48B9583BA5FFFE080837B2A53B591C690C
3042AF2CCF659D4ADC802FB4967075F90C8952F360F48D524691900237E5C852
452BEA84FF65546DD407129C50BE165195AA4FE60ABAFAB7A0093BAB0C535E21
A38624D2D60777C3C7DE3A0CA8491E5FFD4B31D15959B63C2DABF918C37D7622
21491DA27E211082341BF0C384E326B> |
3 <001C60D8A8C9B78FDBCC50973507CE87F9B240D4A8D1F5311174074018299
4B9F131CEBC12529D891C52493399746B37C1411896556D03AC1FB8727D7C3A9
ACC1B20185E4FC1BB7667CB82A3FC07EFFE48612D2175E716D0EA5B64DC3EE7F
21D99A91291D3B73637226EB9E85CA8255E605DD27A4FC415EB469F83E4D2F7D
A53FA78B61E00CA7B8464C6F52375F16C8770177F483BDDBD8EB51517F9E85D4
6B5D353EC2D0766246EF8E080DBC9DFBD9D58670E225828EE1006CBBAF7F5000
CEC84D21D9ACF02379CE9A5213A> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /IAAAAA+Mathematica-Identity-H /Identity-H 0 [/IAAAAA+Mathematica] ct_ComposeFont pop end end
%ADOEndSubsetFont
/ATTRPS+Mathematica /IAAAAA+Mathematica-Identity-H findfont ct_VMDictPut
ATTRPS+Mathematica [28 0 0 -28 0 0 ]msf
15.7979 26 mo
(\000\001)sh
%ADOBeginSubsetFont: HAAAAA+Mathematica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPR+Mathematica gcheck setglobal} if
1 84 2 <00010066fea40254055c00110006b30b0101302b01072427261134373637
3637170411101716025419fef26c5b664b82505017feba5a4dfec925abe2
c00130fec492703c3b23f7fdddfe9dd2b5000000>ATTRPR+Mathematica AddT42Char 
1 164 3 <0001003dfea4022b055c00110006b30c0401302b01100706052736373611
1025371617161716022b5b6bfef119a34e59febb165050834b650221fed0
c0e2ab256cb5d201630223f7233b3c7092c40000>ATTRPR+Mathematica AddT42Char 
1 292 5 <00010000feb60289056d00030006b3010001302b090123010289fde16a02
1f056df94906b7000000>ATTRPR+Mathematica AddT42Char 
1 244 4 <0002008700f804a2030e000300070008b50604020002302b012135211121
352104a2fbe5041bfbe5041b029876fdea77>ATTRPR+Mathematica AddT42Char 
ATTRPR+Mathematica /CharStrings get begin
/parenleft 2 def
/parenright 3 def
/slash 5 def
/equal 4 def
end
ATTRPR+Mathematica /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 47 /slash put
dup 61 /equal put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPR+Mathematica*1 
[40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /.notdef /slash 13{/.notdef}rp 
/equal 194{/.notdef}rp]
ATTRPR+Mathematica nf
ATTRPR+Mathematica*1 [28 0 0 -28 0 0 ]msf
30.302 26 mo
(\()sh
%ADOBeginSubsetFont: GAAAAA+CairoFont-1-0 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
ATTRPQ+CairoFont-1-0 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B7A73DB6D3C62637EA14DFBD02E802A7A94152DD35B18EAE88
98D2E584EA0449B13143C828109183FA5F4E2FFFDB7CDD3D3885E2BF91B93AEA
733F56C2E8F3AAD3EC12413DEE46E6BA2CE0CD2242D8547D96A57FFC4DC8E4CB
5651933A76ED0777FBF57B8A00539D6FB8A8D729F0CBDCAE7BFDEE50534E931A
45D6FC006D6495566A6BF0C22F910B544368EF06495D9C3E4CCF66A78290D158
5845F1935E1EFFF7B86C980D36C6911D38448FC7CAD1AF54392ECDA5F68CFADD
7947CA62F280275D2A1A17D8547E2C46750FC1F8EA7E1FC55D7D420DD72D76D6
A1F67615CE84BF721658209B> |-
/d <1C60D8A8C9B7A73DB60B006BFE598D0FA476EA845A431872858AD00728AA
A2FF2DA603627D6B130CBDF7A26D384F5DE144860D4F362DEBDB88D8BB5446C3
EE6C0F13F34B5DF6D3A2EC27D06940EEE89AAD5A5F70A2BF95398FC8B5D39BCC
5F4123BFDF07C1411F9DA23F5BA9AD79D9FFCA5E538FB64A708001251CBD4D4A
FA788606FFDFF8F4432B3808BFA08F27034E2AEEAF93340BA7A2C8B7EEDE54EB
37B03C7A4E8FBEA972D936B76B655CF7DCBBE6121D36E42D13802D31DB10E153
873BB0C9971D799B17FA6454882CCED4471723F94931432C59219330C0F95372
72D43DA9CC96B1FEFB366BBADF3B31370EED1D7A15CE3CA69DEABF693233AED2
FFCDE0D217940825F734> |-
/h <1C60D8A8C9B7A73DB99C4D2E193835F559E3A216098D316C9F7E701C2871
E1389912B053DF0707BD4B792F18D3A89BA3453850C05D981C78BE0ADD050871
F9A308F808EDE65B863AA78D674CCFCD299203701F86DD47C20D0D1ADE5D5F1E
4B0E620C3EDA159265574A10DF605477177135991D215D74642C85B8A7A0E60C
38A0BA3C89FB451A168941FC30AF9ED5BAF0140B678642BCEBC1177845164B18
9EF2F3BC2AD76FCDF7045213C7E89B9792CF95FE568EB6A903F0EAC3BB24B108
958816641A296B37640E9E26F6FB0A09CBD867DD48321DDEE3CF5C6F9EAAAD2E
112B4674D2A90C93DF87E479055E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ATTRPQ+CairoFont-1-0 /Encoding get
dup 97 /a put
dup 100 /d put
dup 104 /h put
pop
%ADOEndSubsetFont
/ATTRPQ+CairoFont-1-0*1 
[97{/.notdef}rp /a 2{/.notdef}rp /d 3{/.notdef}rp /h 11{/.notdef}rp /t 
139{/.notdef}rp]
ATTRPQ+CairoFont-1-0 nf
ATTRPQ+CairoFont-1-0*1 [28 0 0 -28 0 0 ]msf
39.2622 26 mo
(t)sh
ATTRPR+Mathematica*1 [28 0 0 -28 0 0 ]msf
47.242 26 mo
(\))sh
%ADOBeginSubsetFont: JAAAAA+TimesNewRomanPSMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (JAAAAA+TimesNewRomanPSMT)
%%Title: (JAAAAA+TimesNewRomanPSMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /JAAAAA+TimesNewRomanPSMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-568 -307 2046 1040} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 31 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 23 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB
222483BD74F8B> |
1 <001C60D8A8C9B6079F6D1FEB8BC784E04BF33C5305B0D4256869F532ACB32
C74C002E8ED440A8EAC63AB4AD37FFCB4A6D6CAEA1AEEFF18F89C5B0833DBD47
B99A1B5A2B79F9F3C2F88C215DCA39EBB12F7D794B2B8C12D065819ECCC5C469
5D4469EE5D14154ADF303EBA8182A38B1AAACD803178EF5222731F221EB073E6
A696B29DC16CF> |
2 <001C60D8A8C9B7A73DDE03BEEA75B31F61E78B8C94AAF630ACAE1A607BD40
EB48302A40F17E763F71E8B5595B8EEEBB33C0827EEA0DE5370DD4C7A0924404
8D0DA814D6E79BAC2B8E456D2F119496FF35E5A13F4B8F71ECD895B10E20FBAC
666023D0941B5A0FF139CBD18745BC2892DD91EE541EAD2B54AF0839C3327F75
904A81A3805CFC7AF83735A7079B305271753A14327F3CB693ACCFE5C9D6A3B8
431B357819DFFAD81BD2A60573E4CA4C48EC0A5E07291768D829E6A70067C076
E94545FD4D8E2BB7431617263A47DB04F0B8630D6AB06FF2DD1B1F383A59D02D
F1C7730E7CC0F462D79552DFA> |
3 <001C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD44
16250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDAF
996A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA436
702294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B68
D9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |
4 <001C60D8A8C9B67DB588E4F1CA08AAE2849150993F04A9505F35FB0651E8B
D07763E353B62D97D6E9021C85F29A34781ADAE5B59E161316B077C7DB717500
4CCC0C4772739CA84C24B23204E2217A26145598E0CE01644B0D03AB0D6875FD
2D1D2E9D671471BBBE80FF713590DADA9249E6B1C7C793099AF4598A74DFDA50
8980F51AE64350392679CAE63EF949FFEEBC51FE76C494551CA81F76DAC40461
EB7E7D8BF8804E50645A5BDCEB413AE0E20C4009876DCACFCAF4713615622080
19B4D3C27033B106A4CBAEB80E0E58615E31F89449322AED549A55859D7F9B87
737D4E99FEAEFB56E26C7C25F46BD486EB2E6BA45781093A04DFBCF387B3A601
A079ED4E7EE9CBB25C2CFBD25FDB004A929AC> |
5 <001C60D8A8C9B784FA6F12CA3EA7CC491F9497438C7E5073F78A3CBE7FC25
6489C14E4F0D09E302FD739FE18CD3123B04470B48292CB813A9598EADE0968F
DF28B015221329D5209889AD34815E419E2F550C856A7FF98B1140910CD1E15C
7BE08430F6A98D40AF679F7A18BE9F14E79E9A051251996FE5B4185B94260904
2CE02EAE5B6A853560C2FB7A64008DADFD55B9BA45D93B5EB6A6BAFFF924A9E5
AD79A1664A329A8DA2CE534DCAE039C04206338F8B515E0F4DEFF3A1654D10AE
F0172E467A1223B22C7C0F1DA> |
6 <001C60D8A8C9B7A8F201C8DC2F8830BC05372CE201CEB9729DEE7D3B3826D
D4B316749C78BC0FBB35B347B0D684A867E7B9B4C2FF428A7379BE9B72789E32
CA54C2556AFB4CE81B28276E08532AA390D24706197BD0E03BDD6ABDDECD38D6
906C109DF8AC0E25386FCD69A0E38D86426BB6ACC3AE41339D45833760EB6B02
E8C563EF850D9BDA018FE0B9CC7BB5D3D79ADE5156AFAA0AE5373471CFF6D373
5FBC6808A9FF1ABBDF0E07C97606D393F0E04001AFDE2507DF36212> |
7 <001C60D8A8C9B7734F831E0A391DCC1BA46DB3A0CCEFD90EE45844DB75514
1C7DF76A511C59C2EBE1FDFBED9F3684F2A05C53BD0291CD38729DD1E593DAC3
3A0FE5B1A3C847EDC7EB9636F1105C974B3D178BAD69780639E012563CD7CCAC
4B34C9953844DB5CA23EA8F8FA9D001C37AE70B5E3138584F4F1B2C61D16D5B5
BA4D4556E5F07842339564BCEB842DF7C487452> |
8 <001C60D8A8C9B58652243BB181C206FE1B25419C345F7BF8A180A54644670
0F9148FAB68A72315B7305543521132D38E4816371EA9ABAE33753A8B69EC98E
ECA5048597A6F7D78592B3F17A626F9D878309852075714B317B415324CB53B2
34CB67FFC83BFC22E3FE536CE3EDF2704C3EB0DABEDAC2844E889342A6D8C15F
6CD875AA54B1146D5876169E1AD8F8E5D2FCC90B05CD5FF888711E28444FE7D0
4274FD644DB6F78ED4A3630CF426AD1C034358EBAF324643430DCDD728FC6BF3
22D428ABECB0A5004FE69D74B0C86655E128D75DCDAA4592908998F57EBB145E
4D8986AFB60B43CE907BB4104F81464CC696F6AE2B7CC8AF2D4F2C970A0F3EDC
ABCBF8E3F8B6873A852E2B0F6FD5395A04D78DCE9F4DB447AF1D73CE8948282C
87D5836670CA9770E1E68EEAD4109D0E1A56DEEF4E9FB8859D7F1D8F13FD0514
514857B6CFBD2F86D90C51A7E4D91B5F96E411C5B1EA4CD465A7F57C4DDAF2E4
9DD251FAFD3DDAAF277C3615498B7C7B5F27FF057952A166196F20B5BEF13EB4
2E3B3630DAF95ABC9E2788DC0629F551B7F0DFFD963D3AA632F96D9577590AAE
364B4A4EB37429093C3CDFED892064A7FDDC71619D790D47B933223DA377F3F2
D0E59> |
9 <001C60D8A8C9B7A73DDE03E4B644C159EB8B647E016C26B087177A3C5BC5B
AF02161182070C8A4222C2E1ED9B95B756DF22232FA7BE5897B7C6D574795119
A3B50894B8B0E1A184B7636697D129D88C76A3FD42BABE719D85F7DC372AB50B
8B16D988DA863EE6A5B7454A406C9D5E815158A5786509E6DF27377A83F3454D
D6905EA3123CBA5BA0D4772C12767864CF2C5FEDE2AFF05D3CC0534D74E6AE9D
BF9F3B49677449A761BE771C9C1AB2D4DC994988233EE24B9E175796C6F13518
A71BC990F312D4821883A95164BCE1683B85434AFA8> |
10 <001C60D8A8C9B7551CC4DF4A6CE49C8EA14C989C912CC6BA545130057BBB
46B4BE4FE8AD8DA490A8FA867D115DBEDFEB6B20F838E63DDA9E960444FF6F5B
CD8863AEC515E3328A0D45EA0F68A58418AB0CE2F1CEE6C52F88FC52D0AC346A
A2D19587837E44558D2BEFC80EA99B7231488DAA37FA1E88E48CA2960CD4525F
CAB3C7E51FE4175DBFA3A68949661CC0139047AC33D2B7C158A58F27A37D9A25
8CDF31171B3A51A6AE2C34237CA75C5A32C355368C566B4902F9B16C67549D3B
01632991EB259A797B96635B6D1C4C23652958D3D0B19803888920443634A93A
6EB2B2C02FA7D0822A94280E605F0C2AF2E3F4C5C93CDC4BCC700C760E0D82C5
8A2DDF236C3C368082C6383D8474FA491463E6DF66A570CF> |
11 <001C60D8A8C9B743839640A865691735BCE7990F95B26923B4559D703691
218F95F1D1D021FFEA8C3ED4957F210FE5A0D71B4347C64287BF830285A7E9B5
A1D30905D53F646BA5B11955734A0E6FE1E29CF7B6341C4A5236C4AE255F89ED
E5BD7FD51B87C45F2152E9D85F6D7FD6B7895D19F1C341BC21793DC039780A05
36A24600F883DC02737B3B44C41AE876AA8BFA1C078DC7371CC53911AC40B1C8
64A6917C4527A7CA0731EC84D7D21716DD2C5B08792CD3AFF21852664A694AF3
E08A6F4300B25A9948AA> |
12 <001C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438EC
C54400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F4
2A6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F
9C2999730E7919239B324086FEA852156F456647AA0692084759C352D6998971
799F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |
13 <001C60D8A8C9B7015BC447D07CD7FEE2FA42C22D9FC5B73E8D4834FFE021
DC03E0A50BC09D4FC19023F6248999FAF2DA6D72098301B94F335EB41A359FE9
34546984EC8EC96586E8F07E3F84E65AC5AAA825BE8302DB3BF7B2E5F7105D47
ACEF667E179E0395F2DF53F6E6B9> |
14 <001C60D8A8C9B784FA6F12CA3EA7CC4C70F49DD2CBFF9BB64AA9A8A936CF
2F060E35CC2B76C1A5E8DC3FBD23C9DD0C4C8C673D618D11BFCA2BEB0C6F4B9F
47E2D02D393F50A5B872C253D5359DF950CE8AAE681B57238125F1E66F5DBBBE
985436FBA0BD17D0D7445395958B03FE3611469D7BAB6C9DE5CA7BBCA4772590
880CFADE2E856493DB3C3867517120A9A54FA671007FE72324A13157EB78F4A2
82FE184FD43DD262F059FF0EA32FEB63DB346C52E30DDF3425DCDD4F855AE872
6C942B4187C9B113BE242F3C1F1AE0D54BBEC56DDE6AFD0E03ADD37D> |
15 <001C60D8A8C9B766CA5ADA49389396CBA366364950488232408CADC90BB7
A3301E535030A2F0CE817F9CCCB0EE9D6096312C59E954C04BF7578EAC1F33A1
EDD188F8DE0BB3FF66CB4D5C485FEBC54D20278394B3B489E80503C28B258588
BA336EE07B0D098D02016F7AB3E9998E75473F5DC5F3252209E7> |
16 <001C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2B
EAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A
15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7F
FA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA5013189
84A59E1CFFFD06EA629758085868D3F5F7204292> |
17 <001C60D8A8C9B7A73DD670F5272DD145294083C4293196A1DBA349EF195D
AADD76F8FA5D95CD31B7A1C2B32491F1D3BDEAF32234D0995EB67A2BEF06777B
5B8AB01E1FC457D70FEE563CF2C0C851F3CC8B137B00E8CC0DDAE3A128D9A231
9F3FF89B241236A311487E7B00ABDB18C5C11783A73226CB9112660CA2598816
9831DBD8D37F0570522652B666847FB24934B522403DA00EF77D9BF6494155BE
ACD6C4576905B10BBFDD62A70CAEE193F073806BE591E56E5DC8424D64A808D7
528EBE8928C7E8D537D6DCC6918CF06863B4A936B7CA4331A2F9> |
18 <001C60D8A8C9B74F36626443C81140A0FD41C44D0762310D2E5A14FA1EAD
5E0C4E7A6792C29EA2E6AEA317CA1EE55FD38F4BA6E339660096C5D5A88398ED
E31D9F14CC5ADC82506F8CE39A1EE4744621BCB041253F0C3E32D92C00D5639B
535D2C217088E4BF4FC5AFE3FE77FDD551F6E3CA89BF092F90578833D3DFD817
D91B4474E1B9116A8703D5FB443ACCC4689F8888E64802833157B8C890B626AB
DE8AEF63C8C0D2F57D6D61E68C9587F6D864F53C5A7EBBB16775F3F87728AD62
EB8557> |
19 <001C60D8A8C9B784FA60143A4BD282A9DC1290E0AC4D64E420350268D65B
5CC5DD387AA47052A8918643F1E84FE3F3E19A2816FA45AA72EDAFAA2D52E71C
C1F95BA3B8E61967DFFD438DF506898EFC00CDC472B9D3B4595AC376674CA153
62DA447A299CA7B5981BF0B9110B50309C5B7B2FBD384484B2A47A05468A15D0
91119904BA1754BCDE94413E437C2DC2E4CC87DD951DAA5FFDACA180AAAAA4EE
CBA1> |
20 <001C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC55
0DEC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C
6B177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB
333E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385F
DB0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E
70BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A298
95DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B7
37B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE327
2EF1EF1464C3F0D45D7CBB8749AF571E09> |
21 <001C60D8A8C9B66C0E626E146F358597F8A7F48980ED982BF7F83D6AF9CC
8EA3D48BF4117BA9E6ED662CD05945FB42398A0375D916AF509A39D337565DF8
E872BEAADA755190F51813DF2A32AFA34B9E0250684E9A457402BDFFD5024043
005F99CBD4E0125C789AF84EF14B91206180C6FD62EB698B0CC789531AC71BE2
9AC7A02BBA5E162BCB82B37831911AE1D8A0A1DA5EDC98A1CDD15C980790FC01
AFEE85F1AC72E92E8701641B4DA9E345694DFA41DB05C2> |
22 <001C60D8A8C9B6557A33834CBA8FF15C21CB5F5855468AF26AE4BD7FB5D6
AE494A071493F471FA5BD4D993E8FB760A4F4528D850B793B866ED0C43A9AE73
42EDDFD90400FD8B52AF6904E825899DA2AAF03DB6837A0E253FF0C1F1006C30
3E9B6A02F2239523F160BCBDDB46C89A851FA393C72EB5391B4101B070F0C057
1B5AA64BA5C325139A19E91D3CAE1DBE0A47062A6DC9157FD6A315FE3302A571
2432B123E659D586D5B0E40F006DA753D13142D2D449F59DBABDCFF35739BDFC
8363E94E4FE793C833480569E786EFD8FA5406E2AB2EDFE744A874174A802085
AE305654EAF0D2D7830C46CE5E36A6C1D7A1866A32D68B95E22283E47CBA448D
E8> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /JAAAAA+TimesNewRomanPSMT-Identity-H /Identity-H 0 [/JAAAAA+TimesNewRomanPSMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/ATTRPT+TimesNewRomanPSMT /JAAAAA+TimesNewRomanPSMT-Identity-H findfont ct_VMDictPut
ATTRPT+TimesNewRomanPSMT [28 0 0 -28 0 0 ]msf
109.93 138.756 mo
(\000\001\000\002\000\003\000\004\000\005\000\006\000\007\000\010\000\011\000\012\000\003\000\013\000\014\000\012\000\003\000\015\000\003)
[20.216 14 14 18.1161 14.9801 13.9718 19.7678 25.0601 14 13.58 14 13.216 
12.4038 13.58 14 11.4801 0 ]xsh
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPP+TimesNewRomanPSMT gcheck setglobal} if
1 2640 7 <0001006efeab019800c80017006db0852b58402759025917c41603091760
19d019030901000704040f081200b612400c0b043a0f151f1580150315b8
012a400b1f0f5f0f020f19189ca4182b4e10f45d4dfd5ded003fede41239
01111217393130015d01711bb70100000c12120c0b00183f332f11332f33
3031591335363635342726232207062322263534363332161514066e6771
0907070b251214313a4b3642678ffeab2c228f50130d0914093a33314673
5f67b100>ATTRPP+TimesNewRomanPSMT AddT42Char 
1 3332 10 <00010091ffe4016f00c2000b003bb0852b58401c0040060b034009403a35
09403f355f09019f09af090209850c6a7a182b10f671722b2bed003fed31
301bb200060b00183f3330315925321615140623222635343601002f4041
2e2e4141c2412e2e41412e2f4000>ATTRPP+TimesNewRomanPSMT AddT42Char 
1 2992 9 <0002004affe803b705680010002400dbb0852b58b2610820b80106b20505
15b80106b20d0d1ab8010f4012091a002640260240266026a026e0260426
11b8010f400e5f006f007f008f00a00005001925ba011e010100182b4e10
f45d4ded4e105d71f64ded003fed3fed31304379404c0124232422240206
02010301020607251c1b1d1b1e1b030613260f250b261819171902062104
1162001f061a6201140e116200160c1a620124012062011b082062011210
156200190a1562002b2b2b2b012b2b2b2b2a2b2b2b2a2b2a2a811bb10520
b807eab46c05050d15b807e9b26c0d0d00183f2b3f2b3031591334123736
333217161114020623222726371017163332363736113427262726232207
06024a8c745a609c7c9b88d362c2816dc445397136741e2e302439293a44
354834029ee8014f52419fc5feafecfeb695e5c1f7fee8b1956172ac0139
e89b7330213d53fe9c00>ATTRPP+TimesNewRomanPSMT AddT42Char 
1 2824 8 <000200b0ffe4019003b0000b0017005bb0852b58b10319b80125401d0d67
369019a01902064000070c40120b0f4015034009349015a0150215bc0125
001800d2010000182b10f65df4ed10ed003fed3fed3130015d2b1bb70c12
0600120b000700183f3f1133113330315901321615140623222635343613
321615140623222635343601212e41412e2e41412c2f41422e2e414103b0
412e2e41412e2e41fd13422e2e41412e2e42>ATTRPP+TimesNewRomanPSMT AddT42Char 
ATTRPP+TimesNewRomanPSMT /CharStrings get begin
/comma 7 def
/period 10 def
/zero 9 def
/colon 8 def
end
ATTRPP+TimesNewRomanPSMT /Encoding get
dup 44 /comma put
dup 46 /period put
dup 48 /zero put
dup 58 /colon put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPP+TimesNewRomanPSMT*1 
[44{/.notdef}rp /comma /.notdef /period /.notdef /zero /one /two 
/three /four /five /six 3{/.notdef}rp /colon 197{/.notdef}rp]
ATTRPP+TimesNewRomanPSMT nf
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
370.302 138.756 mo
(,)sh
ATTRPT+TimesNewRomanPSMT [28 0 0 -28 0 0 ]msf
384.302 138.756 mo
(\000\005\000\016\000\017\000\020\000\016\000\014\000\005\000\013\000\016\000\003\000\014\000\017\000\007\000\013\000\005\000\021\000\002\000\020\000\013\000\003\000\015\000\003\000\014\000\006\000\003\000\022)
[14.9801 14.9801 12.2359 12.4038 14.9801 12.4038 14.9801 13.216 14.9801 14 12.4038 12.2359 
19.7678 13.216 14.9801 14 14 12.4038 13.216 14 11.4801 21 12.4038 13.9718 
14 0 ]xsh
109.93 185.728 mo
(\000\023\000\024\000\002\000\024\000\025\000\020\000\017\000\002\000\026)
[14.9801 12.4038 14 12.4038 17.6961 12.4038 12.2359 14 0 ]xsh
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
238.842 185.728 mo
(:)sh
ATTRPQ+CairoFont-1-0*1 [28 0 0 -28 0 0 ]msf
253.598 185.728 mo
(a)sh
ATTRPR+Mathematica*1 [28 0 0 -28 0 0 ]msf
274.598 185.728 mo
(=)sh
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
299.658 185.728 mo
(1,)
[14 0 ]xsh
ATTRPQ+CairoFont-1-0*1 [28 0 0 -28 0 0 ]msf
327.658 185.728 mo
(d)sh
ATTRPR+Mathematica*1 [28 0 0 -28 0 0 ]msf
349.666 185.728 mo
(=)sh
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
374.726 185.728 mo
(0.1,)sh
ATTRPQ+CairoFont-1-0*1 [28 0 0 -28 0 0 ]msf
423.726 185.728 mo
(h)sh
ATTRPR+Mathematica*1 [28 0 0 -28 0 0 ]msf
444.726 185.728 mo
(=)sh
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
469.786 185.728 mo
(0.1,)sh
ATTRPS+Mathematica [28 0 0 -28 0 0 ]msf
520.774 185.728 mo
(\000\002)sh
ATTRPR+Mathematica*1 [28 0 0 -28 0 0 ]msf
541.97 185.728 mo
(=)sh
ATTRPS+Mathematica [28 0 0 -28 0 0 ]msf
567.031 185.728 mo
(\000\003)sh
ATTRPR+Mathematica*1 [28 0 0 -28 0 0 ]msf
581.674 185.728 mo
(/)sh
ATTRPP+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
590.522 185.728 mo
(6)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/ATTRPS+Mathematica-Identity-H uf
/ATTRPS+Mathematica /CIDFont ur
/ATTRPP+TimesNewRomanPSMT*1 uf
/ATTRPP+TimesNewRomanPSMT uf
/FAAAAA+TimesNewRomanPSMT uf
/ATTRPT+TimesNewRomanPSMT-Identity-H uf
/ATTRPT+TimesNewRomanPSMT /CIDFont ur
/ATTRPR+Mathematica*1 uf
/ATTRPR+Mathematica uf
/HAAAAA+Mathematica uf
/ATTRPQ+CairoFont-1-0*1 uf
/ATTRPQ+CairoFont-1-0 uf
/GAAAAA+CairoFont-1-0 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
