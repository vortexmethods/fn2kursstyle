%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: wing100boundSol_toYuliya.pdf
%%Creator: Adobe Acrobat 21.7.0
%%For: Starter
%%CreationDate: 19.03.2022, 14:46:27
%%BoundingBox: 0 0 1000 639
%%HiResBoundingBox: 0 0 1000 639
%%CropBox: 0 0 1000 639
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 627 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.0-c000 79.1357c9e, 2021/07/14-00:39:56        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2021-05-18T22:34:48+03:00"
   xmp:CreatorTool="Wolfram Mathematica 11.3.0.0 for Microsoft Windows (64-bit) (March 6, 2018)"
   xmp:ModifyDate="2021-05-18T22:34:48+03:00"
   pdf:Producer=""
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -639 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 639 li
1000 639 li
1000 0 li
cp
clp
1.6 lw
2 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
36.035 177.145 mo
36.316 177.199 li
36.602 177.258 li
38.313 177.586 li
40.59 178.031 li
45.148 178.934 li
54.262 180.789 li
74.023 185.066 li
92.473 189.375 li
110.563 193.895 li
130.184 199.129 li
148.496 204.312 li
168.344 210.25 li
187.828 216.402 li
206.004 222.418 li
225.711 229.25 li
244.109 235.93 li
262.145 242.781 li
269.297 245.59 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .993378 1 0 cmyk
@
269.887 245.824 mo
299.977 258.312 li
319.77 267.246 li
339.199 276.777 li
357.324 286.578 li
376.977 298.59 li
377.266 298.781 li
377.551 298.969 li
378.125 299.348 li
379.27 300.113 li
381.563 301.664 li
386.152 304.855 li
395.324 311.66 li
395.633 311.898 li
395.945 312.141 li
396.566 312.629 li
397.809 313.609 li
400.293 315.605 li
405.262 319.77 li
405.574 320.035 li
405.883 320.305 li
406.504 320.844 li
407.746 321.934 li
410.23 324.164 li
415.203 328.824 li
416.422 330.012 li
417.641 331.219 li
420.082 333.691 li
424.961 338.875 li
425.57 339.547 li
426.18 340.227 li
427.398 341.598 li
429.84 344.418 li
434.719 350.367 li
435.289 351.094 li
435.855 351.82 li
436.996 353.297 li
439.27 356.332 li
443.824 362.746 li
444.105 363.164 li
444.391 363.582 li
444.961 364.426 li
446.098 366.141 li
448.375 369.668 li
452.926 377.156 li
453.543 378.219 li
454.16 379.297 li
455.395 381.484 li
457.863 386.012 li
462.797 395.734 li
463.105 396.375 li
463.414 397.02 li
464.031 398.316 li
465.266 400.965 li
467.73 406.457 li
472.668 418.312 li
472.953 419.043 li
473.242 419.777 li
473.82 421.262 li
474.973 424.281 li
477.273 430.551 li
481.883 444.055 li
482.172 444.941 li
482.457 445.836 li
483.035 447.641 li
484.188 451.32 li
486.492 458.953 li
491.098 475.363 li
491.379 476.418 li
491.664 477.48 li
492.227 479.621 li
493.355 483.977 li
495.617 492.965 li
500.133 512 li
500.414 513.234 li
500.699 514.473 li
501.262 516.957 li
502.391 521.984 li
504.648 532.195 li
509.168 552.918 li
509.473 554.316 li
509.781 555.711 li
510.391 558.488 li
511.617 563.984 li
514.066 574.602 li
514.375 575.883 li
514.68 577.148 li
515.293 579.637 li
516.52 584.426 li
516.824 585.574 li
517.129 586.707 li
517.742 588.91 li
518.969 593.035 li
519.273 594.004 li
519.582 594.945 li
520.195 596.746 li
520.5 597.602 li
520.805 598.426 li
521.418 599.977 li
521.727 600.699 li
522.031 601.391 li
522.336 602.043 li
522.645 602.66 li
522.949 603.242 li
523.258 603.781 li
523.563 604.285 li
523.867 604.746 li
524.176 605.164 li
524.48 605.543 li
524.789 605.875 li
525.094 606.168 li
525.398 606.414 li
525.707 606.613 li
526.012 606.766 li
526.32 606.871 li
526.625 606.93 li
526.934 606.941 li
527.238 606.902 li
527.543 606.812 li
527.852 606.676 li
528.156 606.484 li
528.465 606.242 li
528.77 605.953 li
529.055 605.633 li
529.34 605.266 li
529.629 604.855 li
529.914 604.398 li
530.199 603.895 li
530.484 603.344 li
531.055 602.105 li
531.344 601.418 li
531.629 600.68 li
532.199 599.07 li
532.484 598.195 li
532.77 597.277 li
533.344 595.301 li
533.629 594.242 li
533.914 593.141 li
534.484 590.809 li
535.629 585.621 li
535.914 584.219 li
536.199 582.777 li
536.773 579.773 li
537.914 573.309 li
538.203 571.602 li
538.488 569.859 li
539.059 566.273 li
540.203 558.73 li
542.488 542.352 li
547.063 506.117 li
547.371 503.566 li
547.684 501.012 li
548.301 495.883 li
549.539 485.594 li
552.02 465.074 li
556.977 425.414 li
557.285 423.027 li
557.594 420.66 li
558.215 415.957 li
559.453 406.727 li
561.934 388.973 li
566.887 356.449 li
567.191 354.582 li
567.496 352.73 li
568.105 349.074 li
569.32 341.937 li
571.754 328.352 li
572.059 326.719 li
572.363 325.094 li
572.973 321.891 li
574.188 315.645 li
576.621 303.77 li
576.926 302.344 li
577.23 300.926 li
577.836 298.129 li
579.055 292.676 li
581.488 282.305 li
586.352 263.543 li
586.637 262.523 li
586.918 261.512 li
587.488 259.512 li
588.621 255.605 li
590.891 248.137 li
595.43 234.469 li
595.715 233.668 li
595.996 232.871 li
596.563 231.297 li
597.699 228.215 li
599.969 222.305 li
604.508 211.437 li
604.816 210.742 li
605.121 210.055 li
605.738 208.691 li
606.969 206.023 li
609.43 200.918 li
614.352 191.531 li
614.66 190.98 li
614.965 190.43 li
615.582 189.344 li
616.813 187.215 li
619.273 183.129 li
624.195 175.57 li
624.48 175.152 li
624.77 174.738 li
625.344 173.918 li
626.492 172.305 li
628.789 169.187 li
633.383 163.371 li
633.672 163.023 li
633.957 162.68 li
634.531 162 li
635.68 160.656 li
637.98 158.059 li
642.574 153.195 li
642.855 152.91 li
643.699 152.066 li
644.824 150.961 li
647.078 148.816 li
651.582 144.781 li
651.863 144.539 li
652.707 143.824 li
653.832 142.883 li
656.086 141.059 li
660.59 137.613 li
660.895 137.391 li
661.199 137.164 li
661.813 136.723 li
663.031 135.852 li
665.477 134.16 li
670.363 130.977 li
670.668 130.789 li
670.977 130.598 li
671.586 130.223 li
672.809 129.48 li
675.25 128.039 li
680.141 125.316 li
680.711 125.012 li
681.277 124.711 li
682.418 124.117 li
684.699 122.957 li
689.258 120.754 li
689.543 120.621 li
689.828 120.492 li
690.398 120.227 li
691.539 119.711 li
693.82 118.699 li
698.379 116.773 li
699.613 116.273 li
700.852 115.781 li
703.324 114.824 li
708.266 113.008 li
709.5 112.57 li
710.738 112.145 li
713.207 111.309 li
718.152 109.719 li
718.73 109.539 li
719.305 109.359 li
720.461 109.008 li
722.77 108.32 li
727.383 107.008 li
736.617 104.59 li
736.898 104.52 li
737.184 104.453 li
737.746 104.312 li
738.879 104.039 li
741.141 103.5 li
745.668 102.465 li
754.719 100.539 li
755.023 100.477 li
755.332 100.418 li
755.945 100.293 li
757.172 100.051 li
759.625 99.57 li
760.262 99.449 li
@
760.852 99.336 mo
774.352 96.918 li
792.68 94.027 li
812.535 91.242 li
832.035 88.695 li
850.223 86.379 li
869.941 83.828 li
888.352 81.34 li
906.402 78.75 li
925.984 75.715 li
944.258 72.637 li
944.574 72.582 li
944.895 72.523 li
945.531 72.414 li
946.805 72.187 li
949.355 71.73 li
951.66 71.316 li
@
952.254 71.207 mo
954.773 70.75 li
955.094 70.691 li
955.73 70.57 li
957.004 70.336 li
959.555 69.859 li
959.871 69.801 li
960.191 69.738 li
960.828 69.621 li
962.105 69.379 li
962.422 69.316 li
962.742 69.258 li
963.379 69.137 li
963.699 69.074 li
964.016 69.016 li
964.336 68.953 li
964.652 68.891 li
@
36.035 185.676 mo
75.188 185.676 li
.749721 .679194 .670497 .901457 cmyk
@
75.332 188.098 mo
92.023 188.098 li
@
92.172 191.133 mo
105.262 191.133 li
@
105.406 194.074 mo
116.668 194.074 li
@
116.813 196.879 mo
126.93 196.879 li
@
127.074 199.559 mo
136.398 199.559 li
@
136.543 202.133 mo
145.277 202.133 li
@
145.422 204.637 mo
153.707 204.637 li
@
153.852 207.078 mo
161.777 207.078 li
@
161.922 209.48 mo
169.559 209.48 li
@
169.703 211.852 mo
177.102 211.852 li
@
177.246 214.203 mo
184.449 214.203 li
@
184.594 216.539 mo
191.633 216.539 li
@
191.777 218.871 mo
198.68 218.871 li
@
198.824 221.199 mo
205.613 221.199 li
@
205.758 223.535 mo
212.453 223.535 li
@
212.598 225.879 mo
219.215 225.879 li
@
219.359 228.234 mo
225.91 228.234 li
@
226.059 230.609 mo
232.559 230.609 li
@
232.707 233.008 mo
239.172 233.008 li
@
239.316 235.434 mo
245.758 235.434 li
@
245.902 237.891 mo
252.324 237.891 li
@
252.473 240.383 mo
258.891 240.383 li
@
259.035 242.922 mo
265.457 242.922 li
@
265.602 245.508 mo
272.039 245.508 li
@
272.184 248.145 mo
278.641 248.145 li
@
278.789 250.848 mo
285.281 250.848 li
@
285.426 253.621 mo
291.961 253.621 li
@
292.105 256.473 mo
298.691 256.473 li
@
298.84 259.414 mo
305.488 259.414 li
@
305.637 262.461 mo
312.359 262.461 li
@
312.508 265.625 mo
319.32 265.625 li
@
319.465 268.922 mo
326.379 268.922 li
@
326.527 272.379 mo
333.559 272.379 li
@
333.703 276.02 mo
340.867 276.02 li
@
341.012 279.875 mo
348.328 279.875 li
@
348.473 283.984 mo
355.965 283.984 li
@
356.109 288.398 mo
363.801 288.398 li
@
363.949 293.18 mo
371.871 293.18 li
@
372.02 298.418 mo
380.211 298.418 li
@
380.355 304.227 mo
388.867 304.227 li
@
389.012 310.762 mo
397.898 310.762 li
@
398.043 318.25 mo
407.383 318.25 li
@
407.527 327.027 mo
417.422 327.027 li
@
417.566 337.617 mo
428.16 337.617 li
@
428.309 350.891 mo
439.816 350.891 li
@
439.961 368.434 mo
452.719 368.434 li
@
452.863 393.516 mo
467.461 393.516 li
@
467.605 434.25 mo
485.238 434.25 li
@
485.383 508.168 mo
509.059 508.168 li
@
509.203 549.379 mo
543.16 549.379 li
@
543.309 426.535 mo
570.496 426.535 li
@
570.645 296.895 mo
589.137 296.895 li
@
589.285 234.527 mo
603.785 234.527 li
@
603.93 201.43 mo
616.18 201.43 li
@
616.324 180.469 mo
627.109 180.469 li
@
627.254 165.797 mo
636.996 165.797 li
@
637.145 154.863 mo
646.105 154.863 li
@
646.25 146.352 mo
654.602 146.352 li
@
654.75 139.52 mo
662.609 139.52 li
@
662.754 133.891 mo
670.211 133.891 li
@
670.355 129.172 mo
677.477 129.172 li
@
677.621 125.148 mo
684.457 125.148 li
@
684.602 121.672 mo
691.191 121.672 li
@
691.34 118.637 mo
697.719 118.637 li
@
697.867 115.961 mo
704.066 115.961 li
@
704.211 113.578 mo
710.254 113.578 li
@
710.402 111.445 mo
716.309 111.445 li
@
716.453 109.516 mo
722.242 109.516 li
@
722.391 107.766 mo
728.078 107.766 li
@
728.223 106.168 mo
733.824 106.168 li
@
733.969 104.695 mo
739.496 104.695 li
@
739.641 103.34 mo
745.105 103.34 li
@
745.25 102.078 mo
750.664 102.078 li
@
750.813 100.898 mo
756.188 100.898 li
@
756.332 99.793 mo
761.68 99.793 li
@
761.824 98.75 mo
767.152 98.75 li
@
767.297 97.762 mo
772.617 97.762 li
@
772.766 96.82 mo
778.086 96.82 li
@
778.23 95.918 mo
783.566 95.918 li
@
783.711 95.051 mo
789.07 95.051 li
@
789.219 94.211 mo
794.613 94.211 li
@
794.758 93.395 mo
800.199 93.395 li
@
800.344 92.594 mo
805.848 92.594 li
@
805.996 91.805 mo
811.578 91.805 li
@
811.723 91.02 mo
817.398 91.02 li
@
817.543 90.238 mo
823.332 90.238 li
@
823.477 89.453 mo
829.402 89.453 li
@
829.547 88.656 mo
835.637 88.656 li
@
835.781 87.844 mo
842.066 87.844 li
@
842.215 87 mo
848.734 87 li
@
848.883 86.125 mo
855.695 86.125 li
@
855.84 85.199 mo
863.012 85.199 li
@
863.156 84.211 mo
870.781 84.211 li
@
870.926 83.141 mo
879.141 83.141 li
@
879.285 81.961 mo
888.293 81.961 li
@
888.438 80.652 mo
898.594 80.652 li
@
898.738 79.199 mo
910.723 79.199 li
@
910.871 77.676 mo
926.457 77.676 li
@
926.602 76.281 mo
964.652 76.281 li
@
36.035 180.207 mo
36.805 180.207 li
36.875 180.211 li
37.297 180.211 li
37.438 180.215 li
37.574 180.215 li
37.715 180.219 li
37.855 180.219 li
37.996 180.223 li
38.277 180.227 li
38.418 180.227 li
38.559 180.23 li
38.84 180.234 li
38.91 180.238 li
38.98 180.238 li
39.117 180.242 li
39.398 180.25 li
39.469 180.25 li
39.539 180.254 li
39.961 180.266 li
40.52 180.281 li
40.598 180.285 li
40.672 180.289 li
40.824 180.293 li
41.738 180.328 li
41.813 180.332 li
41.891 180.336 li
42.043 180.34 li
42.348 180.355 li
42.953 180.387 li
43.031 180.391 li
43.105 180.395 li
43.563 180.418 li
44.172 180.453 li
45.387 180.531 li
45.457 180.539 li
45.527 180.543 li
45.672 180.555 li
45.953 180.574 li
46.523 180.617 li
47.66 180.711 li
47.73 180.715 li
47.801 180.723 li
47.941 180.734 li
48.227 180.762 li
48.793 180.812 li
49.93 180.926 li
50 180.93 li
50.07 180.937 li
50.207 180.953 li
50.488 180.984 li
51.043 181.043 li
52.156 181.172 li
52.438 181.203 li
53.27 181.309 li
54.383 181.453 li
54.461 181.465 li
54.535 181.473 li
54.688 181.492 li
54.988 181.535 li
55.594 181.621 li
56.801 181.797 li
59.215 182.187 li
59.496 182.234 li
59.781 182.281 li
60.344 182.379 li
61.473 182.586 li
63.727 183.02 li
68.613 184.078 li
68.688 184.094 li
68.762 184.113 li
68.91 184.148 li
69.211 184.219 li
69.813 184.363 li
71.012 184.656 li
71.086 184.676 li
71.16 184.691 li
71.313 184.73 li
71.609 184.805 li
72.211 184.961 li
73.41 185.273 li
73.48 185.293 li
73.551 185.309 li
73.691 185.348 li
73.969 185.422 li
74.109 185.461 li
74.25 185.496 li
74.527 185.574 li
74.668 185.613 li
74.809 185.648 li
75.09 185.727 li
75.156 185.746 li
75.188 185.754 li
.817563 .0356756 1 .0030518 cmyk
@
75.332 185.516 mo
75.438 185.535 li
75.508 185.551 li
75.648 185.578 li
75.789 185.609 li
75.926 185.637 li
76.207 185.695 li
76.766 185.812 li
77.887 186.051 li
78.035 186.082 li
78.188 186.113 li
78.492 186.18 li
79.098 186.312 li
80.313 186.586 li
82.738 187.148 li
87.27 188.273 li
87.336 188.289 li
87.406 188.309 li
87.547 188.344 li
87.824 188.418 li
88.379 188.562 li
89.488 188.855 li
89.629 188.895 li
89.766 188.93 li
90.043 189.008 li
90.598 189.156 li
90.738 189.195 li
90.875 189.234 li
91.152 189.309 li
91.293 189.348 li
91.43 189.387 li
91.711 189.461 li
91.785 189.484 li
91.859 189.504 li
91.934 189.527 li
92.012 189.547 li
92.023 189.551 li
@
92.172 189.41 mo
92.234 189.426 li
92.313 189.441 li
92.387 189.461 li
92.461 189.477 li
92.613 189.512 li
92.914 189.582 li
92.988 189.602 li
93.063 189.617 li
93.215 189.652 li
93.516 189.723 li
94.117 189.867 li
94.195 189.883 li
94.27 189.902 li
94.418 189.937 li
94.723 190.008 li
95.324 190.156 li
96.527 190.449 li
96.598 190.465 li
96.668 190.484 li
96.809 190.52 li
97.09 190.586 li
97.652 190.727 li
98.777 191.012 li
101.023 191.59 li
105.262 192.727 li
@
105.406 192.672 mo
110.684 194.012 li
115.145 195.211 li
116.668 195.629 li
@
116.813 195.609 mo
124.5 197.672 li
126.93 198.355 li
@
127.074 198.355 mo
134.203 200.328 li
136.398 200.957 li
@
136.543 200.969 mo
143.547 202.965 li
145.277 203.477 li
@
145.422 203.492 mo
152.535 205.578 li
153.707 205.93 li
@
153.852 205.949 mo
161.777 208.336 li
@
161.922 208.359 mo
169.559 210.707 li
@
169.703 210.734 mo
176.008 212.711 li
177.102 213.059 li
@
177.246 213.086 mo
184.449 215.391 li
@
184.594 215.422 mo
189.82 217.121 li
191.633 217.719 li
@
191.777 217.75 mo
198.68 220.039 li
@
198.824 220.074 mo
203.992 221.816 li
205.613 222.367 li
@
205.758 222.398 mo
212.453 224.699 li
@
212.598 224.734 mo
217.832 226.559 li
219.215 227.043 li
@
219.359 227.078 mo
225.91 229.406 li
@
226.059 229.441 mo
232.035 231.598 li
232.559 231.789 li
@
232.707 231.824 mo
239.172 234.195 li
@
239.316 234.23 mo
245.758 236.633 li
@
245.902 236.668 mo
250.344 238.352 li
252.324 239.105 li
@
252.473 239.141 mo
258.891 241.617 li
@
259.035 241.652 mo
264.543 243.812 li
265.457 244.172 li
@
265.602 244.207 mo
272.039 246.781 li
@
272.184 246.816 mo
278.637 249.445 li
278.641 249.445 li
@
278.789 249.48 mo
285.281 252.18 li
@
285.426 252.215 mo
291.961 254.984 li
@
292.105 255.02 mo
297.352 257.297 li
298.691 257.875 li
@
298.84 257.91 mo
305.488 260.863 li
@
305.637 260.898 mo
311.211 263.441 li
312.359 263.961 li
@
312.508 263.992 mo
319.32 267.187 li
@
319.465 267.215 mo
325.43 270.098 li
326.379 270.555 li
@
326.527 270.582 mo
333.559 274.094 li
@
333.703 274.113 mo
339.551 277.152 li
340.867 277.828 li
@
341.012 277.844 mo
348.328 281.793 li
@
348.473 281.805 mo
353.336 284.562 li
355.965 286.039 li
@
356.109 286.039 mo
362.703 289.969 li
363.801 290.613 li
@
363.949 290.605 mo
371.711 295.5 li
371.871 295.598 li
@
372.02 295.57 mo
380.211 301.086 li
@
380.355 301.035 mo
385.957 305.125 li
388.867 307.211 li
@
389.012 307.125 mo
395.242 312.09 li
397.898 314.16 li
@
398.043 314.016 mo
404.637 319.844 li
404.707 319.902 li
404.777 319.965 li
404.914 320.086 li
405.195 320.324 li
405.75 320.805 li
406.863 321.762 li
406.93 321.82 li
407 321.879 li
407.141 322 li
407.207 322.059 li
407.348 322.176 li
407.383 322.207 li
@
407.527 321.973 mo
407.836 322.281 li
407.973 322.422 li
408.043 322.496 li
408.113 322.566 li
408.25 322.707 li
408.527 322.988 li
409.086 323.551 li
409.16 323.625 li
409.234 323.703 li
409.387 323.855 li
409.688 324.16 li
411.496 325.969 li
413.91 328.355 li
413.98 328.422 li
414.051 328.492 li
414.191 328.629 li
414.473 328.906 li
415.035 329.453 li
415.105 329.523 li
415.176 329.59 li
416.16 330.547 li
416.23 330.613 li
416.301 330.684 li
416.441 330.816 li
416.723 331.09 li
416.793 331.156 li
416.863 331.227 li
417.004 331.359 li
417.074 331.43 li
417.285 331.629 li
417.355 331.699 li
417.422 331.762 li
@
417.566 331.367 mo
417.707 331.535 li
417.848 331.699 li
417.918 331.785 li
418.129 332.031 li
418.414 332.363 li
418.488 332.453 li
418.566 332.543 li
419.023 333.082 li
419.633 333.797 li
420.852 335.219 li
423.293 338.027 li
428.082 343.402 li
428.16 343.488 li
@
428.309 342.797 mo
437.398 355.352 li
437.469 355.449 li
437.961 356.105 li
438.527 356.855 li
438.598 356.945 li
438.668 357.039 li
438.813 357.227 li
439.094 357.598 li
439.234 357.785 li
439.375 357.969 li
439.516 358.156 li
439.66 358.34 li
439.73 358.434 li
439.801 358.523 li
439.816 358.547 li
@
439.961 357.223 mo
440.082 357.441 li
440.293 357.828 li
440.367 357.957 li
440.508 358.211 li
440.789 358.723 li
440.859 358.848 li
440.93 358.977 li
441.074 359.23 li
441.355 359.738 li
441.922 360.75 li
441.988 360.875 li
442.059 360.996 li
442.199 361.246 li
442.477 361.738 li
443.027 362.723 li
444.137 364.672 li
446.355 368.523 li
451.168 376.617 li
451.238 376.73 li
451.309 376.848 li
451.445 377.078 li
451.727 377.535 li
451.797 377.652 li
452.008 377.992 li
452.289 378.453 li
452.711 379.133 li
452.719 379.148 li
@
452.863 376.234 mo
452.992 376.551 li
453.129 376.902 li
453.41 377.602 li
453.48 377.777 li
453.551 377.949 li
453.691 378.301 li
454.535 380.387 li
455.656 383.141 li
455.73 383.324 li
455.809 383.508 li
455.961 383.879 li
456.266 384.617 li
456.871 386.09 li
458.09 389.008 li
460.523 394.73 li
460.594 394.898 li
460.664 395.062 li
460.809 395.391 li
461.09 396.047 li
461.66 397.355 li
462.797 399.945 li
462.867 400.109 li
463.078 400.59 li
463.363 401.23 li
463.93 402.508 li
465.066 405.035 li
465.137 405.187 li
465.207 405.344 li
465.344 405.648 li
465.625 406.262 li
466.18 407.48 li
466.461 408.09 li
466.738 408.695 li
466.809 408.844 li
466.879 408.996 li
467.016 409.297 li
467.086 409.449 li
467.156 409.598 li
467.293 409.898 li
467.363 410.047 li
467.434 410.199 li
467.461 410.254 li
@
467.605 402.137 mo
467.711 402.559 li
467.992 403.668 li
468.129 404.223 li
468.41 405.328 li
468.477 405.602 li
468.547 405.879 li
468.688 406.43 li
468.965 407.527 li
469.523 409.711 li
469.598 410.008 li
469.672 410.301 li
469.824 410.891 li
470.125 412.066 li
470.73 414.406 li
471.938 419.035 li
474.355 428.102 li
478.867 444.312 li
478.941 444.578 li
479.02 444.844 li
479.172 445.375 li
479.477 446.434 li
480.086 448.543 li
481.309 452.703 li
481.387 452.961 li
481.461 453.219 li
481.617 453.73 li
481.922 454.758 li
482.531 456.793 li
483.754 460.816 li
483.828 461.059 li
483.902 461.305 li
484.055 461.793 li
484.355 462.762 li
484.652 463.73 li
484.953 464.695 li
485.027 464.934 li
485.102 465.176 li
485.18 465.414 li
485.238 465.598 li
@
485.383 436.582 mo
485.402 436.734 li
485.477 437.281 li
485.555 437.828 li
485.629 438.371 li
485.703 438.918 li
485.852 440.004 li
486.152 442.172 li
486.227 442.715 li
486.305 443.254 li
486.453 444.332 li
486.754 446.484 li
487.352 450.766 li
488.551 459.227 li
488.832 461.18 li
489.113 463.125 li
489.672 467 li
490.789 474.656 li
493.027 489.617 li
497.883 520.43 li
502.414 547.133 li
502.555 547.922 li
502.691 548.703 li
502.969 550.266 li
503.523 553.367 li
504.637 559.48 li
504.703 559.859 li
504.773 560.234 li
504.914 560.988 li
505.191 562.488 li
505.746 565.469 li
506.855 571.332 li
506.934 571.723 li
507.008 572.117 li
507.156 572.898 li
507.461 574.461 li
507.609 575.234 li
507.762 576.008 li
508.063 577.551 li
508.211 578.316 li
508.363 579.082 li
508.438 579.465 li
508.512 579.844 li
508.664 580.605 li
508.738 580.984 li
508.816 581.363 li
508.891 581.738 li
508.965 582.117 li
509.039 582.492 li
509.059 582.578 li
@
509.203 558.004 mo
509.266 557.992 li
509.34 557.977 li
509.418 557.965 li
509.566 557.934 li
509.867 557.879 li
510.473 557.766 li
511.676 557.539 li
511.746 557.527 li
511.816 557.512 li
511.957 557.484 li
512.238 557.434 li
512.801 557.328 li
513.926 557.121 li
516.172 556.707 li
521.047 555.828 li
525.836 554.988 li
530.297 554.23 li
535.141 553.434 li
535.422 553.387 li
535.703 553.344 li
536.27 553.25 li
537.398 553.07 li
537.469 553.062 li
537.68 553.027 li
537.961 552.984 li
538.527 552.895 li
539.656 552.719 li
539.734 552.707 li
539.809 552.695 li
539.965 552.672 li
540.27 552.621 li
540.883 552.527 li
540.957 552.516 li
541.035 552.504 li
541.492 552.434 li
542.105 552.34 li
542.184 552.328 li
542.258 552.32 li
542.41 552.297 li
542.488 552.285 li
542.563 552.273 li
542.719 552.25 li
542.793 552.238 li
542.871 552.227 li
542.945 552.215 li
543.102 552.191 li
543.16 552.184 li
@
543.309 546.324 mo
543.328 546.184 li
543.406 545.68 li
543.48 545.176 li
543.637 544.164 li
543.941 542.137 li
544.555 538.031 li
544.703 537.016 li
544.855 535.996 li
545.152 533.945 li
545.754 529.801 li
546.957 521.352 li
549.359 503.781 li
553.844 468.629 li
558.707 427.055 li
563.246 385.012 li
563.387 383.676 li
563.523 382.336 li
563.801 379.645 li
564.359 374.234 li
565.473 363.27 li
565.539 362.578 li
565.609 361.887 li
565.75 360.5 li
566.027 357.719 li
566.582 352.121 li
567.695 340.789 li
567.773 340.016 li
567.996 337.684 li
568.301 334.566 li
568.902 328.285 li
568.98 327.496 li
569.055 326.707 li
569.203 325.125 li
569.508 321.953 li
569.582 321.156 li
569.656 320.363 li
569.809 318.766 li
570.109 315.566 li
570.184 314.766 li
570.262 313.961 li
570.41 312.352 li
570.488 311.547 li
570.496 311.445 li
@
570.645 345.336 mo
570.715 345.02 li
570.863 344.34 li
571.016 343.656 li
571.316 342.289 li
571.391 341.945 li
571.469 341.602 li
571.617 340.91 li
571.922 339.527 li
572.523 336.734 li
572.805 335.422 li
573.086 334.102 li
573.652 331.441 li
574.777 326.043 li
577.031 314.926 li
581.914 289.367 li
581.988 288.957 li
582.063 288.551 li
582.211 287.734 li
582.512 286.094 li
583.109 282.789 li
584.309 276.094 li
584.383 275.668 li
584.461 275.246 li
584.609 274.398 li
584.91 272.699 li
585.508 269.277 li
586.707 262.34 li
586.777 261.93 li
586.848 261.523 li
586.984 260.703 li
587.266 259.062 li
587.824 255.762 li
587.965 254.934 li
588.105 254.102 li
588.383 252.434 li
588.664 250.762 li
588.73 250.344 li
588.801 249.922 li
588.941 249.082 li
589.082 248.238 li
589.137 247.898 li
@
589.285 256.973 mo
589.359 256.758 li
589.5 256.371 li
589.641 255.98 li
589.781 255.586 li
590.059 254.801 li
590.199 254.41 li
590.34 254.016 li
590.617 253.223 li
591.176 251.629 li
591.254 251.414 li
591.328 251.195 li
591.48 250.762 li
591.785 249.887 li
592.391 248.133 li
593.602 244.57 li
596.027 237.273 li
596.098 237.059 li
596.168 236.84 li
596.309 236.406 li
596.594 235.535 li
597.16 233.785 li
598.289 230.242 li
598.43 229.797 li
598.574 229.348 li
598.855 228.453 li
599.422 226.648 li
600.555 223 li
600.621 222.777 li
600.691 222.551 li
600.832 222.102 li
601.109 221.195 li
601.664 219.375 li
601.73 219.148 li
601.801 218.918 li
601.941 218.461 li
602.219 217.543 li
602.773 215.699 li
602.84 215.469 li
602.91 215.238 li
603.051 214.773 li
603.117 214.543 li
603.188 214.309 li
603.328 213.844 li
603.395 213.609 li
603.465 213.379 li
603.605 212.91 li
603.672 212.676 li
603.742 212.445 li
603.785 212.305 li
@
603.93 214.48 mo
604.02 214.305 li
604.16 214.031 li
604.438 213.48 li
604.992 212.371 li
609.805 202.441 li
610.086 201.848 li
610.93 200.043 li
612.051 197.617 li
612.191 197.312 li
612.332 197.004 li
612.613 196.391 li
613.176 195.156 li
614.297 192.668 li
614.375 192.496 li
614.449 192.328 li
614.602 191.988 li
614.906 191.305 li
614.984 191.133 li
615.059 190.965 li
615.516 189.934 li
615.59 189.762 li
615.668 189.59 li
615.82 189.246 li
615.895 189.07 li
615.973 188.898 li
616.047 188.727 li
616.125 188.555 li
616.18 188.43 li
@
616.324 189.094 mo
616.352 189.051 li
616.43 188.937 li
616.504 188.82 li
616.582 188.703 li
616.734 188.473 li
619.168 184.707 li
623.715 177.418 li
627.109 171.762 li
@
627.254 171.973 mo
633.008 164.73 li
636.996 159.484 li
@
637.145 159.527 mo
642.414 154.031 li
646.105 150.043 li
@
646.25 150.016 mo
651.695 145.191 li
654.602 142.531 li
@
654.75 142.48 mo
661.086 137.609 li
662.609 136.406 li
@
662.754 136.344 mo
670.211 131.305 li
@
670.355 131.234 mo
674.855 128.566 li
677.477 126.98 li
@
677.621 126.914 mo
684.457 123.266 li
@
684.602 123.203 mo
691.191 120.039 li
@
691.34 119.977 mo
697.719 117.203 li
@
697.867 117.145 mo
703.254 115.016 li
704.066 114.691 li
@
704.211 114.637 mo
710.254 112.445 li
@
710.402 112.395 mo
716.309 110.426 li
@
716.453 110.379 mo
721.957 108.684 li
722.242 108.598 li
@
722.391 108.551 mo
728.078 106.93 li
@
728.223 106.887 mo
733.824 105.402 li
@
733.969 105.359 mo
739.496 103.992 li
@
739.641 103.953 mo
745.105 102.687 li
@
745.25 102.652 mo
749.91 101.637 li
750.664 101.473 li
@
750.813 101.437 mo
756.188 100.336 li
@
756.332 100.301 mo
761.68 99.266 li
@
761.824 99.234 mo
767.152 98.254 li
@
767.297 98.223 mo
772.617 97.293 li
@
772.766 97.262 mo
777.918 96.402 li
778.086 96.375 li
@
778.23 96.348 mo
783.566 95.492 li
@
783.711 95.465 mo
789.07 94.645 li
@
789.219 94.617 mo
794.613 93.82 li
@
794.758 93.793 mo
800.199 93.016 li
@
800.344 92.988 mo
805.848 92.223 li
@
805.996 92.199 mo
810.699 91.562 li
811.578 91.445 li
@
811.723 91.418 mo
817.398 90.668 li
@
817.543 90.645 mo
823.332 89.891 li
@
823.477 89.867 mo
829.371 89.109 li
829.402 89.105 li
@
829.547 89.082 mo
835.637 88.309 li
@
835.781 88.285 mo
842.066 87.492 li
@
842.215 87.465 mo
848.016 86.734 li
848.734 86.645 li
@
848.883 86.617 mo
855.695 85.758 li
@
855.84 85.73 mo
861.824 84.965 li
863.012 84.82 li
@
863.156 84.789 mo
870.781 83.809 li
@
870.926 83.777 mo
875.996 83.105 li
879.141 82.703 li
@
879.285 82.668 mo
885 81.891 li
888.293 81.465 li
@
888.438 81.422 mo
894.344 80.59 li
898.594 80.031 li
@
898.738 79.973 mo
904.031 79.191 li
904.102 79.18 li
904.172 79.172 li
904.594 79.113 li
905.152 79.035 li
906.273 78.879 li
906.34 78.871 li
906.41 78.859 li
906.551 78.84 li
906.832 78.805 li
907.391 78.727 li
908.512 78.578 li
908.586 78.57 li
908.664 78.559 li
908.813 78.539 li
909.117 78.5 li
909.191 78.488 li
909.27 78.48 li
909.422 78.461 li
909.723 78.422 li
909.801 78.41 li
909.875 78.402 li
910.027 78.383 li
910.102 78.371 li
910.18 78.363 li
910.332 78.344 li
910.406 78.332 li
910.484 78.324 li
910.559 78.312 li
910.633 78.305 li
910.711 78.297 li
910.723 78.293 li
@
910.871 78.187 mo
910.938 78.176 li
913.367 77.785 li
917.898 77.102 li
922.34 76.492 li
922.418 76.484 li
922.492 76.473 li
922.645 76.453 li
922.945 76.414 li
923.547 76.34 li
923.621 76.328 li
923.699 76.32 li
923.848 76.301 li
924.148 76.262 li
924.754 76.187 li
924.828 76.18 li
924.902 76.168 li
925.055 76.152 li
925.355 76.113 li
925.504 76.098 li
925.656 76.078 li
925.957 76.043 li
926.031 76.035 li
926.109 76.023 li
926.258 76.008 li
926.336 75.996 li
926.41 75.988 li
926.457 75.984 li
@
926.602 75.945 mo
926.711 75.918 li
926.859 75.879 li
927.164 75.805 li
927.234 75.785 li
927.305 75.77 li
927.727 75.664 li
928.289 75.527 li
929.41 75.262 li
931.66 74.754 li
936.539 73.77 li
936.613 73.754 li
936.688 73.742 li
936.836 73.715 li
937.137 73.66 li
937.734 73.551 li
938.93 73.344 li
941.324 72.957 li
941.395 72.945 li
941.465 72.937 li
941.602 72.914 li
941.883 72.871 li
942.441 72.789 li
943.555 72.629 li
943.625 72.621 li
943.695 72.609 li
943.836 72.594 li
944.113 72.555 li
944.672 72.48 li
945.789 72.336 li
945.863 72.328 li
945.941 72.32 li
946.09 72.301 li
946.395 72.262 li
947 72.191 li
948.211 72.055 li
948.359 72.039 li
948.816 71.992 li
949.422 71.93 li
950.629 71.816 li
950.703 71.809 li
950.773 71.801 li
951.195 71.766 li
951.762 71.715 li
952.891 71.625 li
952.961 71.617 li
953.031 71.613 li
953.172 71.602 li
953.457 71.582 li
954.02 71.543 li
955.152 71.469 li
955.227 71.461 li
955.305 71.457 li
955.457 71.449 li
955.762 71.43 li
956.375 71.395 li
956.453 71.391 li
956.527 71.387 li
956.68 71.379 li
956.988 71.363 li
957.598 71.336 li
957.754 71.328 li
957.906 71.32 li
958.211 71.309 li
958.824 71.285 li
958.898 71.281 li
958.977 71.277 li
959.129 71.273 li
959.434 71.262 li
960.047 71.242 li
960.121 71.238 li
960.191 71.238 li
960.625 71.227 li
960.695 71.223 li
960.766 71.223 li
961.199 71.211 li
961.27 71.211 li
961.344 71.207 li
961.488 71.207 li
961.773 71.199 li
961.918 71.199 li
962.063 71.195 li
962.352 71.191 li
962.422 71.187 li
962.637 71.187 li
962.711 71.184 li
963 71.184 li
963.07 71.18 li
963.359 71.18 li
963.504 71.176 li
964.148 71.176 li
964.223 71.172 li
964.652 71.172 li
@
2.5 lw
0 lc
36.031 123.02 mo
36.031 119.012 li
.749721 .679194 .670497 .901457 cmyk
@
65.594 123.02 mo
65.594 120.613 li
@
95.152 123.02 mo
95.152 120.613 li
@
124.711 123.02 mo
124.711 120.613 li
@
154.27 123.02 mo
154.27 120.613 li
@
183.828 123.02 mo
183.828 119.012 li
@
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2.043 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /FAAAAA+TimesNewRomanPSMT
Type42DictBegin
[<00010000000a000a000a000a637674201d6402d7000000ac000010846670
676d6d591b530000113000000a59676c796631752ce700002bf800000d6c
68656164ec6c40fe00001b8c0000003668686561134d082300001bc40000
0024686d74782872055e00001be80000002c6c6f6361000057bc00001c14
000000306d61787006d308b500001c440000002070726570b33292910000
1c6400000f9367646972000000000000000000000000058e0000054c001f
054c001c0394001b0000ffe10000ffe40000ffe8fe4afffc056b0023fe6a
ffe00313000000ad000000ad0000000000250096009f002400f0013100c2
00c0004a00a6004100500094004700cf00af000e007901cb000400230044
00a80025011f0002004600170105009900d9005c007200e500e00028004b
00de011200240045007000160039ffe90016004b0088ffb900d9000a0043
00ae00ba016c0153002f00430048022c012b0025008fffc000170028ffcd
ffd80025009d00e50124ffb10048009d00e600110027007f00910012006a
00cafffc00000024006200a7017c01e900210060008b0434048aff6b003b
00b500d5014bff6b004d007905d809b5006c009100a3011701c0ffdfffe7
00be04010065007f00820088009900b200c0022e034305a000200026003d
004e00610065007b00d9011301310340ff27ff42ff99004e00a700f2022b
02c603070011002b0049005f008d00a100af00d600e400f5010b0135019d
01ab01ab01d101ee05d80000004b0075007a0080009d00a600a700ac00b9
013101310217021700020017002900550080008f00a500b200b300d0014b
015901c001c103a50530fe3fff14ff15ffe7ffff002a00580099009f00c1
00e400f40130015901ab01ab03220374041e04740532fd81004d0064009c
00d000d100d600de00e500f500f8012a012a01e1027e027fff57ffa8ffe5
00000008001f00380051005a006f0076007700a200c000c200c400f101fb
0209027e02cf04c5057a05f0ff92001200260042004b004f005100530064
008b00ae00b200b800b800d600f50111012001310138014e01520167018f
019601b801d901d902060221027102ea03b003cb03dc04360505ff3a0012
0016001e001f002300570068006c007e0088009200a500a800c500c90115
0126012d013001d601d901f6023b0244024402a302cf02de0385038f04fc
0586fee0feebfefbff8a0007004400470058007500aa00e400ef01160120
0129016a017301e3027e029002b4030e0310032303350341035403590388
039403c803ce047204ab04da0549056105ab0761fe6efed1ff4bff840000
00010006001e0027002c0034003700620066006a006b006c007000700072
007c0081008a008e0091009200a000ab00b800bf00c900d500dd00ec00f4
0100012101300169016a016d017c0185018e018e019901ac01c101c501c9
01e101f601f601f60222022202280236023f024302460267028502850294
02d002d602e8031c0363037f03800380039e03b603d90400040404ff0532
05320548058b05a706cb07280748076208ccfcedfd2afd59fddefe00fe1a
fe5bfe96fec1fee7ff56ff7900010025002d002e007c00870091009900a1
00a500a500aa00af00b600c600cc00d700dd00ec00f20102010501170118
0123012a012c0131013f014701490149014d01510151015501550157015a
015a0161016201680168017f0180018201830184018d0195019501950198
019901a501a901b601b601b701ba01ba01d501df01e601ea01f202000200
0203021702250227022f0239024302430247024f025202520267026f026f
027002720276027e02a702b302b902d603130325032d03610371039903ae
03c203d403f90402042c042f043c04560467048304cf04d104d804fb051f
05450568059e05c2061b06340655066a069806af06e806fc070607500762
077c07d407ff082500ad00c700aa00b5000000000000000000000000002f
06cf01730514047802df009c0018037005870155002500060254036c038e
03d2056601f0032001da018a0369036bffa3034602f8036f015602bf0122
031f053a0366008c00ff01ab02e102f402e70415015402e90128049101b7
026f034302060000000005d30415048305e8000002d7003a027d01c002c5
03830383ffbd003a059e01df059e02d1002004e0021300df01c001870297
000000ce0269028b0058043405fb0069015a01a905780182013e0288012a
03d4049e00e5032302f301f00196007a00cd014a0424025e023901ab00cf
00fd011e00ed017100700195004001bb01dd01b8000101a803a7014c020c
018d01b0020d0137010000cd032101d4030a005900000000012602150150
02f0025503bc06d00335010100d000d2007a01030130007c000000000000
000000fe006e006600940227002b0045004d00d3013200180097004100f4
febcffe9001605d8058b009100a1032c00520030005d02cb003a009200e5
00e500580086003200ba0099008800300298007cff8001640028004d0065
000200b8016a002f010b001100170100007f00040016022200a6005f0000
00f8000a00ca0043004b01ee0077012000f401c00028045f0000008c0445
00c20060007b008b008b0064005d00c2009c009206b505d3004f01170000
0420fe9e00cc00dc005e004600e30032001a003c0091005a00a1042c0041
002000490071009c009cfe4800400040008600cb0102007d003a003e006a
0050044800290096ff6a0097006900e0004c001b00c90069ff970043ffbd
0052ff83ff8b005fffa1ff5c00670053ffa8002a0076ffb2003600870559
0256052b043400de00c901c4004800db018b00b3004800da011601250118
00ea00ea00ae0000003e05bb008a04d70053003fff8cffd5001500280022
00990062004a00e4006d00ee00e5004803c00033fe4e02b1ff4603700079
05df0051ffa7ff1f010a0068ff6c004f00bc00a5070500ab0080001e05a5
0025008b04660230006900290016012f0080005c059f03d703f104700000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000160016001700180018001a001b00210029002a002a002c002d002e
002f003200340036003700380039003a003b003c003d003e004200460046
004a004c004d004f004f00530053005500570059005c005c005d005d005e
005f0061006400650067006800690069006b006e006f0071007600760077
0077007d007e007f008000810082008600870087008a008d008e00960096
00970097009c00a000a200a300a600ac00b300b300b600b800b900be00bf
00c100c200c400c500c600c700ca00ca00cb00cc00cc00ce00d100d200d3
00d700da00db00dc00de00df00e000e000e300e640578574737271706f6e
6d6c6b6a6968676665625d55544f4e403f3e3d3c3b3a3938373635343332
31302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817161413
1211100f0e0d0c0b0a090807060504030201002c4523466020b02660b004
262348482d2c452346236120b02661b004262348482d2c45234660b02061
20b04660b004262348482d2c4523462361b0206020b02661b02061b00426
2348482d2c45234660b0406120b06660b004262348482d2c4523462361b0
406020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0
cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920b0
9051582320b00d44235921212d2c20204518684420b001602045b0467668
8a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b017
2370b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b0
1923442d2c2045b00325456164b050515845441b2121592d2cb001436323
62b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c
2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361
592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb012
43588745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720
b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2cb0022546
608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b00325
45b019234445b01a23444565234520b00325606a20b009234223688a6a60
6120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b03f1b23
5961441cb114008a5279b31940201945208a54582321b03f1b235961442d
2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c
0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b52
5845441b2121592d2c0120b003252349b04060b0206320b000525823b002
253823b002256538008a63381b212121212159012d2c4bb06451584569b0
0943608a103a1b212110592d2c01b005251023208af500b0016023edec2d
2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c
20b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a
2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802b023701020b8
02b04520b0005058b00161593a2f182d2c21210c6423648bb84000622d2c
21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c051
580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb84000
626023212d2cb4000100000015b00826b00826b00826b008260f10161345
683ab001162d2cb4000100000015b00826b00826b00826b008260f101613
4568653ab001162d2c4b53234b515a5820458a60441b2121592d2c4b5458
20458a60441b2121592d2c4b53234b515a58381b2121592d2c4b5458381b
2121592d2c014b53234b515ab00225b00425b006254923451869525a58b0
0225b00225b00525462345696048592121212d2cb0134358031b02592d2c
b0134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c58
0cb00425b00425060c6423646164b807085158b00425b00425012046b010
60482046b0106048590a21211b2121592d2cb012435c580cb00425b00425
060c6423646164b807085158b00425b00425012046b8fff060482046b8ff
f06048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b
53234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b21
21592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b212159
2d2c462346608a8a462320468a608a61b8ff8062232010238ab903580358
8a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2c23
20b000508a8a64b10003255458b0401bb10103255458b037438b59b04f2b
5923b0622b2321235865592d2cb13a000c215460432d2cb1020042b12301
8851b1400188535a58b910000020885458b202010243604259b124018851
58b920000040885458b2020202436042b12401885458b202200243604200
4b014b5258b2020802436042591bb940000080885458b202040243604259
b94000008063b80100885458b202080243604259b94000010063b8020088
5458b202100243604259b12601885158b94000020063b80400885458b202
400243604259b94000040063b80800885458b202800243604259b1280188
5158b94000080063b81000885458ba000201000002436042595959595959
59b10002435458400a37403a403b403e023f021bb10102435458b237403a
ba0100003b0100b33e013f011bb18002435258b237403ab80180b13b401b
b901000002435258b237403aba0180003b01401bb901800002435258b237
403ab80200b13b401bb237403aba0100003b0100595959b9400000808855
b94000020063b8040088555a58b33e003f011bb33e003f01595959424242
42422d2cb0024354584b53234b515a58381b2121591b21212121592d2c01
2d2cb0022563b0206066b00225b82000626023622d2c234ab1024e2b2d2c
234ab1014e2b2d2c238a4a234564b0022564b002256164b0354352582120
6459b1024e2b23b000505865592d2c238a4a234564b0022564b002256164
b03543525821206459b1014e2b23b000505865592d2c20b003254ab1024e
2b8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b003258ab0672b
8a103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003254660b0
04252eb00425b00425b0042620b000505821b06a1bb06c592bb0032546b0
0325466061b08062208a2010233a232010233a2d2cb0032547b003254760
b0052547b0806361b00225b00625496323b005254ab080632058621b2159
b0042646608a468a4660b02063612d2cb00426b00425b00425b00426b06e
2b208a2010233a232010233a2d2c2320b001545821b00225b1024e2bb080
5020605920606020b001515821211b20b005515821206661b0402361b100
032550b00325b00325505a5820b00325618a535821b000591b21591bb007
54582066616523211b2121b000595959b1024e2b2d2cb00225b004254ab0
005358b0001b8a8a238ab00159b004254620666120b00526b0062649b005
26b00526b0702b236165b02060206661b02061652d2cb0022546208a20b0
00505821b1024e2b1b452321596165b00225103b2d2cb0042620b8020062
20b80200638a236120b05d602bb00525118a128a20398a58ba005d100000
04266356602b23212010204620b1024e2b23611b2321208a201049b1024e
2b593b2d2cba005d10000009256356602bb00525b00525b00526b06d2bb1
5d0725602bb00525b00525b00525b00525b06f2bba005d10000008266356
602b20b0005258b0502bb00525b00525b00725b00725b00525b0712bb002
1738b00052b00225b001525a58b00425b0062549b00325b00525496020b0
405258211bb000525820b0025458b00425b00425b00725b0072549b00217
381bb00425b00425b00425b0062549b0021738595959595921212121212d
2cb12501885058b94000020063b8040088545cb0134b525b1bb001592d00
00000001000000070000a677a6555f0f3cf50819080000000000a2e31dc2
00000000d684d860fb74fd8c105e08510000000900010001000000000001
00000721fe4500571000fb74f9d2105e0001000000000000000000000000
0000000b0639011c040000f00400002c0400005304000020040000620400
00580400004a0200006e023900b002000091000000000000009800000198
00000398000005a8000006e8000008a400000a5000000ba400000c5c0000
0d0400000d6c00010000000b02b5003c00d1000700020010004000860000
05e904eb00050002410a005403ef02ad001d001f03ee03ed003c001f03ed
b2061d1fb803ecb3032a1f3f411503e4006003e9009f03e500df03e50004
001003e4001003e5003f03e5007003e400ff03e40005ffc003e1b3454532
40b803e1b32b2e3240b803e1b2282932b9ffc003e1b21a1c32bd03e102ac
0027001fffc003dfb2161b32b9ffc003deb2424232b9ffc003deb2363832
b9ffc003deb32a2d32df410a03de00ef03de000203de03df0028001fffc0
03dfb3282e32f0410d03df0001037e000f0101001f00a003dd00b003dd00
02004003dab32426329fbf03cc000103ca03c90064001fffc003c9b20d11
32410a03c703b70012001f03b603b50064001fffc003b5b30e1132004173
038d000100c0038d00d0038d00e0038d00f0038d0004006f03a7007f03a7
008f03a700af03a70004000f03a7001f03a7002f03a7004f03a7000403ab
03ab00ef03a50001000f03a5002f03a5006f03a5008f03a50004005403aa
0001006b03aa000103a8036a0022001f038c03940015001f038b03930015
001f03a40393001a001f03a20394001e001f03a10393001e001f039f0394
001e001f039b0394001a001f039a0393001e001f039903940016001f0398
03940016001f03970393001b001f03960394001b001f03950393001b001f
03760375001a001f03740375001a001f03a00373b21e1f10411e03930020
039300300393000300200394003003940040039400030000039400010383
036c001e001f03b1036c0032001f036d036c0032001fffc0037db2212332
b9ffc0037db3171932a0410a037d00b0037d00c0037d00d0037d0004ffc0
037cb2212332b9ffc0037cb3171932a0412d037c00b0037c00c0037c00d0
037c000400300373004003730002000003730010037300200373000300e0
037300f00373000200b0037300c0037300d0037300030084037300900373
00a0037300030377036a0029001f0389036ab2281f40b80367b33940323f
bb0366000100400366b3191d328fbb0366000100400366b3090a3240b803
66b3090e3240b80366b3090f323fbb0365000100400365b3090c3240b803
65b31a1d3240b80365b3090e326b410e0363007b03630002001403630024
0363003403630044036300040363b2242f1fba034e006d0800400e1f7f02
7f037f047f050430440112bf033200500800001f0012032d003c0800b61f
5f3c013785a0418503620001000003620010036200700362009003620004
00f0035f00010020035e0020035f0030035f0040035e00040000035e0000
035f0010035f00d0035e00e0035f00050010030f0020030f0030030f00d0
030f00e0030f00050000030f0010030f0050030f0060030f0070030f00d0
030f00060000030f0010030f0020030f0030030f00e0030f00f0030f0006
030f00270000030e0030030e000200e0030e00f0030e0002030e004a00e0
030d00f0030d0002030d002700d002fc0001001002fc002002fc005002fc
000300d002fc00e002fc0002000002fc001002fc002002fc003002fc0050
02fc006002fc000600e002fc00f002fc0002002002fc003002fc004002fc
000302fc402c27c02901b02901a02901902901403c3f413240223f413212
1212858f4caf4cbf4ccf4c045f4c6f4c7f4c0337b8ffc0b3b22b3032b8ff
c0b3b2222532b8ffc0b5b2191a32370f413b02af0001005f02af009f02af
00df02af0003001f02af002f02af003f02af006f02af000402af02af001f
02ad002f02ad003f02ad004f02ad005f02ad000500df02ad0001000f02ad
001f02ad003f02ad005f02ad009f02ad0005005f02ad00df02ad0002000f
02ad001f02ad003f02ad0003004002acb23a334f414d02ac005f02ac009f
02ac0003002f02ac003f02ac0002000f02ac003f02ac00af02ac000300b0
02ac00e002ac0002004f02ac005f02ac00a002ac0003001f02ac002f02ac
003f02ac0003000f02ac0001000f035a0001000f035a001f035a003f035a
005f035a0070035a000500cf035700df03570002000f0357001f03570070
035700af03570004035a035a0357035702ad02ad02ac02ac032c400d3115
1f001616000000121108104110020c004a000d01a8004a000d0198004a00
0d0189004a000d013f004a000d0124400e4a0df64a0dbe4a0d864a0d274a
0dbe02280041000d01940041000d0121400b410db4410d4f410d29410d41
1002170021000d02150021000d02060021000d01eb0021000d014e002100
0d012c4014210df9210df3210df1210d9d210d71210d3d210d4110021c00
1f000d0214001f000d020b001f000d0196001f000d014a001f000d012640
0b1f0dc61f0d571f0d371f0d410d019e0141000d00420141000d001e0141
000d001b0141000d01f2b40f440f0009bb01f20044000d0201b23c291fb8
0200b23c291fb801ffb23c411fb801feb23c471fb801fdb23c9e1fb801fa
b23c931fbc01f9010f0101001f01f6b224e41f411501f401490401001f01
f301490401001f01f1014900ab001f01f001490067001f01a6003c012500
1f01a4b23c811f411501a3010f019a001f01a200220801001f01a1005004
01001f019f0149019a001f019d01490067001f019cb22c621fb8019bb22c
791fbc019a002c0101001f0197b22ce41fb80193b22c891fb80192b22c6c
1fb8018fb2259e1fb8016ab23c2a1f4111016700240201001f0163002502
ab001f014c010f019a001f01480149006c001f0147b22c891fb80145b22c
9e1fb80144b22c791fb80143b223311fb80127b23c811fbc012300500101
001f011fb223e41f4115011d0023019a001f011c00230801001f011b0025
0801001f010e010f0401001f010d00220401001f0108b223811fb80106b4
25e41ff73cbb0125001f00f5010fb29e1fe3bc01490156001f00e20149b2
ab1fd1b901490401b21fcf2cb80125b61fce23bb1fc524b80156b21fc02c
b80801b21fbf2cb80201b51fb124e41fb0b901490201b61faf2c671fad23
b80801b21fa523b80201400b1f9f3c2d1f9b235a1f9925b80201b21f812c
bc0401001f006d010f0156400b1f592c3e1f4c3cab1f4625b80101b21f40
3cb80125400a1f3a23721f393cab1f38b80149b3ab1f3124b80401b21f30
25b802abb61f2a24e41f2623b80156b41f35555537ba023500070175402c
0774076207560751073b0733072d0720071d071c071408120810080e080c
080a080808060804080208000814b8ffe0402b0000010014061000000100
060400000100041000000100100200000100020000000100000201080200
4a00b013034b024b534201b0124b004b5442b0372b4bb807ff52b0382b4b
b008505b58b101018e59b0382bb00288b801005458b801ffb101018e851b
b0124358b90001012f858d1bb90001017c858d5959014bb0c063004b6220
b0f65323b8010a515ab0052342180016763f183f123e113946443e113946
443e113946443e113946443e11394660443e11394660442b2b2b2b2b2b2b
2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b181d42b0964b5358b235aaaa
1d4259b0324b5358b235ffff1d42594bb04753205c58b90271026f4544b9
0270026f45445958b9017a0271455258b90271017a4459594bb04753205c
58b9002202704544b9003c027045445958b901b30022455258b9002201b3
4459594bb04c53205c58b9014900224544b1222245445958b901c2014945
5258b9014901c24459594bb06753205c58b9002402714544b90050027145
445958b9021e0024455258b90024021e4459594bb8020153205c58b9010f
00224544b1222245445958b90c00010f455258b9010f0c004459594bb01c
53205c58b125254544b12c2545445958b13725455258b125374459594bb0
ab53205c58b125254544b1232545445958b901590025455258b900250159
4459594bb8010153205c58b125254544b1282545445958b9020800254552
58b9002502084459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b01b361dc6463456523456023456560234560b0
8b766818b080622020b164dc4565234520b003266062636820b003266165
b0dc236544b064234420b161634565234520b003266062636820b0032661
65b063236544b0612344b10063455458b163406544b26140614523614459
b3a67f434b456523456023456560234560b089766818b080622020b1437f
4565234520b003266062636820b003266165b07f236544b043234420b1a6
4b4565234520b003266062636820b003266165b04b236544b0a62344b100
4b455458b14b406544b2a640a645236144594b5242014b5058b108004259
435c58b108004259b3020b0a124358601b2159421610703eb0124358b93b
21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d41
1bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01
a80400000b2b59b0102342b0112342002b00184569444569444569444569
4473737374737373737475752b7373747475184569447373742b4bb02153
4bb046515a58b03cb03c45b040604459012b2b2b2b75752b5840365f235f
255f285fa5046f236f256f286fa5044f234f254f284fa5043f233f253f28
3fa5042f232f252f282fa5041f231f251f281fa504757575757575594358
4010bf3ccf3c026f3c7f3c8f3c9f3caf3c0575755943584012bf22cf2202
5f226f227f228f229f22af2206757559435c58b6403c9f22ef220375592b
2b0174747474454473737474757545447345447374454473747573737373
732b5840246009700980090310092009300940095009056f037f038f0303
1f032f033f034f035f0305b8ffc0b2073a33b8ffc04046063a33900ba00b
b00bc00bd00b05b006c006d006e006f00605200630064006500660067006
80069006a006099006900702600b700b800b03100b200b300b400b500b05
1f070100757575737575752b2b757575751b40100706441f0b0a441f0302
441f0908441f2b2b2b2b592b752b435841220063032d00010003032d0013
032d0023032d0033032d0053032d000500c3032d00d3032d00e3032d00f3
032d00040083032d0093032d00a3032d00b3032d0004032d032d45186944
74747575592b4358b900180332b330353238b80332b361663238b80332b3
535a3238b80332b3454e3238b80332b33c413218b80332b23f330a410f03
32000100ba033200ca033200da033200ea033200fa033200050332033245
18694474752b2b2b2b2b2b597300732b012b7575002b2b2b74002b2b2b73
2b74012b002b2b017373737474732b2b00732b2b002b2b2b017374732b01
2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b00017375007373004569440073
730173742b2b2b2b2b732b00732b752b2b732b2b2b2b2b2b2b2b2b73742b
002b2b2b2b0000>
[3437 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 152 1 <000100f0000003060568001600b2b0852b58401440186018a018e0180400
1840180276008600020e411301690141000901a000220003016901410008
01a00023000001f8000f016900160141000001f2400e010f0f0209020105
09080c020300ba01f70003014940120e0e0f401135300f7f0f900fa00f04
0f1917ba022401e400182b4e10f45d2b3c4d10ede4103c003f3c3f3c1112
3901113900f5edfc01f52b2b3130005d01715d1bb4010507090ab803e2b2
6c090c00183f2b323f30315913253311141616171521353e023511342726
26232207f0014a21133c5cfe026038160a07251a254204c7a1fb8772381e
022525021d317a02dc942a201e1f0000>FAAAAA+TimesNewRomanPSMT AddT42Char 
1 0 0 <0002011c0000051c050000030007006cb0852b58b10201bb02be00060007
02bfb2000504b802beb403000a0704b802beb5010019080605bf02be0002
000301290009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c
10fc3cfd3c31301bb10004b807d7b36c000107b807d7b16c0100182f2b2f
2b3031592111211125211121011c0400fc2003c0fc400500fb002004c000
0000>FAAAAA+TimesNewRomanPSMT AddT42Char 
FAAAAA+TimesNewRomanPSMT /CharStrings get begin
/one 1 def
end
FAAAAA+TimesNewRomanPSMT /Encoding get
dup 49 /one put
pop
end
%ADOEndSubsetFont
/ATTRPI+TimesNewRomanPSMT /FAAAAA+TimesNewRomanPSMT findfont ct_VMDictPut
/ATTRPI+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one 206{/.notdef}rp]
ATTRPI+TimesNewRomanPSMT nf
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
176.828 152.019 mo
(1)sh
213.387 123.02 mo
213.387 120.613 li
@
242.945 123.02 mo
242.945 120.613 li
@
272.504 123.02 mo
272.504 120.613 li
@
302.063 123.02 mo
302.063 120.613 li
@
331.621 123.02 mo
331.621 119.012 li
@
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPI+TimesNewRomanPSMT gcheck setglobal} if
1 408 2 <0001002c000003ab0568001e0195b0852b58408207180b3917181c3d3418
401c3d3419401c3d340f1e161629073c074907a9070640205b045a085b17
5a186b08741174129c0b9d0e9911ac0bac0ec905c917c818d917d918e020
f904f9171515011d0419051b15191619171d180709170b180b1d34194719
89178f200718190202171a190c19060d031902050618171615140713040d
b8016840090940140c3f80090109b80333400c10051a8f19019f19af1902
19ba03330003018db301020c1eb8018d400d0006e24f135f136f137f1304
13b801074013400001001a002040208020036020a020022019bb01f90003
000d014040145f026f027f028f02bf02cf02df02ef020802191fba018e01
0100182b4e10f45d4de43ced4e105d71f65d4df45ded10ed003f3cedfd5d
713c3ffd71b10602435458b78f0901bf09cf0902005d71592be411121739
11123901111239390210b10602435458b47d198d1902005d590e3c871005
7dc40ec431300171725d005d012b2b2b002b1bb70d0d101e1e021009b808
1ab46c10050219b8081ab26c020c00183f2b3f2b12392f11392f30315901
032135000035342623220607233636333216151407060702072132363637
03ab5ffce0016101209e6e649f262519cf9ba5dd304aa6f93e01626c5746
1a0105fefb2501420198a981a67571b9c6d4906767a2b5fef03810312d00
0000>ATTRPI+TimesNewRomanPSMT AddT42Char 
ATTRPI+TimesNewRomanPSMT /CharStrings get begin
/two 2 def
end
ATTRPI+TimesNewRomanPSMT /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPI+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one /two 205{/.notdef}rp]
ATTRPI+TimesNewRomanPSMT nf
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
324.622 152.019 mo
(2)sh
361.18 123.02 mo
361.18 120.613 li
@
390.738 123.02 mo
390.738 120.613 li
@
420.301 123.02 mo
420.301 120.613 li
@
449.859 123.02 mo
449.859 120.613 li
@
479.418 123.02 mo
479.418 119.012 li
@
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPI+TimesNewRomanPSMT gcheck setglobal} if
1 920 3 <00010053ffe8035605680032017fb0852b58b9000affe0b20c3909b8ffc0
403c0c394109450a460b4b2204cf09012929382940346034cf34e034f70a
0700340141097f237a2eaa24b924ba2ec92edf23df25db2eea22e9250c49
0829b8018cb328281000b802e4b3d0300130b80334b5030510160116b801
9fb51d402b2f341db80143b3100d2928bb01680014000902e3400b502080
20029020a0200220b80333b3b00c010cb80190400b502d802d02902da02d
022db80333b55f077f070207b802e5400a403401a034c034023400b8013e
b74013bf1302131933ba011e01e800182b4e10f45d4de4105d71f65ded5d
71f45ded5d71e410f43c003fed2bed723fed5ded12392fed313043794036
2e2f1e260a0f04062221232124212521040605250e26260a2062012f042d
62011e0f206201210b2762010a092e063062011f0d1d62002b2b103c2b01
2b2b2b2b2b2a81818181005d01715d7200712b2b1bb309032829b803e2b5
6c2828100330b80813b46c0305101db807f5b26c100d00183f2b3f2b1239
2f2b12393031591336363332171615140716161514070621222635343633
321716161716333236353427262726262323353e02353426232207683ab1
84a35742ba7d807092feeb89632f21191a117817252a6697231a1f2b964e
204f9f4881609b68044a89956a4f5a949e31b67bb081a844271d2c08053f
060b9e6c4f4b381d28411e0a5e844f677fa6>ATTRPI+TimesNewRomanPSMT AddT42Char 
ATTRPI+TimesNewRomanPSMT /CharStrings get begin
/three 3 def
end
ATTRPI+TimesNewRomanPSMT /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPI+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one /two /three 204{/.notdef}rp]
ATTRPI+TimesNewRomanPSMT nf
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
472.417 152.019 mo
(3)sh
508.977 123.02 mo
508.977 120.613 li
@
538.535 123.02 mo
538.535 120.613 li
@
568.094 123.02 mo
568.094 120.613 li
@
597.652 123.02 mo
597.652 120.613 li
@
627.211 123.02 mo
627.211 119.012 li
@
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPI+TimesNewRomanPSMT gcheck setglobal} if
1 1448 4 <00020020000003b90568000a000d0103b0852b584028160d010f00450d40
0f03400f012a0c011507010206010309050601040c0b0d00040c0d04060c
0d0db8011c401207081407070808030407060c08001f0d010dbb019c0006
000b019f400d050106090806060805040c0c04bb0149000300080166400b
09090f03019f03af030203b801f74018013f0001001a000f01600fa00fe0
0f030f0640070107190eba018e010100182b4e10f4713c105d71f65d3c4d
f45d713c10e610fd3c003f3f392f103c103c10ed10fd723c113911390111
1239872e2b047d10c4011112390f0f0f313000725d015d71721bb50c0408
020d06b80817400a6c070a0d0d040805040c00183f3f12392f33332b3211
1239303159011523112311213501331123110103b9b6a5fdc202756ea5fe
2401f48efe9a0166800382fc8c02a1fd5f000000>ATTRPI+TimesNewRomanPSMT AddT42Char 
ATTRPI+TimesNewRomanPSMT /CharStrings get begin
/four 4 def
end
ATTRPI+TimesNewRomanPSMT /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPI+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one /two /three /four 203{/.notdef}rp]
ATTRPI+TimesNewRomanPSMT nf
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
620.211 152.019 mo
(4)sh
656.77 123.02 mo
656.77 120.613 li
@
686.328 123.02 mo
686.328 120.613 li
@
715.887 123.02 mo
715.887 120.613 li
@
745.445 123.02 mo
745.445 120.613 li
@
775.008 123.02 mo
775.008 119.012 li
@
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPI+TimesNewRomanPSMT gcheck setglobal} if
1 1768 5 <00010062ffe80379054c0021014db0852b584043a4040112591e691e7f05
7f067f1d8c048d1d07350235215503552057216b1c7605791c87028a1a8a
1ca303a809a023e0230f0023010f1011121315161708140d020303b8011c
401120211420030420211a1b1c030718040503b8019fb320202113ba01f9
00180313400c0d0d01e20002e22121000400ba013e001b0147b58007a007
0207b801f5400a40230140236023022316b801f9b61002a021012103b801
9f4009204010a01002101922ba019501e900182b4e10e45d4d10ed105d3c
10ed105d71f65dede4003f3c10ed10ed3feded12392fed01113911121739
87082e2b057d10c40011121739b10602435458400d720172027220820182
02822006005d59313001715d005d435c58400b6b046f12641e7005701d05
5d59015d1bb10320b80821b56c0303210d18b80800b46c0d0d2102b80821
b26c210400183f2b3f2b12392f2b30315901072107041716151406060706
23222635343633321617163332363534262726270103794efe685901099b
8557845173797a6f2e231a272f4b4d75b19e8b6dbc0104054caab6279e88
b86bb680273753321c2b102134b17f7bd53a2d07020f0000>ATTRPI+TimesNewRomanPSMT AddT42Char 
ATTRPI+TimesNewRomanPSMT /CharStrings get begin
/five 5 def
end
ATTRPI+TimesNewRomanPSMT /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPI+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one /two /three /four /five 202{/.notdef}rp]
ATTRPI+TimesNewRomanPSMT nf
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
768.006 152.019 mo
(5)sh
804.566 123.02 mo
804.566 120.613 li
@
834.125 123.02 mo
834.125 120.613 li
@
863.684 123.02 mo
863.684 120.613 li
@
893.242 123.02 mo
893.242 120.613 li
@
922.801 123.02 mo
922.801 119.012 li
@
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPI+TimesNewRomanPSMT gcheck setglobal} if
1 2212 6 <00020058ffe803b1056800180028012bb0852b58402a7509760a770e8209
d925e925060603017d037a047a168517043c082806050323192819060320
5f080108b80143b620260126260f01b8018db318000520b80106b30f0d01
00ba01400023010f40120b1a002a402a02402a602aa02ae02a042a19ba01
3e001b010f4012001310132013301340139013a01307131929ba011e0101
00182b4e10fc5d4dfde44e105d71f64dedf43c003fed3f3ced12392f5ded
721217390111121739b10602435458b40b061b0602005d5931304379402c
1c2509121d1c1e1c020611250d2625092362011f101b6200210e23620124
0a2662011c12206200220c206200002b2b2b012b2b2b2b2b2a8181005d01
715d1bb10826b807f5b56c08080f1801b807d8b46c18050f20b807e3b26c
0f0d00183f2b3f2b12392f2b30315901150e030736333216151407062322
272611341224363301061514161716333236353426232206039684a7a36b
2490918bcc677ccc8b61be92010ff86bfdcc12474633495789887d265705
68250d4fa2c78963e0b0aa8caa5cb3011db60148fe58fd44875360e1422f
a498abfa20000000>ATTRPI+TimesNewRomanPSMT AddT42Char 
ATTRPI+TimesNewRomanPSMT /CharStrings get begin
/six 6 def
end
ATTRPI+TimesNewRomanPSMT /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPI+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one /two /three /four /five /six 201{/.notdef}rp]
ATTRPI+TimesNewRomanPSMT nf
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
915.8 152.019 mo
(6)sh
952.359 123.02 mo
952.359 120.613 li
@
981.918 123.02 mo
981.918 120.613 li
@
16.688 123.02 mo
984 123.02 li
@
%ADOBeginSubsetFont: GAAAAA+CairoFont-1-0 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GAAAAA+CairoFont-1-0 def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 116 /t put
def
/FontBBox {-27 -15 761 694} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/t <1C60D8A8C9B85744188530F4B2CEC66D0776A55B777D565929675AC626AB
129E9079B5A4C0F6709207BB1475CB1CE11DE54F83A53DE848780C184A5B480E
8ACCF054347C33451A6448A3421DAFA76483B03A185CDC616B2AF4539F470D99
0AB736C0C4E9D090A4A43566B806B71362C4B02B16439544052BEA189D36157F
13569C> |-
/.notdef <1C60D8A8C9B6FC2D98924FA11F5B88270F6BB183AF46792D02CE24
A9D04AF4E7A738FF53BF0B0B18> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ATTRPJ+CairoFont-1-0 /GAAAAA+CairoFont-1-0 findfont ct_VMDictPut
/ATTRPJ+CairoFont-1-0*1 
[116{/.notdef}rp /t 139{/.notdef}rp]
ATTRPJ+CairoFont-1-0 nf
ATTRPJ+CairoFont-1-0*1 [28 0 0 -28 0 0 ]msf
992 132.519 mo
(t)sh
36.031 601.809 mo
38.438 601.809 li
@
36.031 564.98 mo
40.043 564.98 li
@
%ADOBeginSubsetFont: HAAAAA+Mathematica Initial
ct_T42Dict begin
-0.172 -1.691 2.496 2.434
 256 array 0 1 255 {1 index exch /.notdef put} for  /HAAAAA+Mathematica
Type42DictBegin
[<00010000000a000a000a000a637674203d60e95b000000ac0000003c6670
676d76647d76000000e800000d16676c7966e8fed19600000f340000014c
6865616415aaba3b00000e000000003668686561183c0b9600000e380000
0024686d747815fb023100000e5c000000186c6f6361014a00fc00000e74
0000000e6d617870013b0e4d00000e840000002070726570195002100000
0ea40000008d676469720000000000000000000000000000000000000000
00000000000000000000000000a500a500350035054c0000056f0398ffee
fe581388f254056affe5057103acffeefe581388f254b0002c20b0005558
455920204bb8000e514bb006535a58b0341bb028596066208a5558b00225
61b908000800636323621b2121b00059b000432344b20001004360422db0
012cb02060662db0022c206420b0c050b004265ab228010a43456345b006
455821b0032559525b582123211b8a5820b050505821b040591b20b03850
5821b038595920b1010a434563456164b028505821b1010a4345634520b0
30505821b030591b20b0c050582066208a8a6120b00a5058601b20b02050
5821b00a601b20b036505821b036601b605959591bb0012b595923b00050
586559592db0032c204520b00425616420b005435058b0052342b0062342
1b212159b001602db0042c232123212064b105624220b0062342b0064558
1bb1010a434563b1010a43b001604563b0032a2120b00643208a208ab001
2bb1300525b00426515860501b615259582359215920b0405358b0012b1b
21b0405923b000505865592db0052cb007432bb20002004360422db0062c
b00723422320b000234261b0026266b00163b00160b0052a2db0072c2020
4520b00b4363b804006220b0005058b040605966b001636044b001602db0
082cb2070b004345422a21b20001004360422db0092cb000432344b20001
004360422db00a2c20204520b0012b23b00043b004256020458a23612064
20b020505821b0001bb0305058b0201bb040595923b00050586559b00325
23614444b001602db00b2c20204520b0012b23b00043b004256020458a23
612064b0245058b0001bb0405923b00050586559b0032523614444b00160
2db00c2c20b0002342b20b0a034558211b2321592a212db00d2cb1020245
b06461442db00e2cb001602020b00c434ab000505820b00c234259b00d43
4ab000525820b00d2342592db00f2c20b0106266b0016320b80400638a23
61b00e4360208a6020b00e2342232db0102c4b5458b10464445924b00d65
23782db0112c4b51584b5358b1046444591b215924b0136523782db0122c
b1000f435558b10f0f43b0016142b00f2b59b00043b0022542b10c022542
b10d022542b001162320b003255058b101004360b00425428a8a208a2361
b00e2a2123b00161208a2361b00e2a211bb101004360b0022542b0022561
b00e2a2159b00c4347b00d434760b0026220b0005058b040605966b00163
20b00b4363b804006220b0005058b040605966b0016360b10000132344b0
0143b0003eb20101014360422db0132c00b10002455458b00f23422045b0
0b2342b00a23b00160422060b00161b5111101000e0042428a60b112062b
b0892b1b22592db0142cb100132b2db0152cb101132b2db0162cb102132b
2db0172cb103132b2db0182cb104132b2db0192cb105132b2db01a2cb106
132b2db01b2cb107132b2db01c2cb108132b2db01d2cb109132b2db0292c
2320b0106266b00163b006604b545823202eb0015d1b2121592db02a2c23
20b0106266b00163b016604b545823202eb001711b2121592db02b2c2320
b0106266b00163b026604b545823202eb001721b2121592db01e2c00b00d
2bb10002455458b00f23422045b00b2342b00a23b00160422060b00161b5
111101000e0042428a60b112062bb0892b1b22592db01f2cb1001e2b2db0
202cb1011e2b2db0212cb1021e2b2db0222cb1031e2b2db0232cb1041e2b
2db0242cb1051e2b2db0252cb1061e2b2db0262cb1071e2b2db0272cb108
1e2b2db0282cb1091e2b2db02c2c203cb001602db02d2c2060b011602043
23b0016043b0022561b00160b02c2a212db02e2cb02d2bb02d2a2db02f2c
2020472020b00b4363b804006220b0005058b040605966b0016360236138
23208a555820472020b00b4363b804006220b0005058b040605966b00163
602361381b21592db0302c00b10002455458b00116b02f2ab10501154558
30591b22592db0312c00b00d2bb10002455458b00116b02f2ab105011545
5830591b22592db0322c2035b001602db0332c00b0014563b804006220b0
005058b040605966b00163b0012bb00b4363b804006220b0005058b04060
5966b00163b0012bb00016b40000000000443e2338b13201152a212db034
2c203c204720b00b4363b804006220b0005058b040605966b0016360b000
4361382db0352c2e173c2db0362c203c204720b00b4363b804006220b000
5058b040605966b0016360b0004361b0014363382db0372cb10200162520
2e2047b0002342b00225498a8a47234723612058621b2159b0012342b236
010115142a2db0382cb00016b0102342b00425b004254723472361b00943
2b658a2e2320203c8a382db0392cb00016b0102342b00425b00425202e47
2347236120b0042342b009432b20b060505820b0405158b3022003201bb3
0226031a5942422320b00843208a234723472361234660b00443b0026220
b0005058b040605966b001636020b0012b208a8a6120b00243606423b003
4361645058b00243611bb003436059b00325b0026220b0005058b0406059
66b0016361232020b00426234661381b23b0084346b00225b00843472347
23616020b00443b0026220b0005058b040605966b00163602320b0012b23
b0044360b0012bb0052561b00525b0026220b0005058b040605966b00163
b004266120b00425606423b0032560645058211b232159232020b0042623
466138592db03a2cb00016b0102342202020b00526202e4723472361233c
382db03b2cb00016b010234220b0082342202020462347b0012b2361382d
b03c2cb00016b0102342b00325b002254723472361b00054582e203c2321
1bb00225b00225472347236120b00525b004254723472361b00625b00525
49b0022561b9080008006363232058621b215963b804006220b0005058b0
40605966b0016360232e2320203c8a382321592db03d2cb00016b0102342
20b00843202e47234723612060b0206066b0026220b0005058b040605966
b001632320203c8a382db03e2c23202e46b0022546b0104358501b525958
203c592eb12e01142b2db03f2c23202e46b0022546b0104358521b505958
203c592eb12e01142b2db0402c23202e46b0022546b0104358501b525958
203c5923202e46b0022546b0104358521b505958203c592eb12e01142b2d
b0412cb0382b23202e46b0022546b0104358501b525958203c592eb12e01
142b2db0422cb0392b8a20203cb00423428a3823202e46b0022546b01043
58501b525958203c592eb12e01142bb004432eb02e2b2db0432cb00016b0
0425b00426202e4723472361b009432b23203c202e2338b12e01142b2db0
442cb108042542b00016b00425b00425202e472347236120b0042342b009
432b20b060505820b0405158b3022003201bb30226031a594242232047b0
0443b0026220b0005058b040605966b001636020b0012b208a8a6120b002
43606423b0034361645058b00243611bb003436059b00325b0026220b000
5058b040605966b0016361b0022546613823203c23381b212020462347b0
012b2361382159b12e01142b2db0452cb100382b2eb12e01142b2db0462c
b100392b212320203cb00423422338b12e01142bb004432eb02e2b2db047
2cb000152047b0002342b20001011514132eb0342a2db0482cb000152047
b0002342b20001011514132eb0342a2db0492cb100011413b0352a2db04a
2cb0372a2db04b2cb000164523202e20468a236138b12e01142b2db04c2c
b0082342b04b2b2db04d2cb20000442b2db04e2cb20001442b2db04f2cb2
0100442b2db0502cb20101442b2db0512cb20000452b2db0522cb2000145
2b2db0532cb20100452b2db0542cb20101452b2db0552cb3000000412b2d
b0562cb3000100412b2db0572cb3010000412b2db0582cb3010100412b2d
b0592cb3000001412b2db05a2cb3000101412b2db05b2cb3010001412b2d
b05c2cb3010101412b2db05d2cb20000432b2db05e2cb20001432b2db05f
2cb20100432b2db0602cb20101432b2db0612cb20000462b2db0622cb200
01462b2db0632cb20100462b2db0642cb20101462b2db0652cb300000042
2b2db0662cb3000100422b2db0672cb3010000422b2db0682cb301010042
2b2db0692cb3000001422b2db06a2cb3000101422b2db06b2cb301000142
2b2db06c2cb3010101422b2db06d2cb1003a2b2eb12e01142b2db06e2cb1
003a2bb03e2b2db06f2cb1003a2bb03f2b2db0702cb00016b1003a2bb040
2b2db0712cb1013a2bb03e2b2db0722cb1013a2bb03f2b2db0732cb00016
b1013a2bb0402b2db0742cb1003b2b2eb12e01142b2db0752cb1003b2bb0
3e2b2db0762cb1003b2bb03f2b2db0772cb1003b2bb0402b2db0782cb101
3b2bb03e2b2db0792cb1013b2bb03f2b2db07a2cb1013b2bb0402b2db07b
2cb1003c2b2eb12e01142b2db07c2cb1003c2bb03e2b2db07d2cb1003c2b
b03f2b2db07e2cb1003c2bb0402b2db07f2cb1013c2bb03e2b2db0802cb1
013c2bb03f2b2db0812cb1013c2bb0402b2db0822cb1003d2b2eb12e0114
2b2db0832cb1003d2bb03e2b2db0842cb1003d2bb03f2b2db0852cb1003d
2bb0402b2db0862cb1013d2bb03e2b2db0872cb1013d2bb03f2b2db0882c
b1013d2bb0402b2db0892cb3090402034558211b232159422bb00865b003
245078b1050115455830592d000000010000000b4ccceaa194005f0f3cf5
0019080000000000cd4fbbcc00000000d68566bdfea0f27113fe137d0000
00030002000000000000000100000577fe4400241308fea0fa4313fe0001
000000000000000000000000000000060400008005270087029100660291
003d052900870289000000000018002a0052007a009200a6000000010000
00060106001a000000000002001e002f008b000000710d1600000000004b
b800c85258b101018e59b001b9080008006370b1000742b21901002ab100
0742b30c0801082ab1000742b3160601082ab1000842ba0340000100092a
b1000942ba0040000100092ab1030044b12401885158b0408858b1036444
b12601885158ba08800001044088635458b103004459595959b30e08010c
2ab801ff85b0048db1020044b305640600444400000000>
[333 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 48 1 <0001008701d504a0024800030006b3020001302b0121352104a0fbe70419
01d573000000>HAAAAA+Mathematica AddT42Char 
1 0 0 <00020080000003800666000300070008b50604010002302b331121112521
1121800300fd800200fe000666f99a800566>HAAAAA+Mathematica AddT42Char 
HAAAAA+Mathematica /CharStrings get begin
/hyphen 1 def
end
HAAAAA+Mathematica /Encoding get
dup 45 /hyphen put
pop
end
%ADOEndSubsetFont
/ATTRPK+Mathematica /HAAAAA+Mathematica findfont ct_VMDictPut
/ATTRPK+Mathematica*1 
[45{/.notdef}rp /hyphen 210{/.notdef}rp]
ATTRPK+Mathematica nf
ATTRPK+Mathematica*1 [28 0 0 -28 0 0 ]msf
0 574.479 mo
(-)sh
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
19.0399 574.479 mo
(6)sh
36.031 528.148 mo
38.438 528.148 li
@
36.031 491.32 mo
38.438 491.32 li
@
36.031 454.488 mo
38.438 454.488 li
@
36.031 417.66 mo
40.043 417.66 li
@
ATTRPK+Mathematica*1 [28 0 0 -28 0 0 ]msf
0 427.159 mo
(-)sh
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
19.0399 427.159 mo
(4)sh
36.031 380.828 mo
38.438 380.828 li
@
36.031 344 mo
38.438 344 li
@
36.031 307.168 mo
38.438 307.168 li
@
36.031 270.34 mo
40.043 270.34 li
@
ATTRPK+Mathematica*1 [28 0 0 -28 0 0 ]msf
0 279.839 mo
(-)sh
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
19.0399 279.839 mo
(2)sh
36.031 233.508 mo
38.438 233.508 li
@
36.031 196.68 mo
38.438 196.68 li
@
36.031 159.848 mo
38.438 159.848 li
@
36.031 123.02 mo
40.043 123.02 li
@
36.031 86.187 mo
38.438 86.187 li
@
36.031 49.359 mo
38.438 49.359 li
@
36.031 636.832 mo
36.031 39 li
@
%ADOBeginSubsetFont: IAAAAA+Mathematica-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (IAAAAA+Mathematica)
%%Title: (IAAAAA+Mathematica Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /IAAAAA+Mathematica def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-172 -1695 2499 2436} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 5 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B7A73DB6F0B6FAFA7BF3C28FD0A21D0FB47F32422EDAB3B2C
7C2F968214656> |
1 <001C60D8A8C9B7B5777C1DCD0783BD00ACEAA2213219B4061E1683FE4A2AA
C9642E220892B4C95FCB8CFA84D2B53DD1B4DFF1E17684C0895190A1DE4155B7
5A540EE4FE078A15329B6A7058F3BB99120307E148E85543A9BEA20DD9B8BB15
3BF8BFFD5D22C0E257B6A08A3F947201B37F88EAE8072AAA3C6E8C2CB6A56DA8
8C029970F075704CD96D334363F259D5B7BB5F0E331EBAAE71799066AD651412
A1CA609B662C6149512831E92EC3D76BA7B2F99F888CBF646CA64645FB5BA91B
EDFEAB9F56CD04F8EA95A7E82395722FDA3107F91F253F3F250EC9D443C04C80
1F76C61> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /IAAAAA+Mathematica-Identity-H /Identity-H 0 [/IAAAAA+Mathematica] ct_ComposeFont pop end end
%ADOEndSubsetFont
/ATTRPL+Mathematica /IAAAAA+Mathematica-Identity-H findfont ct_VMDictPut
ATTRPL+Mathematica [28 0 0 -28 0 0 ]msf
15.7979 26 mo
(\000\001)sh
%ADOBeginSubsetFont: HAAAAA+Mathematica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPK+Mathematica gcheck setglobal} if
1 84 2 <00010066fea40254055c00110006b30b0101302b01072427261134373637
3637170411101716025419fef26c5b664b82505017feba5a4dfec925abe2
c00130fec492703c3b23f7fdddfe9dd2b5000000>ATTRPK+Mathematica AddT42Char 
1 164 3 <0001003dfea4022b055c00110006b30c0401302b01100706052736373611
1025371617161716022b5b6bfef119a34e59febb165050834b650221fed0
c0e2ab256cb5d201630223f7233b3c7092c40000>ATTRPK+Mathematica AddT42Char 
ATTRPK+Mathematica /CharStrings get begin
/parenleft 2 def
/parenright 3 def
end
ATTRPK+Mathematica /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPK+Mathematica*1 
[40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 210{/.notdef}rp]
ATTRPK+Mathematica nf
ATTRPK+Mathematica*1 [28 0 0 -28 0 0 ]msf
30.302 26 mo
(\()sh
ATTRPJ+CairoFont-1-0*1 [28 0 0 -28 0 0 ]msf
39.2622 26 mo
(t)sh
ATTRPK+Mathematica*1 [28 0 0 -28 0 0 ]msf
47.242 26 mo
(\))sh
gsave
705 348 mo
766 348 li
766 357 li
705 357 li
cp
clp
2 lw
2 lc
706.918 352.488 mo
726.25 343.488 745.586 361.488 764.918 352.488 cv
0 .993378 1 0 cmyk
@
grestore
%ADOBeginSubsetFont: JAAAAA+TimesNewRomanPSMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (JAAAAA+TimesNewRomanPSMT)
%%Title: (JAAAAA+TimesNewRomanPSMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /JAAAAA+TimesNewRomanPSMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-568 -307 2046 1040} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 37 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 9 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB
222483BD74F8B> |
1 <001C60D8A8C9B7D8BE514ED6977CE9F9E5860FEBB6D8EBF5879FDED6C1E48
F6AFEEE7B65DB6C9D492058CAA103CB13A7A80B0015E85F272BB9775991CD975
56EC3CFB46A4E1606F006216EABEB711074247C72C159202F32CC7F5F403FAE5
8110685510DDB32C57700D5067C975D7063A496FE85C1E5> |
2 <001C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD44
16250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDAF
996A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA436
702294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B68
D9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |
3 <001C60D8A8C9B7A4C863955E4F5749FE977D607F58EA7D1AF0B41EC8BF9FE
68089FD00A89CACE33198B801108A780A6AA1F29128E41E454D4A06E0A891FD1
77B634264134370C7D9BDDAA47562E2B275E1C481220500FE527503962DB4612
CDA60D9126B315463076483F2CA6227A25336923AE3FE8A93BF1DA8DFB0D11ED
8A40709B9D4B0F9579D42F85D6BDA7B237B92A14ECDE0851AD680FF1D1F04316
68A5E34C4F9F0C37E561071300B96A628CE96DDB98E0A99ABDC21FB61160F706
07B00F5BB58A4EB4EAEFF5E6373CD4D505C42ABCF922A59DAB50FE620E0B5AA4
84C542B04099F6E2D> |
4 <001C60D8A8C9B784FA6F12CA3EA7CC4C70F49DD2CBFF9BB64AA9A8A936CF2
F060E35CC2B76C1A5E8DC3FBD23C9DD0C4C8C673D618D11BFCA2BEB0C6F4B9F4
7E2D02D393F50A5B872C253D5359DF950CE8AAE681B57238125F1E66F5DBBBE9
85436FBA0BD17D0D7445395958B03FE3611469D7BAB6C9DE5CA7BBCA47725908
80CFADE2E856493DB3C3867517120A9A54FA671007FE72324A13157EB78F4A28
2FE184FD43DD262F059FF0EA32FEB63DB346C52E30DDF3425DCDD4F855AE8726
C942B4187C9B113BE242F3C1F1AE0D54BBEC56DDE6AFD0E03ADD37D> |
5 <001C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2BE
AD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A1
5F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7FF
A0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA50131898
4A59E1CFFFD06EA629758085868D3F5F7204292> |
6 <001C60D8A8C9B7A73DDE03BEEA75B31F61E78B8C94AAF630ACAE1A607BD40
EB48302A40F17E763F71E8B5595B8EEEBB33C0827EEA0DE5370DD4C7A0924404
8D0DA814D6E79BAC2B8E456D2F119496FF35E5A13F4B8F71ECD895B10E20FBAC
666023D0941B5A0FF139CBD18745BC2892DD91EE541EAD2B54AF0839C3327F75
904A81A3805CFC7AF83735A7079B305271753A14327F3CB693ACCFE5C9D6A3B8
431B357819DFFAD81BD2A60573E4CA4C48EC0A5E07291768D829E6A70067C076
E94545FD4D8E2BB7431617263A47DB04F0B8630D6AB06FF2DD1B1F383A59D02D
F1C7730E7CC0F462D79552DFA> |
7 <001C60D8A8C9B6F715E83404444F2BBE501D5E5F9A1199BDF9FD39ED7B61B
D01D4EC81A201E287E0185024E97A00D6D38BA2036617705C08E1769674A4E3A
8B8F2277EE057E8C5049185BB84881ED5CCC495448A11FC11AA12F6936CB0D49
0E242C204CB3C716532E854588FA6B8A83D908E0ECD772A6EA4168149AEAAEE2
B3815DBF9E8FB0C9CB974F2D989E2EF771502F5D38394405221676AE4C6D0DEE
8095D4FD06EC4D685BD0DF6ECC5DC58B0955985E1F10347C9C713AB86640A354
88132735AE6010A4F09E997D85717A6FC33237F60A22C69F47F49DB0BDFD88E3
322ECF63CFC1A9AD0EA138BF4269D12A4DC7D0D1CCAF4B734193D130CF5DD7D3
37302D2716A14CFF32744967B17E53546080BA66892231964E4E4F9D0F2F523F
701C8> |
8 <001C60D8A8C9B784FA6F12CA3EA7CC491F9497438C7E5073F78A3CBE7FC25
6489C14E4F0D09E302FD739FE18CD3123B04470B48292CB813A9598EADE0968F
DF28B015221329D5209889AD34815E419E2F550C856A7FF98B1140910CD1E15C
7BE08430F6A98D40AF679F7A18BE9F14E79E9A051251996FE5B4185B94260904
2CE02EAE5B6A853560C2FB7A64008DADFD55B9BA45D93B5EB6A6BAFFF924A9E5
AD79A1664A329A8DA2CE534DCAE039C04206338F8B515E0F4DEFF3A1654D10AE
F0172E467A1223B22C7C0F1DA> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /JAAAAA+TimesNewRomanPSMT-Identity-H /Identity-H 0 [/JAAAAA+TimesNewRomanPSMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/ATTRPM+TimesNewRomanPSMT /JAAAAA+TimesNewRomanPSMT-Identity-H findfont ct_VMDictPut
ATTRPM+TimesNewRomanPSMT [28 0 0 -28 0 0 ]msf
779.918 356.489 mo
(\000\001\000\002\000\003\000\004\000\002\000\005\000\006\000\005\000\007\000\005\000\004\000\010\000\005)
[17.08 14 14.056 14.9801 14 19.4038 14 12.4038 21.5601 12.4038 14.9801 14.9801 
0 ]xsh
gsave
705 391 mo
766 391 li
766 399 li
705 399 li
cp
clp
2 lw
2 lc
706.918 395.09 mo
726.25 386.09 745.586 404.09 764.918 395.09 cv
@
grestore
%ADOBeginSubsetFont: JAAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/JAAAAA+TimesNewRomanPSMT 4 GetGlyphDirectory
9 <001C60D8A8C9B64EDFFBA6F0CF8A2CDA79A069460245F5373797A9E71DEA3
45031885496623E7C65FDB470FC6BFF7BE37B20FF363C43CAB08BA8E918FCBA9
DEB0021B12355971EB2945D0594E78D2EE4D593C49790304E106026BC9420971
58DDBF12F8B83C9752B02212C28957008FA70A685356583CB4C7D6F55B12AC73
99ECFE4B69C91B472A6132E65C9F7B697AE783582C9D65C392064A7C49C83B28
3409DD22AD16B7DD28B54D5FC454C> |
10 <001C60D8A8C9B7A73DD670F5272DD145294083C4293196A1DBA349EF195D
AADD76F8FA5D95CD31B7A1C2B32491F1D3BDEAF32234D0995EB67A2BEF06777B
5B8AB01E1FC457D70FEE563CF2C0C851F3CC8B137B00E8CC0DDAE3A128D9A231
9F3FF89B241236A311487E7B00ABDB18C5C11783A73226CB9112660CA2598816
9831DBD8D37F0570522652B666847FB24934B522403DA00EF77D9BF6494155BE
ACD6C4576905B10BBFDD62A70CAEE193F073806BE591E56E5DC8424D64A808D7
528EBE8928C7E8D537D6DCC6918CF06863B4A936B7CA4331A2F9> |
11 <001C60D8A8C9B66C0E626E146F358597F8A7F48980ED982BF7F83D6AF9CC
8EA3D48BF4117BA9E6ED662CD05945FB42398A0375D916AF509A39D337565DF8
E872BEAADA755190F51813DF2A32AFA34B9E0250684E9A457402BDFFD5024043
005F99CBD4E0125C789AF84EF14B91206180C6FD62EB698B0CC789531AC71BE2
9AC7A02BBA5E162BCB82B37831911AE1D8A0A1DA5EDC98A1CDD15C980790FC01
AFEE85F1AC72E92E8701641B4DA9E345694DFA41DB05C2> |
12 <001C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC55
0DEC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C
6B177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB
333E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385F
DB0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E
70BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A298
95DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B7
37B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE327
2EF1EF1464C3F0D45D7CBB8749AF571E09> |
!
end
end end
%ADOEndSubsetFont
ATTRPM+TimesNewRomanPSMT [28 0 0 -28 0 0 ]msf
779.918 399.089 mo
(\000\011\000\012\000\005\000\013\000\014)
[18.648 14 12.4038 17.6961 0 ]xsh
%ADOBeginSubsetFont: IAAAAA+Mathematica-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/IAAAAA+Mathematica 1 GetGlyphDirectory
2 <001C60D8A8C9B65B43E93A7471FACE65CA1C9EABC76195B6F4F694CEECFBC
4228DC68133DB2B43C18CEE4A95E4B6BA72423E3A6DFCA708D7F21B74439939B
D13283FDB9BB742C6FA18DB3CEBE23DB2D42394E8905197CA27AC67DCB5F7D1F
FB7CDEEC721949C8A281A448228A3B8C8FDCC2C31A95B20EFA3B73D892AC0365
B713B7713DC7C2333F85C86BB25C4449EB07E59415E48322A823D427F52C3932
A048C031E2B2142210D5165FBED396E74E6C13D398A9D53112CCDBDA2BBB7FB3
657F13506DDC4A631A1F8B045B3EFE6> |
!
end
end end
%ADOEndSubsetFont
ATTRPL+Mathematica [28 0 0 -28 0 0 ]msf
862.07 399.089 mo
(\000\002)sh
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPI+TimesNewRomanPSMT gcheck setglobal} if
1 2640 7 <0002004affe803b705680010002400dbb0852b58b2610820b80106b20505
15b80106b20d0d1ab8010f4012091a002640260240266026a026e0260426
11b8010f400e5f006f007f008f00a00005001925ba011e010100182b4e10
f45d4ded4e105d71f64ded003fed3fed31304379404c0124232422240206
02010301020607251c1b1d1b1e1b030613260f250b261819171902062104
1162001f061a6201140e116200160c1a620124012062011b082062011210
156200190a1562002b2b2b2b012b2b2b2b2a2b2b2b2a2b2a2a811bb10520
b807eab46c05050d15b807e9b26c0d0d00183f2b3f2b3031591334123736
333217161114020623222726371017163332363736113427262726232207
06024a8c745a609c7c9b88d362c2816dc445397136741e2e302439293a44
354834029ee8014f52419fc5feafecfeb695e5c1f7fee8b1956172ac0139
e89b7330213d53fe9c00>ATTRPI+TimesNewRomanPSMT AddT42Char 
ATTRPI+TimesNewRomanPSMT /CharStrings get begin
/zero 7 def
end
ATTRPI+TimesNewRomanPSMT /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPI+TimesNewRomanPSMT*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
201{/.notdef}rp]
ATTRPI+TimesNewRomanPSMT nf
ATTRPI+TimesNewRomanPSMT*1 [19.8799 0 0 -19.8799 0 0 ]msf
885.168 389.489 mo
(0)sh
gsave
705 434 mo
766 434 li
766 442 li
705 442 li
cp
clp
2 lw
2 lc
706.918 438.09 mo
726.25 429.09 745.586 447.09 764.918 438.09 cv
.817563 .0356756 1 .0030518 cmyk
@
grestore
ATTRPM+TimesNewRomanPSMT [28 0 0 -28 0 0 ]msf
779.918 442.089 mo
(\000\011\000\012\000\005\000\013\000\014)
[18.648 14 12.4038 17.6961 0 ]xsh
ATTRPL+Mathematica [28 0 0 -28 0 0 ]msf
862.07 442.089 mo
(\000\002)sh
ATTRPI+TimesNewRomanPSMT*1 [19.8799 0 0 -19.8799 0 0 ]msf
885.168 432.489 mo
(1)sh
476.398 474.832 mo
476.398 474.297 476.184 473.785 475.809 473.406 cv
475.43 473.027 474.918 472.816 474.383 472.816 cv
473.848 472.816 473.336 473.027 472.957 473.406 cv
472.582 473.785 472.367 474.297 472.367 474.832 cv
472.367 475.363 472.582 475.879 472.957 476.254 cv
473.336 476.633 473.848 476.844 474.383 476.844 cv
474.918 476.844 475.43 476.633 475.809 476.254 cv
476.184 475.879 476.398 475.363 476.398 474.832 cv
cp
1 .964599 0 .0167239 cmyk
ef
467.922 472.93 mo
467.922 472.395 467.711 471.883 467.332 471.504 cv
466.957 471.125 466.441 470.914 465.91 470.914 cv
465.375 470.914 464.863 471.125 464.484 471.504 cv
464.105 471.883 463.895 472.395 463.895 472.93 cv
463.895 473.461 464.105 473.973 464.484 474.352 cv
464.863 474.73 465.375 474.941 465.91 474.941 cv
466.441 474.941 466.957 474.73 467.332 474.352 cv
467.711 473.973 467.922 473.461 467.922 472.93 cv
cp
ef
459.473 470.922 mo
459.473 470.387 459.262 469.875 458.883 469.496 cv
458.504 469.117 457.992 468.906 457.457 468.906 cv
456.926 468.906 456.41 469.117 456.035 469.496 cv
455.656 469.875 455.445 470.387 455.445 470.922 cv
455.445 471.453 455.656 471.969 456.035 472.344 cv
456.41 472.723 456.926 472.934 457.457 472.934 cv
457.992 472.934 458.504 472.723 458.883 472.344 cv
459.262 471.969 459.473 471.453 459.473 470.922 cv
cp
ef
451.031 468.875 mo
451.031 468.344 450.82 467.832 450.441 467.453 cv
450.063 467.074 449.551 466.863 449.016 466.863 cv
448.48 466.863 447.969 467.074 447.594 467.453 cv
447.215 467.832 447.004 468.344 447.004 468.875 cv
447.004 469.41 447.215 469.922 447.594 470.301 cv
447.969 470.68 448.48 470.891 449.016 470.891 cv
449.551 470.891 450.063 470.68 450.441 470.301 cv
450.82 469.922 451.031 469.41 451.031 468.875 cv
cp
ef
442.594 466.82 mo
442.594 466.289 442.379 465.773 442.004 465.398 cv
441.625 465.02 441.113 464.809 440.578 464.809 cv
440.043 464.809 439.531 465.02 439.152 465.398 cv
438.777 465.773 438.563 466.289 438.563 466.82 cv
438.563 467.355 438.777 467.867 439.152 468.246 cv
439.531 468.625 440.043 468.836 440.578 468.836 cv
441.113 468.836 441.625 468.625 442.004 468.246 cv
442.379 467.867 442.594 467.355 442.594 466.82 cv
cp
ef
434.152 464.77 mo
434.152 464.238 433.941 463.723 433.563 463.348 cv
433.184 462.969 432.672 462.758 432.137 462.758 cv
431.605 462.758 431.09 462.969 430.715 463.348 cv
430.336 463.723 430.125 464.238 430.125 464.77 cv
430.125 465.305 430.336 465.816 430.715 466.195 cv
431.09 466.574 431.605 466.785 432.137 466.785 cv
432.672 466.785 433.184 466.574 433.563 466.195 cv
433.941 465.816 434.152 465.305 434.152 464.77 cv
cp
ef
425.707 462.734 mo
425.707 462.199 425.496 461.687 425.117 461.312 cv
424.742 460.934 424.23 460.719 423.695 460.719 cv
423.16 460.719 422.648 460.934 422.27 461.312 cv
421.891 461.687 421.68 462.199 421.68 462.734 cv
421.68 463.27 421.891 463.781 422.27 464.16 cv
422.648 464.539 423.16 464.75 423.695 464.75 cv
424.23 464.75 424.742 464.539 425.117 464.16 cv
425.496 463.781 425.707 463.27 425.707 462.734 cv
cp
ef
417.258 460.723 mo
417.258 460.187 417.047 459.676 416.668 459.301 cv
416.293 458.922 415.777 458.707 415.246 458.707 cv
414.711 458.707 414.199 458.922 413.82 459.301 cv
413.441 459.676 413.23 460.187 413.23 460.723 cv
413.23 461.258 413.441 461.77 413.82 462.148 cv
414.199 462.527 414.711 462.738 415.246 462.738 cv
415.777 462.738 416.293 462.527 416.668 462.148 cv
417.047 461.77 417.258 461.258 417.258 460.723 cv
cp
ef
408.801 458.742 mo
408.801 458.207 408.59 457.695 408.211 457.316 cv
407.836 456.941 407.324 456.727 406.789 456.727 cv
406.254 456.727 405.742 456.941 405.363 457.316 cv
404.984 457.695 404.773 458.207 404.773 458.742 cv
404.773 459.277 404.984 459.789 405.363 460.168 cv
405.742 460.543 406.254 460.758 406.789 460.758 cv
407.324 460.758 407.836 460.543 408.211 460.168 cv
408.59 459.789 408.801 459.277 408.801 458.742 cv
cp
ef
400.336 456.801 mo
400.336 456.266 400.125 455.754 399.746 455.375 cv
399.371 454.996 398.855 454.785 398.324 454.785 cv
397.789 454.785 397.277 454.996 396.898 455.375 cv
396.52 455.754 396.309 456.266 396.309 456.801 cv
396.309 457.332 396.52 457.848 396.898 458.223 cv
397.277 458.602 397.789 458.812 398.324 458.812 cv
398.855 458.812 399.371 458.602 399.746 458.223 cv
400.125 457.848 400.336 457.332 400.336 456.801 cv
cp
ef
391.863 454.898 mo
391.863 454.363 391.648 453.852 391.273 453.473 cv
390.895 453.098 390.383 452.883 389.848 452.883 cv
389.313 452.883 388.801 453.098 388.422 453.473 cv
388.047 453.852 387.832 454.363 387.832 454.898 cv
387.832 455.434 388.047 455.945 388.422 456.324 cv
388.801 456.699 389.313 456.914 389.848 456.914 cv
390.383 456.914 390.895 456.699 391.273 456.324 cv
391.648 455.945 391.863 455.434 391.863 454.898 cv
cp
ef
383.379 453.043 mo
383.379 452.512 383.164 451.996 382.789 451.621 cv
382.41 451.242 381.898 451.031 381.363 451.031 cv
380.828 451.031 380.316 451.242 379.938 451.621 cv
379.563 451.996 379.348 452.512 379.348 453.043 cv
379.348 453.578 379.563 454.09 379.938 454.469 cv
380.316 454.848 380.828 455.059 381.363 455.059 cv
381.898 455.059 382.41 454.848 382.789 454.469 cv
383.164 454.09 383.379 453.578 383.379 453.043 cv
cp
ef
374.879 451.242 mo
374.879 450.707 374.668 450.195 374.289 449.816 cv
373.914 449.441 373.402 449.227 372.867 449.227 cv
372.332 449.227 371.82 449.441 371.441 449.816 cv
371.063 450.195 370.852 450.707 370.852 451.242 cv
370.852 451.777 371.063 452.289 371.441 452.668 cv
371.82 453.043 372.332 453.258 372.867 453.258 cv
373.402 453.258 373.914 453.043 374.289 452.668 cv
374.668 452.289 374.879 451.777 374.879 451.242 cv
cp
ef
366.371 449.496 mo
366.371 448.961 366.16 448.449 365.781 448.07 cv
365.406 447.695 364.891 447.48 364.359 447.48 cv
363.824 447.48 363.313 447.695 362.934 448.07 cv
362.555 448.449 362.344 448.961 362.344 449.496 cv
362.344 450.031 362.555 450.543 362.934 450.922 cv
363.313 451.297 363.824 451.512 364.359 451.512 cv
364.891 451.512 365.406 451.297 365.781 450.922 cv
366.16 450.543 366.371 450.031 366.371 449.496 cv
cp
ef
357.852 447.809 mo
357.852 447.277 357.641 446.766 357.262 446.387 cv
356.883 446.008 356.371 445.797 355.836 445.797 cv
355.305 445.797 354.793 446.008 354.414 446.387 cv
354.035 446.766 353.824 447.277 353.824 447.809 cv
353.824 448.344 354.035 448.855 354.414 449.234 cv
354.793 449.613 355.305 449.824 355.836 449.824 cv
356.371 449.824 356.883 449.613 357.262 449.234 cv
357.641 448.855 357.852 448.344 357.852 447.809 cv
cp
ef
349.32 446.187 mo
349.32 445.652 349.109 445.141 348.73 444.762 cv
348.352 444.387 347.84 444.172 347.305 444.172 cv
346.77 444.172 346.258 444.387 345.883 444.762 cv
345.504 445.141 345.289 445.652 345.289 446.187 cv
345.289 446.723 345.504 447.234 345.883 447.613 cv
346.258 447.988 346.77 448.203 347.305 448.203 cv
347.84 448.203 348.352 447.988 348.73 447.613 cv
349.109 447.234 349.32 446.723 349.32 446.187 cv
cp
ef
340.773 444.633 mo
340.773 444.098 340.563 443.586 340.184 443.207 cv
339.809 442.832 339.293 442.617 338.762 442.617 cv
338.227 442.617 337.715 442.832 337.336 443.207 cv
336.957 443.586 336.746 444.098 336.746 444.633 cv
336.746 445.168 336.957 445.68 337.336 446.059 cv
337.715 446.434 338.227 446.648 338.762 446.648 cv
339.293 446.648 339.809 446.434 340.184 446.059 cv
340.563 445.68 340.773 445.168 340.773 444.633 cv
cp
ef
332.219 443.148 mo
332.219 442.613 332.004 442.102 331.625 441.723 cv
331.25 441.344 330.738 441.133 330.203 441.133 cv
329.668 441.133 329.156 441.344 328.777 441.723 cv
328.402 442.102 328.188 442.613 328.188 443.148 cv
328.188 443.684 328.402 444.195 328.777 444.57 cv
329.156 444.949 329.668 445.164 330.203 445.164 cv
330.738 445.164 331.25 444.949 331.625 444.57 cv
332.004 444.195 332.219 443.684 332.219 443.148 cv
cp
ef
323.648 441.738 mo
323.648 441.203 323.434 440.691 323.059 440.312 cv
322.68 439.934 322.168 439.723 321.633 439.723 cv
321.098 439.723 320.586 439.934 320.207 440.312 cv
319.832 440.691 319.617 441.203 319.617 441.738 cv
319.617 442.273 319.832 442.785 320.207 443.16 cv
320.586 443.539 321.098 443.75 321.633 443.75 cv
322.168 443.75 322.68 443.539 323.059 443.16 cv
323.434 442.785 323.648 442.273 323.648 441.738 cv
cp
ef
315.063 440.406 mo
315.063 439.871 314.852 439.359 314.473 438.98 cv
314.098 438.602 313.586 438.391 313.051 438.391 cv
312.516 438.391 312.004 438.602 311.625 438.98 cv
311.246 439.359 311.035 439.871 311.035 440.406 cv
311.035 440.937 311.246 441.453 311.625 441.828 cv
312.004 442.207 312.516 442.418 313.051 442.418 cv
313.586 442.418 314.098 442.207 314.473 441.828 cv
314.852 441.453 315.063 440.937 315.063 440.406 cv
cp
ef
306.469 439.152 mo
306.469 438.617 306.258 438.105 305.879 437.727 cv
305.5 437.352 304.988 437.137 304.453 437.137 cv
303.922 437.137 303.41 437.352 303.031 437.727 cv
302.652 438.105 302.441 438.617 302.441 439.152 cv
302.441 439.687 302.652 440.199 303.031 440.578 cv
303.41 440.953 303.922 441.168 304.453 441.168 cv
304.988 441.168 305.5 440.953 305.879 440.578 cv
306.258 440.199 306.469 439.687 306.469 439.152 cv
cp
ef
297.863 437.984 mo
297.863 437.453 297.652 436.937 297.273 436.562 cv
296.895 436.184 296.383 435.973 295.848 435.973 cv
295.313 435.973 294.801 436.184 294.426 436.562 cv
294.047 436.937 293.832 437.453 293.832 437.984 cv
293.832 438.52 294.047 439.031 294.426 439.41 cv
294.801 439.789 295.313 440 295.848 440 cv
296.383 440 296.895 439.789 297.273 439.41 cv
297.652 439.031 297.863 438.52 297.863 437.984 cv
cp
ef
289.246 436.906 mo
289.246 436.371 289.031 435.859 288.656 435.48 cv
288.277 435.105 287.766 434.891 287.23 434.891 cv
286.695 434.891 286.184 435.105 285.805 435.48 cv
285.43 435.859 285.215 436.371 285.215 436.906 cv
285.215 437.441 285.43 437.953 285.805 438.332 cv
286.184 438.707 286.695 438.922 287.23 438.922 cv
287.766 438.922 288.277 438.707 288.656 438.332 cv
289.031 437.953 289.246 437.441 289.246 436.906 cv
cp
ef
280.617 435.918 mo
280.617 435.383 280.402 434.871 280.023 434.496 cv
279.648 434.117 279.137 433.906 278.602 433.906 cv
278.066 433.906 277.555 434.117 277.176 434.496 cv
276.801 434.871 276.586 435.383 276.586 435.918 cv
276.586 436.453 276.801 436.965 277.176 437.344 cv
277.555 437.723 278.066 437.934 278.602 437.934 cv
279.137 437.934 279.648 437.723 280.023 437.344 cv
280.402 436.965 280.617 436.453 280.617 435.918 cv
cp
ef
271.977 435.027 mo
271.977 434.492 271.762 433.98 271.387 433.602 cv
271.008 433.223 270.496 433.012 269.961 433.012 cv
269.426 433.012 268.914 433.223 268.539 433.602 cv
268.16 433.98 267.945 434.492 267.945 435.027 cv
267.945 435.559 268.16 436.074 268.539 436.449 cv
268.914 436.828 269.426 437.039 269.961 437.039 cv
270.496 437.039 271.008 436.828 271.387 436.449 cv
271.762 436.074 271.977 435.559 271.977 435.027 cv
cp
ef
263.328 434.23 mo
263.328 433.699 263.113 433.187 262.738 432.809 cv
262.359 432.43 261.848 432.219 261.313 432.219 cv
260.777 432.219 260.266 432.43 259.887 432.809 cv
259.512 433.187 259.297 433.699 259.297 434.23 cv
259.297 434.766 259.512 435.277 259.887 435.656 cv
260.266 436.035 260.777 436.246 261.313 436.246 cv
261.848 436.246 262.359 436.035 262.738 435.656 cv
263.113 435.277 263.328 434.766 263.328 434.23 cv
cp
ef
254.668 433.543 mo
254.668 433.008 254.457 432.496 254.078 432.117 cv
253.699 431.738 253.188 431.527 252.656 431.527 cv
252.121 431.527 251.609 431.738 251.23 432.117 cv
250.852 432.496 250.641 433.008 250.641 433.543 cv
250.641 434.074 250.852 434.586 251.23 434.965 cv
251.609 435.344 252.121 435.555 252.656 435.555 cv
253.188 435.555 253.699 435.344 254.078 434.965 cv
254.457 434.586 254.668 434.074 254.668 433.543 cv
cp
ef
246.004 432.957 mo
246.004 432.422 245.789 431.91 245.414 431.531 cv
245.035 431.152 244.523 430.941 243.988 430.941 cv
243.453 430.941 242.941 431.152 242.563 431.531 cv
242.188 431.91 241.973 432.422 241.973 432.957 cv
241.973 433.492 242.188 434.004 242.563 434.379 cv
242.941 434.758 243.453 434.973 243.988 434.973 cv
244.523 434.973 245.035 434.758 245.414 434.379 cv
245.789 434.004 246.004 433.492 246.004 432.957 cv
cp
ef
237.332 432.48 mo
237.332 431.949 237.117 431.437 236.742 431.059 cv
236.363 430.68 235.852 430.469 235.316 430.469 cv
234.781 430.469 234.27 430.68 233.891 431.059 cv
233.516 431.437 233.301 431.949 233.301 432.48 cv
233.301 433.016 233.516 433.527 233.891 433.906 cv
234.27 434.285 234.781 434.496 235.316 434.496 cv
235.852 434.496 236.363 434.285 236.742 433.906 cv
237.117 433.527 237.332 433.016 237.332 432.48 cv
cp
ef
228.652 432.125 mo
228.652 431.59 228.441 431.078 228.063 430.699 cv
227.684 430.32 227.172 430.109 226.637 430.109 cv
226.105 430.109 225.59 430.32 225.215 430.699 cv
224.836 431.078 224.625 431.59 224.625 432.125 cv
224.625 432.656 224.836 433.168 225.215 433.547 cv
225.59 433.926 226.105 434.137 226.637 434.137 cv
227.172 434.137 227.684 433.926 228.063 433.547 cv
228.441 433.168 228.652 432.656 228.652 432.125 cv
cp
ef
219.969 431.883 mo
219.969 431.348 219.758 430.836 219.379 430.461 cv
219.004 430.082 218.492 429.871 217.957 429.871 cv
217.422 429.871 216.91 430.082 216.531 430.461 cv
216.152 430.836 215.941 431.348 215.941 431.883 cv
215.941 432.418 216.152 432.93 216.531 433.309 cv
216.91 433.687 217.422 433.898 217.957 433.898 cv
218.492 433.898 219.004 433.687 219.379 433.309 cv
219.758 432.93 219.969 432.418 219.969 431.883 cv
cp
ef
211.285 431.77 mo
211.285 431.234 211.074 430.723 210.695 430.344 cv
210.316 429.965 209.805 429.754 209.27 429.754 cv
208.738 429.754 208.227 429.965 207.848 430.344 cv
207.469 430.723 207.258 431.234 207.258 431.77 cv
207.258 432.305 207.469 432.816 207.848 433.191 cv
208.227 433.57 208.738 433.781 209.27 433.781 cv
209.805 433.781 210.316 433.57 210.695 433.191 cv
211.074 432.816 211.285 432.305 211.285 431.77 cv
cp
ef
202.602 431.785 mo
202.602 431.25 202.387 430.738 202.012 430.359 cv
201.633 429.98 201.121 429.77 200.586 429.77 cv
200.051 429.77 199.539 429.98 199.16 430.359 cv
198.785 430.738 198.57 431.25 198.57 431.785 cv
198.57 432.316 198.785 432.828 199.16 433.207 cv
199.539 433.586 200.051 433.797 200.586 433.797 cv
201.121 433.797 201.633 433.586 202.012 433.207 cv
202.387 432.828 202.602 432.316 202.602 431.785 cv
cp
ef
193.918 431.934 mo
193.918 431.398 193.703 430.887 193.328 430.508 cv
192.949 430.133 192.438 429.918 191.902 429.918 cv
191.367 429.918 190.855 430.133 190.477 430.508 cv
190.102 430.887 189.887 431.398 189.887 431.934 cv
189.887 432.469 190.102 432.98 190.477 433.359 cv
190.855 433.734 191.367 433.949 191.902 433.949 cv
192.438 433.949 192.949 433.734 193.328 433.359 cv
193.703 432.98 193.918 432.469 193.918 431.934 cv
cp
ef
185.234 432.227 mo
185.234 431.691 185.023 431.18 184.645 430.801 cv
184.27 430.422 183.754 430.211 183.223 430.211 cv
182.688 430.211 182.176 430.422 181.797 430.801 cv
181.418 431.18 181.207 431.691 181.207 432.227 cv
181.207 432.758 181.418 433.27 181.797 433.648 cv
182.176 434.027 182.688 434.238 183.223 434.238 cv
183.754 434.238 184.27 434.027 184.645 433.648 cv
185.023 433.27 185.234 432.758 185.234 432.227 cv
cp
ef
176.563 432.664 mo
176.563 432.129 176.348 431.617 175.973 431.238 cv
175.594 430.863 175.082 430.648 174.547 430.648 cv
174.012 430.648 173.5 430.863 173.121 431.238 cv
172.746 431.617 172.531 432.129 172.531 432.664 cv
172.531 433.199 172.746 433.711 173.121 434.09 cv
173.5 434.465 174.012 434.68 174.547 434.68 cv
175.082 434.68 175.594 434.465 175.973 434.09 cv
176.348 433.711 176.563 433.199 176.563 432.664 cv
cp
ef
167.898 433.258 mo
167.898 432.727 167.684 432.215 167.305 431.836 cv
166.93 431.457 166.418 431.246 165.883 431.246 cv
165.348 431.246 164.836 431.457 164.457 431.836 cv
164.078 432.215 163.867 432.727 163.867 433.258 cv
163.867 433.793 164.078 434.305 164.457 434.684 cv
164.836 435.062 165.348 435.273 165.883 435.273 cv
166.418 435.273 166.93 435.062 167.305 434.684 cv
167.684 434.305 167.898 433.793 167.898 433.258 cv
cp
ef
159.246 434.02 mo
159.246 433.484 159.031 432.973 158.656 432.594 cv
158.277 432.215 157.766 432.004 157.23 432.004 cv
156.695 432.004 156.184 432.215 155.805 432.594 cv
155.43 432.973 155.215 433.484 155.215 434.02 cv
155.215 434.555 155.43 435.066 155.805 435.441 cv
156.184 435.82 156.695 436.035 157.23 436.035 cv
157.766 436.035 158.277 435.82 158.656 435.441 cv
159.031 435.066 159.246 434.555 159.246 434.02 cv
cp
ef
150.609 434.953 mo
150.609 434.418 150.398 433.906 150.02 433.527 cv
149.641 433.148 149.129 432.937 148.594 432.937 cv
148.063 432.937 147.547 433.148 147.172 433.527 cv
146.793 433.906 146.582 434.418 146.582 434.953 cv
146.582 435.484 146.793 436 147.172 436.375 cv
147.547 436.754 148.063 436.965 148.594 436.965 cv
149.129 436.965 149.641 436.754 150.02 436.375 cv
150.398 436 150.609 435.484 150.609 434.953 cv
cp
ef
141.996 436.07 mo
141.996 435.535 141.785 435.023 141.406 434.645 cv
141.027 434.266 140.516 434.055 139.98 434.055 cv
139.449 434.055 138.934 434.266 138.559 434.645 cv
138.18 435.023 137.969 435.535 137.969 436.07 cv
137.969 436.605 138.18 437.117 138.559 437.492 cv
138.934 437.871 139.449 438.082 139.98 438.082 cv
140.516 438.082 141.027 437.871 141.406 437.492 cv
141.785 437.117 141.996 436.605 141.996 436.07 cv
cp
ef
133.41 437.383 mo
133.41 436.852 133.199 436.336 132.82 435.961 cv
132.441 435.582 131.93 435.371 131.398 435.371 cv
130.863 435.371 130.352 435.582 129.973 435.961 cv
129.594 436.336 129.383 436.852 129.383 437.383 cv
129.383 437.918 129.594 438.43 129.973 438.809 cv
130.352 439.187 130.863 439.398 131.398 439.398 cv
131.93 439.398 132.441 439.187 132.82 438.809 cv
133.199 438.43 133.41 437.918 133.41 437.383 cv
cp
ef
124.859 438.91 mo
124.859 438.379 124.648 437.867 124.27 437.488 cv
123.895 437.109 123.383 436.898 122.848 436.898 cv
122.313 436.898 121.801 437.109 121.422 437.488 cv
121.043 437.867 120.832 438.379 120.832 438.91 cv
120.832 439.445 121.043 439.957 121.422 440.336 cv
121.801 440.715 122.313 440.926 122.848 440.926 cv
123.383 440.926 123.895 440.715 124.27 440.336 cv
124.648 439.957 124.859 439.445 124.859 438.91 cv
cp
ef
116.355 440.672 mo
116.355 440.137 116.145 439.625 115.766 439.246 cv
115.387 438.867 114.875 438.656 114.34 438.656 cv
113.809 438.656 113.297 438.867 112.918 439.246 cv
112.539 439.625 112.328 440.137 112.328 440.672 cv
112.328 441.207 112.539 441.719 112.918 442.094 cv
113.297 442.473 113.809 442.684 114.34 442.684 cv
114.875 442.684 115.387 442.473 115.766 442.094 cv
116.145 441.719 116.355 441.207 116.355 440.672 cv
cp
ef
107.906 442.684 mo
107.906 442.152 107.695 441.637 107.316 441.262 cv
106.941 440.883 106.426 440.672 105.895 440.672 cv
105.359 440.672 104.848 440.883 104.469 441.262 cv
104.09 441.637 103.879 442.152 103.879 442.684 cv
103.879 443.219 104.09 443.73 104.469 444.109 cv
104.848 444.488 105.359 444.699 105.895 444.699 cv
106.426 444.699 106.941 444.488 107.316 444.109 cv
107.695 443.73 107.906 443.219 107.906 442.684 cv
cp
ef
99.531 444.984 mo
99.531 444.449 99.32 443.937 98.941 443.559 cv
98.563 443.18 98.051 442.969 97.52 442.969 cv
96.984 442.969 96.473 443.18 96.094 443.559 cv
95.715 443.937 95.504 444.449 95.504 444.984 cv
95.504 445.52 95.715 446.031 96.094 446.406 cv
96.473 446.785 96.984 446.996 97.52 446.996 cv
98.051 446.996 98.563 446.785 98.941 446.406 cv
99.32 446.031 99.531 445.52 99.531 444.984 cv
cp
ef
91.254 447.605 mo
91.254 447.074 91.039 446.562 90.664 446.184 cv
90.285 445.805 89.773 445.594 89.238 445.594 cv
88.703 445.594 88.191 445.805 87.813 446.184 cv
87.438 446.562 87.223 447.074 87.223 447.605 cv
87.223 448.141 87.438 448.652 87.813 449.031 cv
88.191 449.41 88.703 449.621 89.238 449.621 cv
89.773 449.621 90.285 449.41 90.664 449.031 cv
91.039 448.652 91.254 448.141 91.254 447.605 cv
cp
ef
83.105 450.613 mo
83.105 450.078 82.895 449.566 82.516 449.187 cv
82.137 448.812 81.625 448.598 81.09 448.598 cv
80.559 448.598 80.043 448.812 79.668 449.187 cv
79.289 449.566 79.078 450.078 79.078 450.613 cv
79.078 451.148 79.289 451.66 79.668 452.039 cv
80.043 452.414 80.559 452.629 81.09 452.629 cv
81.625 452.629 82.137 452.414 82.516 452.039 cv
82.895 451.66 83.105 451.148 83.105 450.613 cv
cp
ef
75.148 454.09 mo
75.148 453.555 74.934 453.043 74.559 452.664 cv
74.18 452.285 73.668 452.074 73.133 452.074 cv
72.598 452.074 72.086 452.285 71.707 452.664 cv
71.332 453.043 71.117 453.555 71.117 454.09 cv
71.117 454.621 71.332 455.137 71.707 455.512 cv
72.086 455.891 72.598 456.102 73.133 456.102 cv
73.668 456.102 74.18 455.891 74.559 455.512 cv
74.934 455.137 75.148 454.621 75.148 454.09 cv
cp
ef
67.488 458.176 mo
67.488 457.641 67.273 457.129 66.898 456.754 cv
66.52 456.375 66.008 456.164 65.473 456.164 cv
64.938 456.164 64.426 456.375 64.047 456.754 cv
63.672 457.129 63.457 457.641 63.457 458.176 cv
63.457 458.711 63.672 459.223 64.047 459.602 cv
64.426 459.98 64.938 460.191 65.473 460.191 cv
66.008 460.191 66.52 459.98 66.898 459.602 cv
67.273 459.223 67.488 458.711 67.488 458.176 cv
cp
ef
60.379 463.152 mo
60.379 462.617 60.168 462.105 59.789 461.727 cv
59.41 461.348 58.898 461.137 58.363 461.137 cv
57.828 461.137 57.316 461.348 56.941 461.727 cv
56.563 462.105 56.348 462.617 56.348 463.152 cv
56.348 463.684 56.563 464.199 56.941 464.574 cv
57.316 464.953 57.828 465.164 58.363 465.164 cv
58.898 465.164 59.41 464.953 59.789 464.574 cv
60.168 464.199 60.379 463.684 60.379 463.152 cv
cp
ef
54.672 469.637 mo
54.672 469.102 54.461 468.59 54.082 468.211 cv
53.703 467.832 53.191 467.621 52.656 467.621 cv
52.121 467.621 51.609 467.832 51.234 468.211 cv
50.855 468.59 50.641 469.102 50.641 469.637 cv
50.641 470.168 50.855 470.684 51.234 471.059 cv
51.609 471.437 52.121 471.648 52.656 471.648 cv
53.191 471.648 53.703 471.437 54.082 471.059 cv
54.461 470.684 54.672 470.168 54.672 469.637 cv
cp
ef
54.477 477.875 mo
54.477 477.34 54.266 476.828 53.887 476.449 cv
53.508 476.074 52.996 475.859 52.465 475.859 cv
51.93 475.859 51.418 476.074 51.039 476.449 cv
50.66 476.828 50.449 477.34 50.449 477.875 cv
50.449 478.41 50.66 478.922 51.039 479.301 cv
51.418 479.676 51.93 479.891 52.465 479.891 cv
52.996 479.891 53.508 479.676 53.887 479.301 cv
54.266 478.922 54.477 478.41 54.477 477.875 cv
cp
ef
61.332 483.004 mo
61.332 482.469 61.117 481.957 60.742 481.578 cv
60.363 481.199 59.852 480.988 59.316 480.988 cv
58.781 480.988 58.27 481.199 57.891 481.578 cv
57.516 481.957 57.301 482.469 57.301 483.004 cv
57.301 483.535 57.516 484.051 57.891 484.426 cv
58.27 484.805 58.781 485.016 59.316 485.016 cv
59.852 485.016 60.363 484.805 60.742 484.426 cv
61.117 484.051 61.332 483.535 61.332 483.004 cv
cp
ef
69.629 485.52 mo
69.629 484.984 69.418 484.473 69.039 484.094 cv
68.664 483.715 68.148 483.504 67.617 483.504 cv
67.082 483.504 66.57 483.715 66.191 484.094 cv
65.813 484.473 65.602 484.984 65.602 485.52 cv
65.602 486.051 65.813 486.566 66.191 486.941 cv
66.57 487.32 67.082 487.531 67.617 487.531 cv
68.148 487.531 68.664 487.32 69.039 486.941 cv
69.418 486.566 69.629 486.051 69.629 485.52 cv
cp
ef
78.207 486.867 mo
78.207 486.336 77.996 485.82 77.617 485.445 cv
77.238 485.066 76.727 484.855 76.191 484.855 cv
75.656 484.855 75.145 485.066 74.77 485.445 cv
74.391 485.82 74.18 486.336 74.18 486.867 cv
74.18 487.402 74.391 487.914 74.77 488.293 cv
75.145 488.672 75.656 488.883 76.191 488.883 cv
76.727 488.883 77.238 488.672 77.617 488.293 cv
77.996 487.914 78.207 487.402 78.207 486.867 cv
cp
ef
86.863 487.562 mo
86.863 487.027 86.652 486.516 86.273 486.137 cv
85.895 485.758 85.383 485.547 84.848 485.547 cv
84.316 485.547 83.801 485.758 83.426 486.137 cv
83.047 486.516 82.836 487.027 82.836 487.562 cv
82.836 488.094 83.047 488.609 83.426 488.984 cv
83.801 489.363 84.316 489.574 84.848 489.574 cv
85.383 489.574 85.895 489.363 86.273 488.984 cv
86.652 488.609 86.863 488.094 86.863 487.562 cv
cp
ef
95.543 487.824 mo
95.543 487.293 95.332 486.777 94.953 486.402 cv
94.578 486.023 94.063 485.812 93.531 485.812 cv
92.996 485.812 92.484 486.023 92.105 486.402 cv
91.727 486.777 91.516 487.293 91.516 487.824 cv
91.516 488.359 91.727 488.871 92.105 489.25 cv
92.484 489.629 92.996 489.84 93.531 489.84 cv
94.063 489.84 94.578 489.629 94.953 489.25 cv
95.332 488.871 95.543 488.359 95.543 487.824 cv
cp
ef
104.23 487.789 mo
104.23 487.254 104.016 486.742 103.641 486.363 cv
103.262 485.988 102.75 485.773 102.215 485.773 cv
101.68 485.773 101.168 485.988 100.789 486.363 cv
100.414 486.742 100.199 487.254 100.199 487.789 cv
100.199 488.324 100.414 488.836 100.789 489.215 cv
101.168 489.59 101.68 489.805 102.215 489.805 cv
102.75 489.805 103.262 489.59 103.641 489.215 cv
104.016 488.836 104.23 488.324 104.23 487.789 cv
cp
ef
112.91 487.527 mo
112.91 486.996 112.699 486.48 112.32 486.105 cv
111.941 485.727 111.43 485.516 110.895 485.516 cv
110.363 485.516 109.852 485.727 109.473 486.105 cv
109.094 486.48 108.883 486.996 108.883 487.527 cv
108.883 488.062 109.094 488.574 109.473 488.953 cv
109.852 489.332 110.363 489.543 110.895 489.543 cv
111.43 489.543 111.941 489.332 112.32 488.953 cv
112.699 488.574 112.91 488.062 112.91 487.527 cv
cp
ef
121.586 487.098 mo
121.586 486.562 121.375 486.051 120.996 485.672 cv
120.617 485.297 120.105 485.082 119.57 485.082 cv
119.035 485.082 118.523 485.297 118.148 485.672 cv
117.77 486.051 117.555 486.562 117.555 487.098 cv
117.555 487.633 117.77 488.145 118.148 488.523 cv
118.523 488.898 119.035 489.113 119.57 489.113 cv
120.105 489.113 120.617 488.898 120.996 488.523 cv
121.375 488.145 121.586 487.633 121.586 487.098 cv
cp
ef
130.254 486.535 mo
130.254 486 130.039 485.488 129.664 485.109 cv
129.285 484.734 128.773 484.52 128.238 484.52 cv
127.703 484.52 127.191 484.734 126.813 485.109 cv
126.438 485.488 126.223 486 126.223 486.535 cv
126.223 487.07 126.438 487.582 126.813 487.961 cv
127.191 488.336 127.703 488.551 128.238 488.551 cv
128.773 488.551 129.285 488.336 129.664 487.961 cv
130.039 487.582 130.254 487.07 130.254 486.535 cv
cp
ef
138.914 485.867 mo
138.914 485.336 138.699 484.824 138.324 484.445 cv
137.945 484.066 137.434 483.855 136.898 483.855 cv
136.363 483.855 135.852 484.066 135.473 484.445 cv
135.098 484.824 134.883 485.336 134.883 485.867 cv
134.883 486.402 135.098 486.914 135.473 487.293 cv
135.852 487.672 136.363 487.883 136.898 487.883 cv
137.434 487.883 137.945 487.672 138.324 487.293 cv
138.699 486.914 138.914 486.402 138.914 485.867 cv
cp
ef
147.566 485.121 mo
147.566 484.586 147.352 484.074 146.977 483.699 cv
146.598 483.32 146.086 483.105 145.551 483.105 cv
145.016 483.105 144.504 483.32 144.125 483.699 cv
143.75 484.074 143.535 484.586 143.535 485.121 cv
143.535 485.656 143.75 486.168 144.125 486.547 cv
144.504 486.926 145.016 487.137 145.551 487.137 cv
146.086 487.137 146.598 486.926 146.977 486.547 cv
147.352 486.168 147.566 485.656 147.566 485.121 cv
cp
ef
156.215 484.312 mo
156.215 483.777 156 483.266 155.625 482.887 cv
155.246 482.508 154.734 482.297 154.199 482.297 cv
153.664 482.297 153.152 482.508 152.773 482.887 cv
152.398 483.266 152.184 483.777 152.184 484.312 cv
152.184 484.844 152.398 485.359 152.773 485.734 cv
153.152 486.113 153.664 486.324 154.199 486.324 cv
154.734 486.324 155.246 486.113 155.625 485.734 cv
156 485.359 156.215 484.844 156.215 484.312 cv
cp
ef
164.855 483.453 mo
164.855 482.918 164.645 482.406 164.266 482.027 cv
163.887 481.652 163.375 481.437 162.844 481.437 cv
162.309 481.437 161.797 481.652 161.418 482.027 cv
161.039 482.406 160.828 482.918 160.828 483.453 cv
160.828 483.988 161.039 484.5 161.418 484.879 cv
161.797 485.254 162.309 485.469 162.844 485.469 cv
163.375 485.469 163.887 485.254 164.266 484.879 cv
164.645 484.5 164.855 483.988 164.855 483.453 cv
cp
ef
173.496 482.559 mo
173.496 482.023 173.285 481.512 172.906 481.133 cv
172.527 480.754 172.016 480.543 171.48 480.543 cv
170.945 480.543 170.434 480.754 170.059 481.133 cv
169.68 481.512 169.465 482.023 169.465 482.559 cv
169.465 483.094 169.68 483.605 170.059 483.98 cv
170.434 484.359 170.945 484.574 171.48 484.574 cv
172.016 484.574 172.527 484.359 172.906 483.98 cv
173.285 483.605 173.496 483.094 173.496 482.559 cv
cp
ef
182.133 481.637 mo
182.133 481.105 181.918 480.59 181.543 480.215 cv
181.164 479.836 180.652 479.625 180.117 479.625 cv
179.582 479.625 179.07 479.836 178.695 480.215 cv
178.316 480.59 178.102 481.105 178.102 481.637 cv
178.102 482.172 178.316 482.684 178.695 483.062 cv
179.07 483.441 179.582 483.652 180.117 483.652 cv
180.652 483.652 181.164 483.441 181.543 483.062 cv
181.918 482.684 182.133 482.172 182.133 481.637 cv
cp
ef
190.766 480.703 mo
190.766 480.168 190.555 479.656 190.176 479.277 cv
189.801 478.898 189.285 478.687 188.754 478.687 cv
188.219 478.687 187.707 478.898 187.328 479.277 cv
186.949 479.656 186.738 480.168 186.738 480.703 cv
186.738 481.234 186.949 481.75 187.328 482.125 cv
187.707 482.504 188.219 482.715 188.754 482.715 cv
189.285 482.715 189.801 482.504 190.176 482.125 cv
190.555 481.75 190.766 481.234 190.766 480.703 cv
cp
ef
199.402 479.758 mo
199.402 479.223 199.188 478.711 198.813 478.332 cv
198.434 477.957 197.922 477.742 197.387 477.742 cv
196.852 477.742 196.34 477.957 195.961 478.332 cv
195.586 478.711 195.371 479.223 195.371 479.758 cv
195.371 480.293 195.586 480.805 195.961 481.184 cv
196.34 481.559 196.852 481.773 197.387 481.773 cv
197.922 481.773 198.434 481.559 198.813 481.184 cv
199.188 480.805 199.402 480.293 199.402 479.758 cv
cp
ef
208.035 478.812 mo
208.035 478.277 207.824 477.766 207.445 477.391 cv
207.066 477.012 206.555 476.801 206.02 476.801 cv
205.488 476.801 204.973 477.012 204.598 477.391 cv
204.219 477.766 204.008 478.277 204.008 478.812 cv
204.008 479.348 204.219 479.859 204.598 480.238 cv
204.973 480.617 205.488 480.828 206.02 480.828 cv
206.555 480.828 207.066 480.617 207.445 480.238 cv
207.824 479.859 208.035 479.348 208.035 478.812 cv
cp
ef
216.668 477.875 mo
216.668 477.34 216.457 476.828 216.078 476.449 cv
215.703 476.074 215.191 475.859 214.656 475.859 cv
214.121 475.859 213.609 476.074 213.23 476.449 cv
212.852 476.828 212.641 477.34 212.641 477.875 cv
212.641 478.41 212.852 478.922 213.23 479.301 cv
213.609 479.676 214.121 479.891 214.656 479.891 cv
215.191 479.891 215.703 479.676 216.078 479.301 cv
216.457 478.922 216.668 478.41 216.668 477.875 cv
cp
ef
225.305 476.949 mo
225.305 476.414 225.094 475.902 224.715 475.523 cv
224.336 475.145 223.824 474.934 223.293 474.934 cv
222.758 474.934 222.246 475.145 221.867 475.523 cv
221.488 475.902 221.277 476.414 221.277 476.949 cv
221.277 477.48 221.488 477.996 221.867 478.371 cv
222.246 478.75 222.758 478.961 223.293 478.961 cv
223.824 478.961 224.336 478.75 224.715 478.371 cv
225.094 477.996 225.305 477.48 225.305 476.949 cv
cp
ef
233.941 476.039 mo
233.941 475.504 233.73 474.992 233.352 474.613 cv
232.977 474.234 232.465 474.023 231.93 474.023 cv
231.395 474.023 230.883 474.234 230.504 474.613 cv
230.125 474.992 229.914 475.504 229.914 476.039 cv
229.914 476.57 230.125 477.086 230.504 477.461 cv
230.883 477.84 231.395 478.051 231.93 478.051 cv
232.465 478.051 232.977 477.84 233.352 477.461 cv
233.73 477.086 233.941 476.57 233.941 476.039 cv
cp
ef
242.582 475.152 mo
242.582 474.617 242.371 474.105 241.992 473.727 cv
241.617 473.348 241.102 473.137 240.57 473.137 cv
240.035 473.137 239.523 473.348 239.145 473.727 cv
238.766 474.105 238.555 474.617 238.555 475.152 cv
238.555 475.684 238.766 476.195 239.145 476.574 cv
239.523 476.953 240.035 477.164 240.57 477.164 cv
241.102 477.164 241.617 476.953 241.992 476.574 cv
242.371 476.195 242.582 475.684 242.582 475.152 cv
cp
ef
251.227 474.289 mo
251.227 473.758 251.016 473.242 250.637 472.867 cv
250.258 472.488 249.746 472.277 249.211 472.277 cv
248.676 472.277 248.164 472.488 247.789 472.867 cv
247.41 473.242 247.199 473.758 247.199 474.289 cv
247.199 474.824 247.41 475.336 247.789 475.715 cv
248.164 476.094 248.676 476.305 249.211 476.305 cv
249.746 476.305 250.258 476.094 250.637 475.715 cv
251.016 475.336 251.227 474.824 251.227 474.289 cv
cp
ef
259.871 473.461 mo
259.871 472.926 259.66 472.414 259.281 472.039 cv
258.906 471.66 258.391 471.449 257.859 471.449 cv
257.324 471.449 256.813 471.66 256.434 472.039 cv
256.055 472.414 255.844 472.926 255.844 473.461 cv
255.844 473.996 256.055 474.508 256.434 474.887 cv
256.813 475.266 257.324 475.477 257.859 475.477 cv
258.391 475.477 258.906 475.266 259.281 474.887 cv
259.66 474.508 259.871 473.996 259.871 473.461 cv
cp
ef
268.52 472.668 mo
268.52 472.133 268.309 471.621 267.93 471.246 cv
267.555 470.867 267.043 470.656 266.508 470.656 cv
265.973 470.656 265.461 470.867 265.082 471.246 cv
264.703 471.621 264.492 472.133 264.492 472.668 cv
264.492 473.203 264.703 473.715 265.082 474.094 cv
265.461 474.473 265.973 474.684 266.508 474.684 cv
267.043 474.684 267.555 474.473 267.93 474.094 cv
268.309 473.715 268.52 473.203 268.52 472.668 cv
cp
ef
277.176 471.914 mo
277.176 471.383 276.961 470.871 276.586 470.492 cv
276.207 470.113 275.695 469.902 275.16 469.902 cv
274.625 469.902 274.113 470.113 273.734 470.492 cv
273.359 470.871 273.145 471.383 273.145 471.914 cv
273.145 472.449 273.359 472.961 273.734 473.34 cv
274.113 473.719 274.625 473.93 275.16 473.93 cv
275.695 473.93 276.207 473.719 276.586 473.34 cv
276.961 472.961 277.176 472.449 277.176 471.914 cv
cp
ef
285.832 471.207 mo
285.832 470.672 285.617 470.16 285.242 469.781 cv
284.863 469.406 284.352 469.191 283.816 469.191 cv
283.281 469.191 282.77 469.406 282.391 469.781 cv
282.016 470.16 281.801 470.672 281.801 471.207 cv
281.801 471.742 282.016 472.254 282.391 472.633 cv
282.77 473.008 283.281 473.223 283.816 473.223 cv
284.352 473.223 284.863 473.008 285.242 472.633 cv
285.617 472.254 285.832 471.742 285.832 471.207 cv
cp
ef
294.492 470.547 mo
294.492 470.012 294.277 469.5 293.902 469.121 cv
293.523 468.742 293.012 468.531 292.477 468.531 cv
291.941 468.531 291.43 468.742 291.051 469.121 cv
290.676 469.5 290.461 470.012 290.461 470.547 cv
290.461 471.078 290.676 471.594 291.051 471.969 cv
291.43 472.348 291.941 472.559 292.477 472.559 cv
293.012 472.559 293.523 472.348 293.902 471.969 cv
294.277 471.594 294.492 471.078 294.492 470.547 cv
cp
ef
303.156 469.934 mo
303.156 469.402 302.941 468.887 302.566 468.512 cv
302.188 468.133 301.676 467.922 301.141 467.922 cv
300.605 467.922 300.094 468.133 299.715 468.512 cv
299.34 468.887 299.125 469.402 299.125 469.934 cv
299.125 470.469 299.34 470.98 299.715 471.359 cv
300.094 471.738 300.605 471.949 301.141 471.949 cv
301.676 471.949 302.188 471.738 302.566 471.359 cv
302.941 470.98 303.156 470.469 303.156 469.934 cv
cp
ef
311.824 469.379 mo
311.824 468.844 311.609 468.332 311.234 467.957 cv
310.855 467.578 310.344 467.363 309.809 467.363 cv
309.273 467.363 308.762 467.578 308.383 467.957 cv
308.008 468.332 307.793 468.844 307.793 469.379 cv
307.793 469.914 308.008 470.426 308.383 470.805 cv
308.762 471.184 309.273 471.395 309.809 471.395 cv
310.344 471.395 310.855 471.184 311.234 470.805 cv
311.609 470.426 311.824 469.914 311.824 469.379 cv
cp
ef
320.492 468.883 mo
320.492 468.348 320.281 467.836 319.902 467.457 cv
319.527 467.082 319.016 466.867 318.48 466.867 cv
317.945 466.867 317.434 467.082 317.055 467.457 cv
316.676 467.836 316.465 468.348 316.465 468.883 cv
316.465 469.418 316.676 469.93 317.055 470.309 cv
317.434 470.684 317.945 470.898 318.48 470.898 cv
319.016 470.898 319.527 470.684 319.902 470.309 cv
320.281 469.93 320.492 469.418 320.492 468.883 cv
cp
ef
329.168 468.449 mo
329.168 467.914 328.957 467.402 328.578 467.023 cv
328.199 466.645 327.688 466.434 327.152 466.434 cv
326.621 466.434 326.109 466.645 325.73 467.023 cv
325.352 467.402 325.141 467.914 325.141 468.449 cv
325.141 468.98 325.352 469.496 325.73 469.871 cv
326.109 470.25 326.621 470.461 327.152 470.461 cv
327.688 470.461 328.199 470.25 328.578 469.871 cv
328.957 469.496 329.168 468.98 329.168 468.449 cv
cp
ef
337.848 468.078 mo
337.848 467.543 337.633 467.031 337.258 466.652 cv
336.879 466.277 336.367 466.062 335.832 466.062 cv
335.297 466.062 334.785 466.277 334.406 466.652 cv
334.031 467.031 333.816 467.543 333.816 468.078 cv
333.816 468.613 334.031 469.125 334.406 469.504 cv
334.785 469.879 335.297 470.094 335.832 470.094 cv
336.367 470.094 336.879 469.879 337.258 469.504 cv
337.633 469.125 337.848 468.613 337.848 468.078 cv
cp
ef
346.527 467.777 mo
346.527 467.242 346.313 466.73 345.938 466.352 cv
345.559 465.977 345.047 465.762 344.512 465.762 cv
343.977 465.762 343.465 465.977 343.086 466.352 cv
342.711 466.73 342.496 467.242 342.496 467.777 cv
342.496 468.312 342.711 468.824 343.086 469.203 cv
343.465 469.578 343.977 469.793 344.512 469.793 cv
345.047 469.793 345.559 469.578 345.938 469.203 cv
346.313 468.824 346.527 468.312 346.527 467.777 cv
cp
ef
355.207 467.551 mo
355.207 467.016 354.996 466.504 354.617 466.125 cv
354.242 465.75 353.73 465.535 353.195 465.535 cv
352.66 465.535 352.148 465.75 351.77 466.125 cv
351.391 466.504 351.18 467.016 351.18 467.551 cv
351.18 468.086 351.391 468.598 351.77 468.977 cv
352.148 469.352 352.66 469.566 353.195 469.566 cv
353.73 469.566 354.242 469.352 354.617 468.977 cv
354.996 468.598 355.207 468.086 355.207 467.551 cv
cp
ef
363.895 467.398 mo
363.895 466.863 363.68 466.352 363.305 465.977 cv
362.926 465.598 362.414 465.387 361.879 465.387 cv
361.344 465.387 360.832 465.598 360.453 465.977 cv
360.078 466.352 359.863 466.863 359.863 467.398 cv
359.863 467.934 360.078 468.445 360.453 468.824 cv
360.832 469.203 361.344 469.414 361.879 469.414 cv
362.414 469.414 362.926 469.203 363.305 468.824 cv
363.68 468.445 363.895 467.934 363.895 467.398 cv
cp
ef
372.578 467.328 mo
372.578 466.793 372.367 466.281 371.988 465.906 cv
371.609 465.527 371.098 465.312 370.563 465.312 cv
370.031 465.312 369.516 465.527 369.141 465.906 cv
368.762 466.281 368.551 466.793 368.551 467.328 cv
368.551 467.863 368.762 468.375 369.141 468.754 cv
369.516 469.129 370.031 469.344 370.563 469.344 cv
371.098 469.344 371.609 469.129 371.988 468.754 cv
372.367 468.375 372.578 467.863 372.578 467.328 cv
cp
ef
381.266 467.344 mo
381.266 466.809 381.051 466.297 380.672 465.918 cv
380.297 465.539 379.785 465.328 379.25 465.328 cv
378.715 465.328 378.203 465.539 377.824 465.918 cv
377.445 466.297 377.234 466.809 377.234 467.344 cv
377.234 467.875 377.445 468.391 377.824 468.766 cv
378.203 469.145 378.715 469.355 379.25 469.355 cv
379.785 469.355 380.297 469.145 380.672 468.766 cv
381.051 468.391 381.266 467.875 381.266 467.344 cv
cp
ef
389.949 467.445 mo
389.949 466.91 389.734 466.398 389.359 466.02 cv
388.98 465.645 388.469 465.43 387.934 465.43 cv
387.398 465.43 386.887 465.645 386.512 466.02 cv
386.133 466.398 385.918 466.91 385.918 467.445 cv
385.918 467.98 386.133 468.492 386.512 468.871 cv
386.887 469.246 387.398 469.461 387.934 469.461 cv
388.469 469.461 388.98 469.246 389.359 468.871 cv
389.734 468.492 389.949 467.98 389.949 467.445 cv
cp
ef
398.633 467.641 mo
398.633 467.105 398.418 466.594 398.043 466.215 cv
397.664 465.84 397.152 465.625 396.617 465.625 cv
396.082 465.625 395.57 465.84 395.191 466.215 cv
394.816 466.594 394.602 467.105 394.602 467.641 cv
394.602 468.176 394.816 468.687 395.191 469.066 cv
395.57 469.441 396.082 469.656 396.617 469.656 cv
397.152 469.656 397.664 469.441 398.043 469.066 cv
398.418 468.687 398.633 468.176 398.633 467.641 cv
cp
ef
407.313 467.934 mo
407.313 467.402 407.102 466.887 406.723 466.512 cv
406.344 466.133 405.832 465.922 405.297 465.922 cv
404.762 465.922 404.25 466.133 403.875 466.512 cv
403.496 466.887 403.285 467.402 403.285 467.934 cv
403.285 468.469 403.496 468.98 403.875 469.359 cv
404.25 469.738 404.762 469.949 405.297 469.949 cv
405.832 469.949 406.344 469.738 406.723 469.359 cv
407.102 468.98 407.313 468.469 407.313 467.934 cv
cp
ef
415.988 468.332 mo
415.988 467.797 415.777 467.285 415.398 466.91 cv
415.02 466.531 414.508 466.316 413.973 466.316 cv
413.441 466.316 412.926 466.531 412.551 466.91 cv
412.172 467.285 411.961 467.797 411.961 468.332 cv
411.961 468.867 412.172 469.379 412.551 469.758 cv
412.926 470.137 413.441 470.348 413.973 470.348 cv
414.508 470.348 415.02 470.137 415.398 469.758 cv
415.777 469.379 415.988 468.867 415.988 468.332 cv
cp
ef
424.66 468.84 mo
424.66 468.305 424.445 467.793 424.07 467.414 cv
423.691 467.039 423.18 466.824 422.645 466.824 cv
422.109 466.824 421.598 467.039 421.219 467.414 cv
420.844 467.793 420.629 468.305 420.629 468.84 cv
420.629 469.375 420.844 469.887 421.219 470.266 cv
421.598 470.641 422.109 470.855 422.645 470.855 cv
423.18 470.855 423.691 470.641 424.07 470.266 cv
424.445 469.887 424.66 469.375 424.66 468.84 cv
cp
ef
433.32 469.465 mo
433.32 468.93 433.109 468.418 432.73 468.039 cv
432.355 467.664 431.844 467.449 431.309 467.449 cv
430.773 467.449 430.262 467.664 429.883 468.039 cv
429.504 468.418 429.293 468.93 429.293 469.465 cv
429.293 470 429.504 470.512 429.883 470.891 cv
430.262 471.266 430.773 471.48 431.309 471.48 cv
431.844 471.48 432.355 471.266 432.73 470.891 cv
433.109 470.512 433.32 470 433.32 469.465 cv
cp
ef
441.977 470.215 mo
441.977 469.684 441.762 469.168 441.387 468.793 cv
441.008 468.414 440.496 468.203 439.961 468.203 cv
439.426 468.203 438.914 468.414 438.535 468.793 cv
438.16 469.168 437.945 469.684 437.945 470.215 cv
437.945 470.75 438.16 471.262 438.535 471.641 cv
438.914 472.02 439.426 472.23 439.961 472.23 cv
440.496 472.23 441.008 472.02 441.387 471.641 cv
441.762 471.262 441.977 470.75 441.977 470.215 cv
cp
ef
450.613 471.105 mo
450.613 470.57 450.402 470.059 450.023 469.68 cv
449.648 469.301 449.137 469.09 448.602 469.09 cv
448.066 469.09 447.555 469.301 447.176 469.68 cv
446.797 470.059 446.586 470.57 446.586 471.105 cv
446.586 471.637 446.797 472.152 447.176 472.527 cv
447.555 472.906 448.066 473.117 448.602 473.117 cv
449.137 473.117 449.648 472.906 450.023 472.527 cv
450.402 472.152 450.613 471.637 450.613 471.105 cv
cp
ef
459.238 472.145 mo
459.238 471.609 459.027 471.098 458.648 470.723 cv
458.27 470.344 457.758 470.129 457.223 470.129 cv
456.688 470.129 456.176 470.344 455.801 470.723 cv
455.422 471.098 455.207 471.609 455.207 472.145 cv
455.207 472.68 455.422 473.191 455.801 473.57 cv
456.176 473.949 456.688 474.16 457.223 474.16 cv
457.758 474.16 458.27 473.949 458.648 473.57 cv
459.027 473.191 459.238 472.68 459.238 472.145 cv
cp
ef
467.836 473.363 mo
467.836 472.832 467.625 472.316 467.246 471.941 cv
466.871 471.562 466.355 471.352 465.824 471.352 cv
465.289 471.352 464.777 471.562 464.398 471.941 cv
464.02 472.316 463.809 472.832 463.809 473.363 cv
463.809 473.898 464.02 474.41 464.398 474.789 cv
464.777 475.168 465.289 475.379 465.824 475.379 cv
466.355 475.379 466.871 475.168 467.246 474.789 cv
467.625 474.41 467.836 473.898 467.836 473.363 cv
cp
ef
476.398 474.832 mo
476.398 474.297 476.184 473.785 475.809 473.406 cv
475.43 473.027 474.918 472.816 474.383 472.816 cv
473.848 472.816 473.336 473.027 472.957 473.406 cv
472.582 473.785 472.367 474.297 472.367 474.832 cv
472.367 475.363 472.582 475.879 472.957 476.254 cv
473.336 476.633 473.848 476.844 474.383 476.844 cv
474.918 476.844 475.43 476.633 475.809 476.254 cv
476.184 475.879 476.398 475.363 476.398 474.832 cv
cp
ef
.5 lw
54.859 474.832 mo
54.859 472.332 li
.749721 .679194 .670497 .901457 cmyk
@
%ADOBeginSubsetFont: KAAAAA+MathematicaSans Initial
ct_T42Dict begin
-0.211 -1.535 2.637 2.434
 256 array 0 1 255 {1 index exch /.notdef put} for  /KAAAAA+MathematicaSans
Type42DictBegin
[<00010000000a000a000a000a637674203fa6eb04000000ac0000003c6670
676d76647d76000000e800000d16676c7966638ef3b700000f1c00000054
686561641677bb8300000e0000000036686865611a1c0e2400000e380000
0024686d747808ac00f100000e5c000000086c6f6361002a001800000e64
000000066d61787001180e4500000e6c0000002070726570195002100000
0e8c0000008d676469720000000000000000000000000000000000000000
00000000000000000000000000bd00bd0093009305ba000005e704250000
fe681388f25405d3ffe705e7043dffe7fe5b1388f254b0002c20b0005558
455920204bb8000e514bb006535a58b0341bb028596066208a5558b00225
61b908000800636323621b2121b00059b000432344b20001004360422db0
012cb02060662db0022c206420b0c050b004265ab228010a43456345b006
455821b0032559525b582123211b8a5820b050505821b040591b20b03850
5821b038595920b1010a434563456164b028505821b1010a4345634520b0
30505821b030591b20b0c050582066208a8a6120b00a5058601b20b02050
5821b00a601b20b036505821b036601b605959591bb0012b595923b00050
586559592db0032c204520b00425616420b005435058b0052342b0062342
1b212159b001602db0042c232123212064b105624220b0062342b0064558
1bb1010a434563b1010a43b001604563b0032a2120b00643208a208ab001
2bb1300525b00426515860501b615259582359215920b0405358b0012b1b
21b0405923b000505865592db0052cb007432bb20002004360422db0062c
b00723422320b000234261b0026266b00163b00160b0052a2db0072c2020
4520b00b4363b804006220b0005058b040605966b001636044b001602db0
082cb2070b004345422a21b20001004360422db0092cb000432344b20001
004360422db00a2c20204520b0012b23b00043b004256020458a23612064
20b020505821b0001bb0305058b0201bb040595923b00050586559b00325
23614444b001602db00b2c20204520b0012b23b00043b004256020458a23
612064b0245058b0001bb0405923b00050586559b0032523614444b00160
2db00c2c20b0002342b20b0a034558211b2321592a212db00d2cb1020245
b06461442db00e2cb001602020b00c434ab000505820b00c234259b00d43
4ab000525820b00d2342592db00f2c20b0106266b0016320b80400638a23
61b00e4360208a6020b00e2342232db0102c4b5458b10464445924b00d65
23782db0112c4b51584b5358b1046444591b215924b0136523782db0122c
b1000f435558b10f0f43b0016142b00f2b59b00043b0022542b10c022542
b10d022542b001162320b003255058b101004360b00425428a8a208a2361
b00e2a2123b00161208a2361b00e2a211bb101004360b0022542b0022561
b00e2a2159b00c4347b00d434760b0026220b0005058b040605966b00163
20b00b4363b804006220b0005058b040605966b0016360b10000132344b0
0143b0003eb20101014360422db0132c00b10002455458b00f23422045b0
0b2342b00a23b00160422060b00161b5111101000e0042428a60b112062b
b0892b1b22592db0142cb100132b2db0152cb101132b2db0162cb102132b
2db0172cb103132b2db0182cb104132b2db0192cb105132b2db01a2cb106
132b2db01b2cb107132b2db01c2cb108132b2db01d2cb109132b2db0292c
2320b0106266b00163b006604b545823202eb0015d1b2121592db02a2c23
20b0106266b00163b016604b545823202eb001711b2121592db02b2c2320
b0106266b00163b026604b545823202eb001721b2121592db01e2c00b00d
2bb10002455458b00f23422045b00b2342b00a23b00160422060b00161b5
111101000e0042428a60b112062bb0892b1b22592db01f2cb1001e2b2db0
202cb1011e2b2db0212cb1021e2b2db0222cb1031e2b2db0232cb1041e2b
2db0242cb1051e2b2db0252cb1061e2b2db0262cb1071e2b2db0272cb108
1e2b2db0282cb1091e2b2db02c2c203cb001602db02d2c2060b011602043
23b0016043b0022561b00160b02c2a212db02e2cb02d2bb02d2a2db02f2c
2020472020b00b4363b804006220b0005058b040605966b0016360236138
23208a555820472020b00b4363b804006220b0005058b040605966b00163
602361381b21592db0302c00b10002455458b00116b02f2ab10501154558
30591b22592db0312c00b00d2bb10002455458b00116b02f2ab105011545
5830591b22592db0322c2035b001602db0332c00b0014563b804006220b0
005058b040605966b00163b0012bb00b4363b804006220b0005058b04060
5966b00163b0012bb00016b40000000000443e2338b13201152a212db034
2c203c204720b00b4363b804006220b0005058b040605966b0016360b000
4361382db0352c2e173c2db0362c203c204720b00b4363b804006220b000
5058b040605966b0016360b0004361b0014363382db0372cb10200162520
2e2047b0002342b00225498a8a47234723612058621b2159b0012342b236
010115142a2db0382cb00016b0102342b00425b004254723472361b00943
2b658a2e2320203c8a382db0392cb00016b0102342b00425b00425202e47
2347236120b0042342b009432b20b060505820b0405158b3022003201bb3
0226031a5942422320b00843208a234723472361234660b00443b0026220
b0005058b040605966b001636020b0012b208a8a6120b00243606423b003
4361645058b00243611bb003436059b00325b0026220b0005058b0406059
66b0016361232020b00426234661381b23b0084346b00225b00843472347
23616020b00443b0026220b0005058b040605966b00163602320b0012b23
b0044360b0012bb0052561b00525b0026220b0005058b040605966b00163
b004266120b00425606423b0032560645058211b232159232020b0042623
466138592db03a2cb00016b0102342202020b00526202e4723472361233c
382db03b2cb00016b010234220b0082342202020462347b0012b2361382d
b03c2cb00016b0102342b00325b002254723472361b00054582e203c2321
1bb00225b00225472347236120b00525b004254723472361b00625b00525
49b0022561b9080008006363232058621b215963b804006220b0005058b0
40605966b0016360232e2320203c8a382321592db03d2cb00016b0102342
20b00843202e47234723612060b0206066b0026220b0005058b040605966
b001632320203c8a382db03e2c23202e46b0022546b0104358501b525958
203c592eb12e01142b2db03f2c23202e46b0022546b0104358521b505958
203c592eb12e01142b2db0402c23202e46b0022546b0104358501b525958
203c5923202e46b0022546b0104358521b505958203c592eb12e01142b2d
b0412cb0382b23202e46b0022546b0104358501b525958203c592eb12e01
142b2db0422cb0392b8a20203cb00423428a3823202e46b0022546b01043
58501b525958203c592eb12e01142bb004432eb02e2b2db0432cb00016b0
0425b00426202e4723472361b009432b23203c202e2338b12e01142b2db0
442cb108042542b00016b00425b00425202e472347236120b0042342b009
432b20b060505820b0405158b3022003201bb30226031a594242232047b0
0443b0026220b0005058b040605966b001636020b0012b208a8a6120b002
43606423b0034361645058b00243611bb003436059b00325b0026220b000
5058b040605966b0016361b0022546613823203c23381b212020462347b0
012b2361382159b12e01142b2db0452cb100382b2eb12e01142b2db0462c
b100392b212320203cb00423422338b12e01142bb004432eb02e2b2db047
2cb000152047b0002342b20001011514132eb0342a2db0482cb000152047
b0002342b20001011514132eb0342a2db0492cb100011413b0352a2db04a
2cb0372a2db04b2cb000164523202e20468a236138b12e01142b2db04c2c
b0082342b04b2b2db04d2cb20000442b2db04e2cb20001442b2db04f2cb2
0100442b2db0502cb20101442b2db0512cb20000452b2db0522cb2000145
2b2db0532cb20100452b2db0542cb20101452b2db0552cb3000000412b2d
b0562cb3000100412b2db0572cb3010000412b2db0582cb3010100412b2d
b0592cb3000001412b2db05a2cb3000101412b2db05b2cb3010001412b2d
b05c2cb3010101412b2db05d2cb20000432b2db05e2cb20001432b2db05f
2cb20100432b2db0602cb20101432b2db0612cb20000462b2db0622cb200
01462b2db0632cb20100462b2db0642cb20101462b2db0652cb300000042
2b2db0662cb3000100422b2db0672cb3010000422b2db0682cb301010042
2b2db0692cb3000001422b2db06a2cb3000101422b2db06b2cb301000142
2b2db06c2cb3010101422b2db06d2cb1003a2b2eb12e01142b2db06e2cb1
003a2bb03e2b2db06f2cb1003a2bb03f2b2db0702cb00016b1003a2bb040
2b2db0712cb1013a2bb03e2b2db0722cb1013a2bb03f2b2db0732cb00016
b1013a2bb0402b2db0742cb1003b2b2eb12e01142b2db0752cb1003b2bb0
3e2b2db0762cb1003b2bb03f2b2db0772cb1003b2bb0402b2db0782cb101
3b2bb03e2b2db0792cb1013b2bb03f2b2db07a2cb1013b2bb0402b2db07b
2cb1003c2b2eb12e01142b2db07c2cb1003c2bb03e2b2db07d2cb1003c2b
b03f2b2db07e2cb1003c2bb0402b2db07f2cb1013c2bb03e2b2db0802cb1
013c2bb03f2b2db0812cb1013c2bb0402b2db0822cb1003d2b2eb12e0114
2b2db0832cb1003d2bb03e2b2db0842cb1003d2bb03f2b2db0852cb1003d
2bb0402b2db0862cb1013d2bb03e2b2db0872cb1013d2bb03f2b2db0882c
b1013d2bb0402b2db0892cb3090402034558211b232159422bb00865b003
245078b1050115455830592d000000010000000b4ccc08c353385f0f3cf5
0019080000000000cd4fbbcc00000000d68566bdfe50f3b3151b137d0000
00090002000000000000000100000666fe330048151bfe50fad3151b0001
000000000000000000000000000000020400008004ac007100000018002a
00000001000000020106001a00000000000200160027008b0000005a0d16
00000000004bb800c85258b101018e59b001b9080008006370b1000742b2
1901002ab1000742b30c0801082ab1000742b3160601082ab1000842ba03
40000100092ab1000942ba0040000100092ab1030044b12401885158b040
8858b1036444b12601885158ba08800001044088635458b1030044595959
59b30e08010c2ab801ff85b0048db1020044b305640600444400000000>
[85 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 48 1 <0001007101c1043b026900030006b3020001302b01213521043bfc3603ca
01c1a8000000>KAAAAA+MathematicaSans AddT42Char 
1 0 0 <00020080000003800666000300070008b50604010002302b331121112521
1121800300fd800200fe000666f99a800566>KAAAAA+MathematicaSans AddT42Char 
KAAAAA+MathematicaSans /CharStrings get begin
/hyphen 1 def
end
KAAAAA+MathematicaSans /Encoding get
dup 45 /hyphen put
pop
end
%ADOEndSubsetFont
/ATTRPN+MathematicaSans /KAAAAA+MathematicaSans findfont ct_VMDictPut
/ATTRPN+MathematicaSans*1 
[45{/.notdef}rp /hyphen 210{/.notdef}rp]
ATTRPN+MathematicaSans nf
ATTRPN+MathematicaSans*1 [9 0 0 -9 0 0 ]msf
45.9743 486.831 mo
(-)sh
%ADOBeginSubsetFont: LAAAAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /LAAAAA+ArialMT
Type42DictBegin
[<00010000000a000a000a000a63767420adbfdf8e000000ac0000066e6670
676d38a5162b0000071c00000bb0676c7966cfa20bc000001fac00000954
68656164eb4b56cd000012cc0000003668686561123308cf000013040000
0024686d74781a05037f00001328000000186c6f63610000188400001340
0000001c6d61787005fc09af0000135c0000002070726570a1b2e8ea0000
137c00000c2f6764697200000000000000000000000005ba001905ba001a
05a70019042600180000ffe70000ffe80000ffe7fe69ffe805ba0019fe69
ffe802ea000000b8000000b80000000000a800ad016900ad00bf00c201f0
001800af00b900b400c800170044009c007c009400870006005a00c80089
005200520005004400940119ffb4002f00a1000300a100cd00170057007e
00ba00160118ffe9007f008503d300870085000d002200410050006f008d
014cff75005c00df04830037004c006e00700180ff58ff8eff92ffa400a5
00b903c8fffd000b001a0063006300cdffee05d8ffdc002d005c00950099
00df019209b500400057008000b9039d0072009a035d0401ff67fffa0003
0021007700cd0004004d00cd01c0022b004c006500e70118017c034305d8
ffa3ffb0ffc40003001c005d0068009a00ba013501470221055cff4dffcd
0016002d00780080009900b200b600b600b800bd00da010c05f0ffa4fff0
0019002c0049007f00b400ce01c003fefd81fe3f00000005001800290039
0049006f00be00c700d0012301c1026f050c05320540057affd400140031
0055005700a700b400e601f7027e027e027f03c60446ff42000e00850091
00bf00c200c500e1011a012f014f01560229026f029e03720008002c0031
0031006400690089009800c700de012b01b6020c02cf03a304ab04fb061d
fee0ff0e00060026009b009d00c1010d011801200173018201d601e30243
025f029b02e2039404a904d20761001c005e006d008d00ab00f701120138
0151015b0168017c01870191019901cd01d001e802410254026b02ef0368
037103bd044204420453047304830586058b06e8fe58fec4fed1fef7ff32
ff860051007c008100910095009e00b400b900cf00d900d900df00e20105
010b010e010e012001210155017b017b017e018d01a201a801a901b401d0
01d001e201e901f201f501fb020002000206021b02210222022202230272
02770294029c02cf02cf02d002ec02f903170322032b0335033c0359036f
037103870390039003b503e1041a04cf04ff053205320596059f05a805ab
05c205f0060c0782080008ccfca3fd2afddefe00fe88fe96feb2feb4ffe1
00150019001a001c001f003c005100610061006a0078009600a500af00d3
010c0118011a012a013e014c0151015f016a0171017801820184019a01a5
01a801a901ae01bc01cd01d701ef0200020d021c02210222022e02350242
024f024f025e026502710290029202b402d602fa0307030b030f0315032a
0347035d036503740379039603b003cc03dd03e203f603fc03fc03ff040a
041f04220426042b0447045f0475049e04e704e7055c05cb05e5060a066d
068606b806f10736073e07500751075d078f07b607d4086000b600c300b5
00b700000000000000000000000001e00381034503b5008e0233041902ce
02ce002d005f0064034d023f000002a80188027d01b402240578063b023b
014e00f00426029402c6029f02f6023b034d014b0153006a023100000000
0000061404aa0000003c04c300ed04bc026502ce03b50078060c017e02ef
060c00b201000239000001c50330042b03cb00da03df010704a100db040a
011701ed02a70350010b01bd043e05580021039c00ae0371017d00b50245
00000afb088c012b014e01aa00870054013201f803ff0003024e00b40037
03e30083006b02d800ed00770088009701640467008e0033017c00e700a6
029e0329056e062a061501c90269048a021301b4000204a9000002390124
010305140084015d039a06ef02d9007500cf040a00de03ac04bc02cf02ae
034d04f005520168006d007d00860071ff810079055804d2016700030156
002504e00094007c033204210094007f0072005c002f00b6001800ba00b8
0041034d00720018001f004c016a01550099009a009a009800b200040078
006900140057006e00ce00b4065402b80067050e016500e7000004cbfe52
005affa60099ff67006eff92002dffd40087ff7c00b800a800e5008f00a8
0185fe7b0070001e00d900de014c054602cf0546ff2d028a02d902530296
00b700000000000000000000000000000125011800ea00ea00ae0000003e
05bb008a04d70053003fff8cffd500150028002200990062004a00e4006d
00ee00e5004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a
0068ff6c004f00bc00a507050061072b00ed04b001d200b6007b00650252
ff740365fe690094008f005c004000860075008900890471048304f9008c
00910096009b00a000a500aa00af00b400b90000405b8574737271706f6e
6d6c6b6a6968676665625d58575655544f4e41403f3e3d3c3b3a39383735
34333231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817
161514131211100f0e0d0c0b0a090807060504030201002c4523466020b0
2660b004262348482d2c452346236120b02661b004262348482d2c452346
60b0206120b04660b004262348482d2c4523462361b0206020b02661b020
61b004262348482d2c45234660b0406120b06660b004262348482d2c4523
462361b0406020b02661b04061b004262348482d2c0110203c003c2d2c20
452320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44
235920b09051582320b00d44235921212d2c20204518684420b001602045
b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d
2c00b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a
234445b01923442d2c2045b00325456164b050515845441b2121592d2cb0
0143632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743
650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c
58b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb0172344
2d2cb01243588745b0112bb0172344b0177ae41b038a45186920b0172344
8a8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c
2d2cb0022546608a46b040618c482d2c4b53205c58b002855958b0018559
2d2c20b0032545b019234445b01a23444565234520b00325606a20b00923
4223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a5458
2321b03f1b235961441cb114008a5279b31940201945208a54582321b03f
1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323
430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343
650b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b0
00525823b002253823b002256538008a63381b212121212159012d2c4bb0
6451584569b00943608a103a1b212121592d2c01b005251023208af500b0
016023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510
f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2c
b02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802
2323701020b802234520b0005058b00161593a2f182d2c21210c6423648b
b84000622d2c21b08051580c6423648bb82000621bb200402f2b59b00260
2d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c64
23648bb84000626023212d2cb4000100000015b00826b00826b00826b008
260f10161345683ab001162d2cb4000100000015b00826b00826b00826b0
08260f1016134568653ab001162d2c4b53234b515a5820458a60441b2121
592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d
2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d
2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b01060482046b010604859
0a21211b2121592d2cb012435c580cb00425b00425060c6423646164b807
085158b00425b00425012046b8fff060482046b8fff06048590a21211b21
21592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b
1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54
b00426024b545a8a8a0ab012435c5a58381b2121592d2c4b5258b00425b0
042549b00425b00425496120b0005458212043b0005558b00325b00325b8
ffc038b8ffc038591bb04054582043b0005458b00225b8ffc038591b2043
b0005458b00325b00325b8ffc038b8ffc0381bb00325b8ffc03859595959
212121212d2c462346608a8a462320468a608a61b8ff8062232010238ab9
02c202c28a70456020b0005058b00161b8ffba8b1bb0468c59b010606801
3a2d2c2320b000508a8a64b10003255458b0401bb10103255458b037438b
59b04f2b5923b0622b2321235865592d2cb13a000c215460432d2cb10200
42b123018851b1400188535a58b910000020885458b202010243604259b1
2401885158b920000040885458b2020202436042b12401885458b2022002
436042004b014b5258b2020802436042591bb940000080885458b2020402
43604259b94000008063b80100885458b202080243604259b94000010063
b80200885458b202100243604259b12601885158b94000020063b8040088
5458b202400243604259b94000040063b80800885458b202800243604259
b12801885158b94000080063b81000885458ba0002010000024360425959
5959595959b10002435458400a37403a403b403e023f021bb10102435458
b237403aba0100003b0100b33e013f011bb18002435258b237403ab80180
b13b401bb901000002435258b237403aba0180003b01401bb90180000243
5258b237403ab80200b13b401bb237403aba0100003b0100595959b94000
00808855b94000020063b8040088555a58b33e003f011bb33e003f015959
5942424242422d2cb0024354584b53234b515a58381b2121591b21212121
592d2cb0572b580c028a4b53b004264b515a580a381b0a2121591b212121
21592d2c20b0024354b00123b05f237821b1000243b056237921b0024323
b020205c58212121b100471c598a8a208a208a23b81000635658b8100063
5658212121b1012c1c591b2159b08062205c58212121b1001b1c5923b080
62205c58212121b1000c1c598ab00161b8ffb31c23212d2c20b0024354b0
0123b07b237821b1000243b072237921b10002438ab020205c58212121b0
631c598a8a208a208a23b81000635658b81000635658b00426b0015bb004
26b00426b004261b21212121b13600231c591b2159b0042623b08062205c
588a5c8a5a23212321b01d1c598ab08062205c5821212321b00e1c59b004
26b00161b8ff981c23212d2c012d2cb0022563b0206066b00225b8200062
6023622d2c234ab1024e2b2d2c234ab1014e2b2d2c238a4a234564b00225
64b002256164b03543525821206459b1024e2b23b000505865592d2c238a
4a234564b0022564b002256164b03543525821206459b1014e2b23b00050
5865592d2c20b003254ab1024e2b8a103b2d2c20b003254ab1014e2b8a10
3b2d2cb00325b003258ab0672b8a103b2d2cb00325b003258ab0682b8a10
3b2d2cb0032546b003254660b004252eb00425b00425b0042620b0005058
21b06a1bb06c592bb0032546b00325466061b08062208a2010233a232010
233a2d2cb0032547b003254760b0052547b0806361b00225b00625496323
b005254ab080632058621b2159b0042646608a468a4660b02063612d2cb0
0426b00425b00425b00426b06e2b208a2010233a232010233a2d2c2320b0
01545821b00225b1024e2bb0805020605920606020b001515821211b20b0
05515821206661b0402361b100032550b00325b00325505a5820b0032561
8a535821b000591b21591bb00754582066616523211b2121b000595959b1
024e2b2d2cb00225b004254ab0005358b0001b8a8a238ab00159b0042546
20666120b00526b0062649b00526b00526b0702b236165b02060206661b0
2061652d2cb0022546208a20b000505821b1024e2b1b452321596165b002
25103b2d2cb0042620b802006220b80200638a236120b05d602bb0052511
8a128a20398a58ba005d10000004266356602b23212010204620b1024e2b
23611b2321208a201049b1024e2b593b2d2cba005d10000009256356602b
b00525b00525b00526b06d2bb15d0725602bb00525b00525b00525b00525
b06f2bba005d10000008266356602b20b0005258b0502bb00525b00525b0
0725b00725b00525b0712bb0021738b00052b00225b001525a58b00425b0
062549b00325b00525496020b0405258211bb000525820b0025458b00425
b00425b00725b0072549b00217381bb00425b00425b00425b0062549b002
1738595959595921212121212d2cb12501885058b94000020063b8040088
545cb0124b525b1bb001592d0001000000070000f91454525f0f3cf5081b
080000000000a2e3272a00000000d684e4ecfaaffd671000085100000009
000100010000000000010000073efe4e00431000faaffa7a100000010000
000000000000000000000000000606000100047300df023900ba04730055
047300550473003c000000000000006c000001a8000001f80000045c0000
06c80000095400010000000602b5003c00ca000700020010004000860000
051705ec00050002b15485410b032c032c032c0222001d001f032b032a00
3c001f032ab2061d1fb80328b326181fd0bc032900e0032900020329b22b
1d1fb90327031db23b1f40b80323b31215320f412d03200001002f032000
0100200320006f032000af032000bf03200004005f031e00010010031e00
7f031e0080031e00af031e00bf031e00d0031e00060000031e0010031e00
20031e006f031e009f031e00e0031e0006031d031cb2201f104127031900
7f03190002000f031700ef031700ff03170003001f0317002f0317004f03
17005f0317008f0317009f03170006000f0317005f0317006f0317007f03
1700bf031700f00317000600400317b2923340b80317b28b3340b80317b3
6a6c3240b80317b2613340b80317b35c5d3240b80317b357593240b80317
b34d513240b80317b344493240b80317b23a3340b80317b331343240b803
17b32e423240b80317b3272c3240b80317b312253280b80317b30a0d32c0
4116031600d00316000200700316000102c4000f0101001f00a0031500b0
031500020306000f0101001f00400312b32426329fbf0304000103020301
0064001fffc00301b20d1132410a02ff02ef0012001f02ee02ed0064001f
ffc002edb30e11329f414a02e200af02e200bf02e2000302e202e202e102
e1007f02e00001001002e0003f02e0009f02e000bf02e000cf02e000ef02
e0000602e002e002df02df02de02de000f02dd002f02dd003f02dd005f02
dd009f02dd00bf02dd00ef02dd000702dd02dd001002dc0001000002dc00
01001002dc003f02dc000202dc02dc001002db000102db02db000f02da00
0102da02daffc002d3b2373932b9ffc002d3b22b2f32b9ffc002d3b21f25
32b9ffc002d3b2171b32b9ffc002d3b2121632b802d2b2f9291fb9032603
1cb23b1f40bb0322003e00330322b225311fb80318b23c691fb802e3b320
2b1fa0413002d400b002d40002000002d4001002d4002002d4005002d400
6002d4007002d40006006002d6007002d6008002d6009002d600a002d600
b002d60006000002d6001002d6002002ca002002cc002002d6003002d600
4002d6005002d6000802d0b2202b1fb802cfb226421f411602ce02c70017
001f02cd02c80017001f02cc02c60017001f02cb02c50017001f02c902c5
001e001f02ca02c6b21e1f00410b02c6000002c7001002c6001002c7002f
02c5000502c1b324121fff411102bf0001001f02bf002f02bf003f02bf00
4f02bf005f02bf008f02bf000602bf0222b2641f12410b02bb00ca080000
1f02b200e90800001f02a600a20800406a1f402643493240204349324026
3a3d3240203a3d329f209f26024026969932402096993240268e92324020
8e92324026848c324020848c3240267a813240207a813240266c76324020
6c76324026646a324020646a3240265a5f3240205a5f3240264f54324020
4f5432b8029eb724271f374f6b0120410f02770030027700400277005002
77000402770277027700f90400001f029bb22a2a1fb8029a402b292a1f80
ba0180bc0180520180a201806501807e01808101803c01805e01802b0180
1c01801e0180400180bb0138000100800140b40180400180bb0138000100
80013940180180ca0180ad018073018026018025018024018020013740b8
0221b2493340b80221b2453340b80221b341423240b80221b33d3e320f41
0f0221003f0221007f0221000300bf022100cf022100ff02210003004002
21b320223240b80221b3191e3240b80222b32a3f3240b80221b32e3a326f
414a02c3007f02c3008f02c300df02c30004002f02c3006002c300cf02c3
0003000f02c3003f02c3005f02c300c002c300ef02c300ff02c3000600df
02220001008f02220001000f0222002f0222003f0222005f0222007f0222
00ef0222000600bf022100ef02210002006f0221007f022100af02210003
000f0221002f0221003f0221004f0221000402c302c30222022202210221
401d101c102b1048038f1c010f1e014f1eff1e0237001616000000121108
11b8010db6f70df8f70d00094109028e028f001d001f0290028f001d001f
028fb2f91d1fb80198b226bb1f41150197001e0401001f01390026012500
1f013800730401001f0135001c0801001f0134001c02ab001f0132b21c56
1fb8010fb2262c1fba010e001e0401b61ff91ce41fe91cb80201b61fe81c
bb1fd720b80401b21fd51cb802abb61fd41c891fc92fb80801b21fbc26b8
0101b21fba20b80201b61fb91c381fadcab80401b21f8126b8019ab21f7e
26b8019ab61f7d1c471f6b1cb80401b21f6526b8019ab21f5e73b8040140
0f1f52265a1f481c891f441c621f4073b80801b61f3f1c5e1f3c26b8019a
b21f351cb80401b61f301cbb1f2b1cb80401b61f2a1c561f291cb80101b2
1f231eb80401b41f35555537b80168402c07960758074f07360732072c07
21071f071d071b071408120810080e080c080a0808080608040802080008
14b8ffe0402b000001001406100000010006040000010004100000010010
02000001000200000001000002010802004a00b013034b024b5342014bb0
c063004b6220b0f65323b8010a515ab005234201b0124b004b5442b0382b
4bb807ff52b0372b4bb007505b58b101018e59b0382bb00288b801005458
b801ffb101018e851bb0124358b900010111858d1bb900010128858d5959
001816763f183f123e113946443e113946443e113946443e113946443e11
394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b
2b2b2b182b1d42b0964b5358b235aaaa1d4259b0324b5358b235ffff1d42
594bb09353205c58b901f201f04544b901f101f045445958b9033e01f245
5258b901f2033e4459594bb8015653205c58b9002001f14544b9002601f1
45445958b9081e0020455258b90020081e4459594bb8019a53205c58b900
2501f24544b9002401f245445958b909090025455258b900250909445959
4bb8040153205c58b173244544b1242445445958b917200073455258b900
7317204459594bb8040153205c58b1ca254544b1252545445958b9168000
ca455258b900ca16804459594bb03e53205c58b11c1c4544b11e1c454459
58b9011a001c455258b9001c011a4459594bb05653205c58b11c1c4544b1
2f1c45445958b90189001c455258b9001c01894459594bb8030153205c58
b11c1c4544b11c1c45445958b90de0001c455258b9001c0de04459592b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b65422b2b01b33b59635c4565234560234565602345
60b08b766818b080622020b163594565234520b003266062636820b00326
6165b059236544b063234420b13b5c4565234520b003266062636820b003
266165b05c236544b03b2344b1005c455458b15c406544b23b403b452361
4459b347503437456523456023456560234560b089766818b080622020b1
34504565234520b003266062636820b003266165b050236544b034234420
b147374565234520b003266062636820b003266165b037236544b0472344
b10037455458b137406544b24740474523614459004b5342014b5058b108
004259435c58b108004259b3020b0a124358601b2159421610703eb01243
58b93b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d
412d411bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b21
1bba01a80400000b2b59b0102342b0112342002b74757375001845694445
69444569447373737374757374752b2b2b2b74752b2b2b2b2b7373737373
73737373737373737373737373737373737373732b2b2b45b04061447374
00004bb02a534bb03f515a58b1070745b040604459004bb03a534bb03f51
5a58b10b0b45b8ffc0604459004bb02e534bb03a515a58b1030345b04060
4459004bb02e534bb03c515a58b1090945b8ffc06044592b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b2b2b2b435c58b9008002bbb30140
1e017400735903b01e4b5402b0124b545ab012435c5a58ba009f02220001
007359002b7473012b01732b2b2b2b2b2b2b2b737373732b2b2b2b2b002b
2b2b2b2b2b00456944734569447345694473747545694473456944456944
4569447374456944456944732b2b2b2b2b732b002b732b74752b2b2b2b2b
2b2b2b2b2b2b2b2b2b737475732b7374757374752b2b2b742b002b2b2b00
184569442b5c58410e0336032f0041001f0330032f002d001f032d032f00
32001f0332032f4012261f0302371f0908371f0b0a441f0706441f2b2b2b
2b2b2b2b2b592b0000>
[2389 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 424 2 <000100ba0000018700cd00030037b0852b584018023c000a023c5f006f00
7f00af0004a0000100a004a198182b10f65d5ded003fed31301bb3014000
0800183f1acd30315933353315bacdcdcd000000>LAAAAA+ArialMT AddT42Char 
1 504 3 <00020055ffe7041105c00010001d01feb0852b58b10202435458400a1a1e
0405141e0d0d1709b8ffe8b40f0f025509b8ffe840190d0d02550911000c
0f0f025500160c0c0255000c0d0d0255002f2b2b2bcd2f2b2bcd003fed3f
ed31301bb10602435458400a1a1e0405141e0d0d1709b8fff4b40f0f0655
09b8ffe6b40d0d065509b8ffee40190b0b0655091100100d0d065500100c
0c065500100b0b0655002f2b2b2bcd2f2b2b2bcd003fed3fed31301b404e
04068702880b880fc90e0509070b180245134c154a19431b54135c155c19
521b6b076b0b63136c156b19601b79027706760b7a0f870698079610c918
da02d606d60bdb0f1a1a1e0405141e0d0d174110fff4000c000c01400056
0017fff2000b000b014000560017fff8000d000d01404011561773094021
2334300901000910090209410afff4000b000b014000560009ffe8000d00
0d0140b75609901f110c0c0cb80140b456110e0b0bb80140b45611080d0d
b80140b356117300b8ffc0400c2123342000400002000c0c0cb80140b456
00080b0bb80140b45600080d0db80140b65600901ec78b182b10f62b2b2b
5d2bed2b2b2b10f62b2b5d712bed2b2b2b003fed3fed3130015d71005db0
0243b0405058b4062019101cb8fff0b202200bbeffe00016ffe00012ffe0
000fffe0003838383838013838385959591bb10d14b8032fb46c0d0d041a
b8032fb26c040500183f2b3f2b3031591310123633321616121510020623
22272613101633323611102623220706556bd3a076b274426ad3a1d47991
b9a97c7ca9a97e7c4a5d02d30104013dac5fb3feffdafefefec3ad98b701
9dfe97eff00168016aee6986>LAAAAA+ArialMT AddT42Char 
1 108 1 <000100df000002fb05c0000a010eb0852b58b30a0c0c0cb80140b456000c
0c0cb80140b4560a0e0b0bb80140b456000e0b0bb80140b4560a080d0db8
0140b45600080d0db8014040215603400d11346b047f028f02990804ac04
010900060502030905010c0201ca0a00b8ffc0400a212334300001200001
00b8ffe0b41010025500b8ffea40110f0f0255001c0c0c0255000e0d0d02
5500b8fff040190f0f065500100c0c065500100d0d0655001a0c05400d0f
3405b8ffc0400e212334300501200540050205190bba013c018500182b4e
10e45d712b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c003f3f1739011139
3130015d005d2b012b2b2b2b2b2b1b400c0201090640050509010c090500
183f3f12392f1acd111239303159212311060607353636373302fbb441d3
5497e22f74047b3e7c1fae47ca5f0000>LAAAAA+ArialMT AddT42Char 
1 0 0 <00020100000005000500000300070042b40201e40607b802994013000504
e403000a0704e4010019080605e40203bc023100090199012e00182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>LAAAAA+ArialMT AddT42Char 
LAAAAA+ArialMT /CharStrings get begin
/period 2 def
/zero 3 def
/one 1 def
end
LAAAAA+ArialMT /Encoding get
dup 46 /period put
dup 48 /zero put
dup 49 /one put
pop
end
%ADOEndSubsetFont
/ATTRPO+ArialMT /LAAAAA+ArialMT findfont ct_VMDictPut
/ATTRPO+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one 206{/.notdef}rp]
ATTRPO+ArialMT nf
ATTRPO+ArialMT*1 [9 0 0 -9 0 0 ]msf
51.2213 486.831 mo
(1.0)
[5.004 2.49294 0 ]xsh
75.836 474.832 mo
75.836 473.332 li
@
96.813 474.832 mo
96.813 473.332 li
@
117.789 474.832 mo
117.789 473.332 li
@
138.762 474.832 mo
138.762 473.332 li
@
159.738 474.832 mo
159.738 472.332 li
@
ATTRPN+MathematicaSans*1 [9 0 0 -9 0 0 ]msf
150.855 486.831 mo
(-)sh
%ADOBeginSubsetFont: LAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPO+ArialMT gcheck setglobal} if
1 1116 4 <00010055ffe7042105a6001e0207b0852b58b3130c0c0cb80140b456120c
0c0cb80140b456130c0b0bb80140b456120c0b0bb80140b456130c0d0db8
0140b456120c0d0db901400056b10202435458b90001ffc0400d0d0d0255
011c0e0a1e15151c12b802bb400b0f04041e1c0d0e01000718b8ffeab40f
0f025518b8ffeab40d0d0255182f2b2bcd2fcd2f003fed3fed12392ffdc4
10c42b31301b4034120c0d0d06550f0c0d0d06554b1a791d8a1d9613a713
c30cd60cdb1b080913180e2a1a03130a15121313ca0e0f140e13140e0f0d
b802a440130e0a1e15400ea00e020e0e0f40150115151c12b802bbb70f04
01d340000100b801184011041e1c0d115f106f107f108f10041080074110
fff4000c000c014000560007fff2000b000b014000560007fff8000d000d
014040115607731840212334301801001810180218b8fff4b70d0d065518
902012bc0135000f0195000d0138b20eb501ba01380000ffc0400b212334
200040000200901fb80192b18b182b10f65d2bedf4edf4ed10f62b5d712b
ed2b2b2bf45d3c003fedfd5de43fed12392f5d11392f5d10ed10e487082e
2b057d10c4001112393130b00243b0405058b4093005300bbaffe00003ff
e001383838385901715d2b2b592b2b2b2b2b2b1b400c00001c0d130e0e0d
0d04150ab8032fb56c15150f1c04b8032fb46c1c0d0f12b80333b26c0f04
00183f2b3f2b11392f2b11392f3311331112392f30315913371616333236
35342623220607271321152103363332001514070623222655bd15996c82
b4ad8c578c28a98e02d9fdb74f8491c00108748df4c8fd0180108a8bc4a2
9ab24f3f1602f1acfe765cfef6d1c791b2e00000>ATTRPO+ArialMT AddT42Char 
ATTRPO+ArialMT /CharStrings get begin
/five 4 def
end
ATTRPO+ArialMT /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPO+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one 3{/.notdef}rp /five 202{/.notdef}rp]
ATTRPO+ArialMT nf
ATTRPO+ArialMT*1 [9 0 0 -9 0 0 ]msf
156.102 486.831 mo
(0.5)
[5.004 2.49294 0 ]xsh
180.715 474.832 mo
180.715 473.332 li
@
201.691 474.832 mo
201.691 473.332 li
@
222.668 474.832 mo
222.668 473.332 li
@
243.645 474.832 mo
243.645 473.332 li
@
264.621 474.832 mo
264.621 472.332 li
@
285.598 474.832 mo
285.598 473.332 li
@
306.574 474.832 mo
306.574 473.332 li
@
327.551 474.832 mo
327.551 473.332 li
@
348.527 474.832 mo
348.527 473.332 li
@
369.5 474.832 mo
369.5 472.332 li
@
ATTRPO+ArialMT*1 [9 0 0 -9 0 0 ]msf
363.246 486.831 mo
(0.5)
[5.004 2.49292 0 ]xsh
390.477 474.832 mo
390.477 473.332 li
@
411.453 474.832 mo
411.453 473.332 li
@
432.43 474.832 mo
432.43 473.332 li
@
453.406 474.832 mo
453.406 473.332 li
@
474.383 474.832 mo
474.383 472.332 li
@
ATTRPO+ArialMT*1 [9 0 0 -9 0 0 ]msf
468.127 486.831 mo
(1.0)
[5.004 2.49295 0 ]xsh
43.672 474.832 mo
483.172 474.832 li
@
264.621 489.516 mo
266.121 489.516 li
@
264.621 487.418 mo
266.121 487.418 li
@
264.621 485.32 mo
267.117 485.32 li
@
ATTRPN+MathematicaSans*1 [9 0 0 -9 0 0 ]msf
238.846 488.319 mo
(-)sh
ATTRPO+ArialMT*1 [9 0 0 -9 0 0 ]msf
244.093 488.319 mo
(0.05)
[5.004 2.49294 5.00401 0 ]xsh
264.621 483.223 mo
266.121 483.223 li
@
264.621 481.125 mo
266.121 481.125 li
@
264.621 479.027 mo
266.121 479.027 li
@
264.621 476.93 mo
266.121 476.93 li
@
264.621 474.832 mo
267.117 474.832 li
@
264.621 472.734 mo
266.121 472.734 li
@
264.621 470.637 mo
266.121 470.637 li
@
264.621 468.539 mo
266.121 468.539 li
@
264.621 466.441 mo
266.121 466.441 li
@
264.621 464.344 mo
267.117 464.344 li
@
ATTRPO+ArialMT*1 [9 0 0 -9 0 0 ]msf
244.102 467.343 mo
(0.05)
[5.004 2.49294 5.004 0 ]xsh
264.621 462.246 mo
266.121 462.246 li
@
264.621 460.148 mo
266.121 460.148 li
@
264.621 458.051 mo
266.121 458.051 li
@
264.621 455.953 mo
266.121 455.953 li
@
264.621 453.855 mo
267.117 453.855 li
@
ATTRPO+ArialMT*1 [9 0 0 -9 0 0 ]msf
244.102 456.854 mo
(0.10)
[5.004 2.49294 5.004 0 ]xsh
264.621 451.758 mo
266.121 451.758 li
@
264.621 449.66 mo
266.121 449.66 li
@
264.621 447.562 mo
266.121 447.562 li
@
264.621 445.465 mo
266.121 445.465 li
@
264.621 443.367 mo
267.117 443.367 li
@
ATTRPO+ArialMT*1 [9 0 0 -9 0 0 ]msf
244.102 446.366 mo
(0.15)
[5.004 2.49294 5.004 0 ]xsh
264.621 441.27 mo
266.121 441.27 li
@
264.621 439.172 mo
266.121 439.172 li
@
264.621 437.074 mo
266.121 437.074 li
@
264.621 434.977 mo
266.121 434.977 li
@
264.621 432.879 mo
267.117 432.879 li
@
%ADOBeginSubsetFont: LAAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPO+ArialMT gcheck setglobal} if
1 1736 5 <0001003c0000040705c0001e0227b0852b58b10602435458400911100d18
131306550db8fff4b4111106550db8ffee4009101006550d1e14051eb8ff
e84017131306551e1e111106551e1c0e1006551e0c0d0d06551eb802bb40
0c020a1717201f10110202201f1112392fd4cd1112392fcd002fed2b2b2b
2b3fed2b2b2bc43231301bb10202435458400911100d0c121202550db8ff
f440090f1102550d1e14051eb8ffe0400b121302551e140f1102551eb802
bbb2020a17b8ffe8b40b0b025517b8ffec400e0d0d02551717201f101102
02201f1112392fd4cd1112392f2b2bcd002fed2b2b3fed2b2bc43231301b
40473b053b06bb05bf06bb07c708c91c07490c590c540e6b0c640e7a127a
138912bc12e51ae51bf01a0cbf0bb713021e0a10080606ca1c1a141c1c1a
081c1a030102081a1c030d1e10b802a4b34f110111b80118b50d1e140500
1eb802bbb301020c0a4110fff4000c000c01400056000afff2000b000b01
400056000afff8000d000d0140400d560a7317d30000014021233401bb02
81002000100138400c11b53f025f026f027f020402ba0224001f018fb18b
182b10f65df4ed10f62b3c10f4ed2b2b2b003f3cfd3c3fedfd5de4111217
390111121739870e2e2b0e7d10c4011112393130b00243b040505840091b
101c101d101e1006befff00007ffe00008fff00009fff000383838380138
38383859005d015d7259591b400910100d1b07070d021eb80333b46c020c
140db8032fb26c140500183f2b3f2b1139113312392f3031592515212637
36363736363534262322060727363633321615140606070606070407fc37
021725a39aefa8997b829c01b913f8d1d3f648a7c2a25c1eadad413c63c0
7ec4e5666b939c8a13cfd9eaad58aabca48861310000>ATTRPO+ArialMT AddT42Char 
ATTRPO+ArialMT /CharStrings get begin
/two 5 def
end
ATTRPO+ArialMT /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPO+ArialMT*1 
[46{/.notdef}rp /period /.notdef /zero /one /two 2{/.notdef}rp /five 
202{/.notdef}rp]
ATTRPO+ArialMT nf
ATTRPO+ArialMT*1 [9 0 0 -9 0 0 ]msf
244.102 435.878 mo
(0.20)
[5.004 2.49294 5.004 0 ]xsh
264.621 430.781 mo
266.121 430.781 li
@
264.621 428.684 mo
266.121 428.684 li
@
264.621 490.941 mo
264.621 428.656 li
@
%ADOBeginSubsetFont: GAAAAA+CairoFont-1-0 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
systemdict begin
ATTRPJ+CairoFont-1-0 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/N <1C60D8A8C9B64FADBA97A6E1FF5B5871D175F4659AA9E83FA2E1B6AF3396
7B607A2A3004EA2E6448D85395FB0D826BD5DF44B494FF0BE38C3A870AD00F6D
D1F2AA66DA5ED36E3DD9B13FD39B289767C5273AA2DF8B5E384CE2D25AA60A25
C222C5E5AF9C90540BA6F56D4D8C9E09B95B473590EEC7B73427A316C047EE40
3FB416CAB06DE2BB8C96BA0194A65E927A08C098A50F716F4B9880D200D19943
6951F686773001B68632CAC6D32037E47EC95F> |-
/a <1C60D8A8C9B7A73DB6D3C62637EA14DFBD02E802A7A94152DD35B18EAE88
98D2E584EA0449B13143C828109183FA5F4E2FFFDB7CDD3D3885E2BF91B93AEA
733F56C2E8F3AAD3EC12413DEE46E6BA2CE0CD2242D8547D96A57FFC4DC8E4CB
5651933A76ED0777FBF57B8A00539D6FB8A8D729F0CBDCAE7BFDEE50534E931A
45D6FC006D6495566A6BF0C22F910B544368EF06495D9C3E4CCF66A78290D158
5845F1935E1EFFF7B86C980D36C6911D38448FC7CAD1AF54392ECDA5F68CFADD
7947CA62F280275D2A1A17D8547E2C46750FC1F8EA7E1FC55D7D420DD72D76D6
A1F67615CE84BF721658209B> |-
/d <1C60D8A8C9B7A73DB60B006BFE598D0FA476EA845A431872858AD00728AA
A2FF2DA603627D6B130CBDF7A26D384F5DE144860D4F362DEBDB88D8BB5446C3
EE6C0F13F34B5DF6D3A2EC27D06940EEE89AAD5A5F70A2BF95398FC8B5D39BCC
5F4123BFDF07C1411F9DA23F5BA9AD79D9FFCA5E538FB64A708001251CBD4D4A
FA788606FFDFF8F4432B3808BFA08F27034E2AEEAF93340BA7A2C8B7EEDE54EB
37B03C7A4E8FBEA972D936B76B655CF7DCBBE6121D36E42D13802D31DB10E153
873BB0C9971D799B17FA6454882CCED4471723F94931432C59219330C0F95372
72D43DA9CC96B1FEFB366BBADF3B31370EED1D7A15CE3CA69DEABF693233AED2
FFCDE0D217940825F734> |-
/h <1C60D8A8C9B7A73DB99C4D2E193835F559E3A216098D316C9F7E701C2871
E1389912B053DF0707BD4B792F18D3A89BA3453850C05D981C78BE0ADD050871
F9A308F808EDE65B863AA78D674CCFCD299203701F86DD47C20D0D1ADE5D5F1E
4B0E620C3EDA159265574A10DF605477177135991D215D74642C85B8A7A0E60C
38A0BA3C89FB451A168941FC30AF9ED5BAF0140B678642BCEBC1177845164B18
9EF2F3BC2AD76FCDF7045213C7E89B9792CF95FE568EB6A903F0EAC3BB24B108
958816641A296B37640E9E26F6FB0A09CBD867DD48321DDEE3CF5C6F9EAAAD2E
112B4674D2A90C93DF87E479055E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ATTRPJ+CairoFont-1-0 /Encoding get
dup 78 /N put
dup 97 /a put
dup 100 /d put
dup 104 /h put
pop
%ADOEndSubsetFont
/ATTRPJ+CairoFont-1-0*1 
[78{/.notdef}rp /N 18{/.notdef}rp /a 2{/.notdef}rp /d 3{/.notdef}rp /h 
11{/.notdef}rp /t 139{/.notdef}rp]
ATTRPJ+CairoFont-1-0 nf
ATTRPJ+CairoFont-1-0*1 [28 0 0 -28 0 0 ]msf
213.387 535.881 mo
(N)sh
%ADOBeginSubsetFont: HAAAAA+Mathematica AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPK+Mathematica gcheck setglobal} if
1 292 5 <00010000feb60289056d00030006b3010001302b090123010289fde16a02
1f056df94906b7000000>ATTRPK+Mathematica AddT42Char 
1 244 4 <0002008700f804a2030e000300070008b50604020002302b012135211121
352104a2fbe5041bfbe5041b029876fdea77>ATTRPK+Mathematica AddT42Char 
ATTRPK+Mathematica /CharStrings get begin
/slash 5 def
/equal 4 def
end
ATTRPK+Mathematica /Encoding get
dup 47 /slash put
dup 61 /equal put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPK+Mathematica*1 
[40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /.notdef /slash 13{/.notdef}rp 
/equal 194{/.notdef}rp]
ATTRPK+Mathematica nf
ATTRPK+Mathematica*1 [28 0 0 -28 0 0 ]msf
241.359 535.881 mo
(=)sh
%ADOBeginSubsetFont: FAAAAA+TimesNewRomanPSMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATTRPI+TimesNewRomanPSMT gcheck setglobal} if
1 2980 8 <0001006efeab019800c80017006db0852b58402759025917c41603091760
19d019030901000704040f081200b612400c0b043a0f151f1580150315b8
012a400b1f0f5f0f020f19189ca4182b4e10f45d4dfd5ded003fede41239
01111217393130015d01711bb70100000c12120c0b00183f332f11332f33
3031591335363635342726232207062322263534363332161514066e6771
0907070b251214313a4b3642678ffeab2c228f50130d0914093a33314673
5f67b100>ATTRPI+TimesNewRomanPSMT AddT42Char 
1 3332 10 <00010091ffe4016f00c2000b003bb0852b58401c0040060b034009403a35
09403f355f09019f09af090209850c6a7a182b10f671722b2bed003fed31
301bb200060b00183f3330315925321615140623222635343601002f4041
2e2e4141c2412e2e41412e2f4000>ATTRPI+TimesNewRomanPSMT AddT42Char 
1 3164 9 <000200b0ffe4019003b0000b0017005bb0852b58b10319b80125401d0d67
369019a01902064000070c40120b0f4015034009349015a0150215bc0125
001800d2010000182b10f65df4ed10ed003fed3fed3130015d2b1bb70c12
0600120b000700183f3f1133113330315901321615140623222635343613
321615140623222635343601212e41412e2e41412c2f41422e2e414103b0
412e2e41412e2e41fd13422e2e41412e2e42>ATTRPI+TimesNewRomanPSMT AddT42Char 
ATTRPI+TimesNewRomanPSMT /CharStrings get begin
/comma 8 def
/period 10 def
/colon 9 def
end
ATTRPI+TimesNewRomanPSMT /Encoding get
dup 44 /comma put
dup 46 /period put
dup 58 /colon put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATTRPI+TimesNewRomanPSMT*1 
[44{/.notdef}rp /comma /.notdef /period /.notdef /zero /one /two 
/three /four /five /six 3{/.notdef}rp /colon 197{/.notdef}rp]
ATTRPI+TimesNewRomanPSMT nf
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
266.419 535.881 mo
(100)sh
%ADOBeginSubsetFont: JAAAAA+TimesNewRomanPSMT-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/JAAAAA+TimesNewRomanPSMT 14 GetGlyphDirectory
13 <001C60D8A8C9B6079F6D1FEB8BC784E04BF33C5305B0D4256869F532ACB3
2C74C002E8ED440A8EAC63AB4AD37FFCB4A6D6CAEA1AEEFF18F89C5B0833DBD4
7B99A1B5A2B79F9F3C2F88C215DCA39EBB12F7D794B2B8C12D065819ECCC5C46
95D4469EE5D14154ADF303EBA8182A38B1AAACD803178EF5222731F221EB073E
6A696B29DC16CF> |
14 <001C60D8A8C9B67DB588E4F1CA08AAE2849150993F04A9505F35FB0651E8
BD07763E353B62D97D6E9021C85F29A34781ADAE5B59E161316B077C7DB71750
04CCC0C4772739CA84C24B23204E2217A26145598E0CE01644B0D03AB0D6875F
D2D1D2E9D671471BBBE80FF713590DADA9249E6B1C7C793099AF4598A74DFDA5
08980F51AE64350392679CAE63EF949FFEEBC51FE76C494551CA81F76DAC4046
1EB7E7D8BF8804E50645A5BDCEB413AE0E20C4009876DCACFCAF471361562208
019B4D3C27033B106A4CBAEB80E0E58615E31F89449322AED549A55859D7F9B8
7737D4E99FEAEFB56E26C7C25F46BD486EB2E6BA45781093A04DFBCF387B3A60
1A079ED4E7EE9CBB25C2CFBD25FDB004A929AC> |
15 <001C60D8A8C9B7A8F201C8DC2F8830BC05372CE201CEB9729DEE7D3B3826
DD4B316749C78BC0FBB35B347B0D684A867E7B9B4C2FF428A7379BE9B72789E3
2CA54C2556AFB4CE81B28276E08532AA390D24706197BD0E03BDD6ABDDECD38D
6906C109DF8AC0E25386FCD69A0E38D86426BB6ACC3AE41339D45833760EB6B0
2E8C563EF850D9BDA018FE0B9CC7BB5D3D79ADE5156AFAA0AE5373471CFF6D37
35FBC6808A9FF1ABBDF0E07C97606D393F0E04001AFDE2507DF36212> |
16 <001C60D8A8C9B7734F831E0A391DCC1BA46DB3A0CCEFD90EE45844DB7551
41C7DF76A511C59C2EBE1FDFBED9F3684F2A05C53BD0291CD38729DD1E593DAC
33A0FE5B1A3C847EDC7EB9636F1105C974B3D178BAD69780639E012563CD7CCA
C4B34C9953844DB5CA23EA8F8FA9D001C37AE70B5E3138584F4F1B2C61D16D5B
5BA4D4556E5F07842339564BCEB842DF7C487452> |
17 <001C60D8A8C9B58652243BB181C206FE1B25419C345F7BF8A180A5464467
00F9148FAB68A72315B7305543521132D38E4816371EA9ABAE33753A8B69EC98
EECA5048597A6F7D78592B3F17A626F9D878309852075714B317B415324CB53B
234CB67FFC83BFC22E3FE536CE3EDF2704C3EB0DABEDAC2844E889342A6D8C15
F6CD875AA54B1146D5876169E1AD8F8E5D2FCC90B05CD5FF888711E28444FE7D
04274FD644DB6F78ED4A3630CF426AD1C034358EBAF324643430DCDD728FC6BF
322D428ABECB0A5004FE69D74B0C86655E128D75DCDAA4592908998F57EBB145
E4D8986AFB60B43CE907BB4104F81464CC696F6AE2B7CC8AF2D4F2C970A0F3ED
CABCBF8E3F8B6873A852E2B0F6FD5395A04D78DCE9F4DB447AF1D73CE8948282
C87D5836670CA9770E1E68EEAD4109D0E1A56DEEF4E9FB8859D7F1D8F13FD051
4514857B6CFBD2F86D90C51A7E4D91B5F96E411C5B1EA4CD465A7F57C4DDAF2E
49DD251FAFD3DDAAF277C3615498B7C7B5F27FF057952A166196F20B5BEF13EB
42E3B3630DAF95ABC9E2788DC0629F551B7F0DFFD963D3AA632F96D9577590AA
E364B4A4EB37429093C3CDFED892064A7FDDC71619D790D47B933223DA377F3F
2D0E59> |
18 <001C60D8A8C9B7A73DDE03E4B644C159EB8B647E016C26B087177A3C5BC5
BAF02161182070C8A4222C2E1ED9B95B756DF22232FA7BE5897B7C6D57479511
9A3B50894B8B0E1A184B7636697D129D88C76A3FD42BABE719D85F7DC372AB50
B8B16D988DA863EE6A5B7454A406C9D5E815158A5786509E6DF27377A83F3454
DD6905EA3123CBA5BA0D4772C12767864CF2C5FEDE2AFF05D3CC0534D74E6AE9
DBF9F3B49677449A761BE771C9C1AB2D4DC994988233EE24B9E175796C6F1351
8A71BC990F312D4821883A95164BCE1683B85434AFA8> |
19 <001C60D8A8C9B7551CC4DF4A6CE49C8EA14C989C912CC6BA545130057BBB
46B4BE4FE8AD8DA490A8FA867D115DBEDFEB6B20F838E63DDA9E960444FF6F5B
CD8863AEC515E3328A0D45EA0F68A58418AB0CE2F1CEE6C52F88FC52D0AC346A
A2D19587837E44558D2BEFC80EA99B7231488DAA37FA1E88E48CA2960CD4525F
CAB3C7E51FE4175DBFA3A68949661CC0139047AC33D2B7C158A58F27A37D9A25
8CDF31171B3A51A6AE2C34237CA75C5A32C355368C566B4902F9B16C67549D3B
01632991EB259A797B96635B6D1C4C23652958D3D0B19803888920443634A93A
6EB2B2C02FA7D0822A94280E605F0C2AF2E3F4C5C93CDC4BCC700C760E0D82C5
8A2DDF236C3C368082C6383D8474FA491463E6DF66A570CF> |
20 <001C60D8A8C9B743839640A865691735BCE7990F95B26923B4559D703691
218F95F1D1D021FFEA8C3ED4957F210FE5A0D71B4347C64287BF830285A7E9B5
A1D30905D53F646BA5B11955734A0E6FE1E29CF7B6341C4A5236C4AE255F89ED
E5BD7FD51B87C45F2152E9D85F6D7FD6B7895D19F1C341BC21793DC039780A05
36A24600F883DC02737B3B44C41AE876AA8BFA1C078DC7371CC53911AC40B1C8
64A6917C4527A7CA0731EC84D7D21716DD2C5B08792CD3AFF21852664A694AF3
E08A6F4300B25A9948AA> |
21 <001C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438EC
C54400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F4
2A6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F
9C2999730E7919239B324086FEA852156F456647AA0692084759C352D6998971
799F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |
22 <001C60D8A8C9B7015BC447D07CD7FEE2FA42C22D9FC5B73E8D4834FFE021
DC03E0A50BC09D4FC19023F6248999FAF2DA6D72098301B94F335EB41A359FE9
34546984EC8EC96586E8F07E3F84E65AC5AAA825BE8302DB3BF7B2E5F7105D47
ACEF667E179E0395F2DF53F6E6B9> |
23 <001C60D8A8C9B766CA5ADA49389396CBA366364950488232408CADC90BB7
A3301E535030A2F0CE817F9CCCB0EE9D6096312C59E954C04BF7578EAC1F33A1
EDD188F8DE0BB3FF66CB4D5C485FEBC54D20278394B3B489E80503C28B258588
BA336EE07B0D098D02016F7AB3E9998E75473F5DC5F3252209E7> |
24 <001C60D8A8C9B74F36626443C81140A0FD41C44D0762310D2E5A14FA1EAD
5E0C4E7A6792C29EA2E6AEA317CA1EE55FD38F4BA6E339660096C5D5A88398ED
E31D9F14CC5ADC82506F8CE39A1EE4744621BCB041253F0C3E32D92C00D5639B
535D2C217088E4BF4FC5AFE3FE77FDD551F6E3CA89BF092F90578833D3DFD817
D91B4474E1B9116A8703D5FB443ACCC4689F8888E64802833157B8C890B626AB
DE8AEF63C8C0D2F57D6D61E68C9587F6D864F53C5A7EBBB16775F3F87728AD62
EB8557> |
25 <001C60D8A8C9B784FA60143A4BD282A9DC1290E0AC4D64E420350268D65B
5CC5DD387AA47052A8918643F1E84FE3F3E19A2816FA45AA72EDAFAA2D52E71C
C1F95BA3B8E61967DFFD438DF506898EFC00CDC472B9D3B4595AC376674CA153
62DA447A299CA7B5981BF0B9110B50309C5B7B2FBD384484B2A47A05468A15D0
91119904BA1754BCDE94413E437C2DC2E4CC87DD951DAA5FFDACA180AAAAA4EE
CBA1> |
26 <001C60D8A8C9B6557A33834CBA8FF15C21CB5F5855468AF26AE4BD7FB5D6
AE494A071493F471FA5BD4D993E8FB760A4F4528D850B793B866ED0C43A9AE73
42EDDFD90400FD8B52AF6904E825899DA2AAF03DB6837A0E253FF0C1F1006C30
3E9B6A02F2239523F160BCBDDB46C89A851FA393C72EB5391B4101B070F0C057
1B5AA64BA5C325139A19E91D3CAE1DBE0A47062A6DC9157FD6A315FE3302A571
2432B123E659D586D5B0E40F006DA753D13142D2D449F59DBABDCFF35739BDFC
8363E94E4FE793C833480569E786EFD8FA5406E2AB2EDFE744A874174A802085
AE305654EAF0D2D7830C46CE5E36A6C1D7A1866A32D68B95E22283E47CBA448D
E8> |
!
end
end end
%ADOEndSubsetFont
ATTRPM+TimesNewRomanPSMT [28 0 0 -28 0 0 ]msf
109.93 60.774 mo
(\000\015\000\006\000\002\000\016\000\010\000\017\000\020\000\021\000\022\000\023\000\002\000\024\000\025\000\023\000\002\000\026\000\002)
[20.216 14 14 18.1161 14.9801 13.9718 19.7678 25.0601 14 13.58 14 13.216 
12.4038 13.58 14 11.4801 0 ]xsh
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
370.302 60.774 mo
(,)sh
ATTRPM+TimesNewRomanPSMT [28 0 0 -28 0 0 ]msf
384.302 60.774 mo
(\000\010\000\004\000\027\000\005\000\004\000\025\000\010\000\024\000\004\000\002\000\025\000\027\000\020\000\024\000\010\000\012\000\006\000\005\000\024\000\002\000\026\000\002\000\025\000\017\000\002\000\030)
[14.9801 14.9801 12.2359 12.4038 14.9801 12.4038 14.9801 13.216 14.9801 14 12.4038 12.2359 
19.7678 13.216 14.9801 14 14 12.4038 13.216 14 11.4801 21 12.4038 13.9718 
14 0 ]xsh
109.93 101.287 mo
(\000\031\000\014\000\006\000\014\000\013\000\005\000\027\000\006\000\032)
[14.9801 12.4038 14 12.4038 17.6961 12.4038 12.2359 14 0 ]xsh
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
238.842 101.287 mo
(:)sh
ATTRPJ+CairoFont-1-0*1 [28 0 0 -28 0 0 ]msf
253.598 101.287 mo
(a)sh
ATTRPK+Mathematica*1 [28 0 0 -28 0 0 ]msf
274.598 101.287 mo
(=)sh
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
299.658 101.287 mo
(1,)
[14 0 ]xsh
ATTRPJ+CairoFont-1-0*1 [28 0 0 -28 0 0 ]msf
327.658 101.287 mo
(d)sh
ATTRPK+Mathematica*1 [28 0 0 -28 0 0 ]msf
349.666 101.287 mo
(=)sh
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
374.726 101.287 mo
(0.1,)sh
ATTRPJ+CairoFont-1-0*1 [28 0 0 -28 0 0 ]msf
423.726 101.287 mo
(h)sh
ATTRPK+Mathematica*1 [28 0 0 -28 0 0 ]msf
444.726 101.287 mo
(=)sh
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
469.786 101.287 mo
(0.1,)sh
%ADOBeginSubsetFont: IAAAAA+Mathematica-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2022 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/IAAAAA+Mathematica 2 GetGlyphDirectory
3 <001C60D8A8C9B7BF865DCD0BF51438FE76F086549189DD32A2C28F73209F6
E986620633861358A6E122DAD586C60B7C33875AF807E0187419CBB8E9713F08
644EC0064B1EC6C540F611C401C4E11E70B308644E1C2F898BE1C1487EFCDBA7
668B64C505A572AD246D75CC20B94C779737D0E1120A09B9D71748942F951B9D
46C7772D1ABBD22EDF0AAD109C4A87FFB0D5E76F3042A7CD3753073FD8CFDB3D
D1E1777EFDCDEAFD4398C86F18679B48B9583BA5FFFE080837B2A53B591C690C
3042AF2CCF659D4ADC802FB4967075F90C8952F360F48D524691900237E5C852
452BEA84FF65546DD407129C50BE165195AA4FE60ABAFAB7A0093BAB0C535E21
A38624D2D60777C3C7DE3A0CA8491E5FFD4B31D15959B63C2DABF918C37D7622
21491DA27E211082341BF0C384E326B> |
4 <001C60D8A8C9B78FDBCC50973507CE87F9B240D4A8D1F5311174074018299
4B9F131CEBC12529D891C52493399746B37C1411896556D03AC1FB8727D7C3A9
ACC1B20185E4FC1BB7667CB82A3FC07EFFE48612D2175E716D0EA5B64DC3EE7F
21D99A91291D3B73637226EB9E85CA8255E605DD27A4FC415EB469F83E4D2F7D
A53FA78B61E00CA7B8464C6F52375F16C8770177F483BDDBD8EB51517F9E85D4
6B5D353EC2D0766246EF8E080DBC9DFBD9D58670E225828EE1006CBBAF7F5000
CEC84D21D9ACF02379CE9A5213A> |
!
end
end end
%ADOEndSubsetFont
ATTRPL+Mathematica [28 0 0 -28 0 0 ]msf
520.774 101.287 mo
(\000\003)sh
ATTRPK+Mathematica*1 [28 0 0 -28 0 0 ]msf
541.97 101.287 mo
(=)sh
ATTRPL+Mathematica [28 0 0 -28 0 0 ]msf
567.031 101.287 mo
(\000\004)sh
ATTRPK+Mathematica*1 [28 0 0 -28 0 0 ]msf
581.674 101.287 mo
(/)sh
ATTRPI+TimesNewRomanPSMT*1 [28 0 0 -28 0 0 ]msf
590.522 101.287 mo
(6)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/ATTRPK+Mathematica*1 uf
/ATTRPK+Mathematica uf
/HAAAAA+Mathematica uf
/ATTRPN+MathematicaSans*1 uf
/ATTRPN+MathematicaSans uf
/KAAAAA+MathematicaSans uf
/ATTRPO+ArialMT*1 uf
/ATTRPO+ArialMT uf
/LAAAAA+ArialMT uf
/ATTRPM+TimesNewRomanPSMT-Identity-H uf
/ATTRPM+TimesNewRomanPSMT /CIDFont ur
/ATTRPL+Mathematica-Identity-H uf
/ATTRPL+Mathematica /CIDFont ur
/ATTRPJ+CairoFont-1-0*1 uf
/ATTRPJ+CairoFont-1-0 uf
/GAAAAA+CairoFont-1-0 uf
/ATTRPI+TimesNewRomanPSMT*1 uf
/ATTRPI+TimesNewRomanPSMT uf
/FAAAAA+TimesNewRomanPSMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
